---
source: hydroflow/tests/surface_reduce.rs
expression: df.meta_graph().unwrap().to_mermaid()
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#02f,color:#fff,stroke:#000
classDef pushClass fill:#ff0,stroke:#000
linkStyle default stroke:#aaa,stroke-width:4px,color:red,font-size:1.5em;
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    3v1[\"(3v1) <tt>source_iter(vec![0])</tt>"/]:::pullClass
    1v1[\"(1v1) <tt>merge()</tt>"/]:::pullClass
    2v1[\"(2v1) <tt>map(|v| (v, ()))</tt>"/]:::pullClass
    7v1[\"(7v1) <tt>source_stream(pairs_recv)</tt>"/]:::pullClass
    4v1[\"(4v1) <tt>join()</tt>"/]:::pullClass
    5v1[\"(5v1) <tt>map(|(_src, ((), dst))| dst)</tt>"/]:::pullClass
    6v1[/"(6v1) <tt>tee()</tt>"\]:::pushClass
    10v1["(10v1) <tt>handoff</tt>"]:::otherClass
    10v1--1--->1v1
    3v1--0--->1v1
    1v1--->2v1
    2v1--0--->4v1
    7v1--1--->4v1
    4v1--->5v1
    5v1--->6v1
    6v1--0--->10v1
    subgraph sg_1v1_var_my_join_tee ["var <tt>my_join_tee</tt>"]
        4v1
        5v1
        6v1
    end
    subgraph sg_1v1_var_reached_vertices ["var <tt>reached_vertices</tt>"]
        1v1
        2v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 1"]
    8v1[\"(8v1) <tt>reduce(|a, b| a + b)</tt>"/]:::pullClass
    9v1[/"(9v1) <tt>for_each(|sum| println!(&quot;{}&quot;, sum))</tt>"\]:::pushClass
    8v1--->9v1
end
6v1--1--->11v1
11v1["(11v1) <tt>handoff</tt>"]:::otherClass
11v1===o8v1


---
source: hydroflow/tests/surface_codegen.rs
expression: df.meta_graph().unwrap().to_mermaid()
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa,stroke-width:4px,color:red,font-size:1.5em;
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    3v1[\"(3v1) <code>source_iter(vec![0])</code>"/]:::pullClass
    1v1[\"(1v1) <code>union()</code>"/]:::pullClass
    2v1[\"(2v1) <code>map(|v| (v, ()))</code>"/]:::pullClass
    7v1[\"(7v1) <code>source_stream(pairs_recv)</code>"/]:::pullClass
    4v1[\"(4v1) <code>join()</code>"/]:::pullClass
    5v1[\"(5v1) <code>map(|(_src, ((), dst))| dst)</code>"/]:::pullClass
    6v1[/"(6v1) <code>tee()</code>"\]:::pushClass
    8v1[/"(8v1) <code>for_each(|x| println!(&quot;Reached: {}&quot;, x))</code>"\]:::pushClass
    9v1["(9v1) <code>handoff</code>"]:::otherClass
    9v1-->|1|1v1
    3v1-->|0|1v1
    1v1-->2v1
    2v1-->|0|4v1
    7v1-->|1|4v1
    4v1-->5v1
    5v1-->6v1
    6v1-->|0|9v1
    6v1-->|1|8v1
    subgraph sg_1v1_var_my_join_tee ["var <tt>my_join_tee</tt>"]
        4v1
        5v1
        6v1
    end
    subgraph sg_1v1_var_reached_vertices ["var <tt>reached_vertices</tt>"]
        1v1
        2v1
    end
end


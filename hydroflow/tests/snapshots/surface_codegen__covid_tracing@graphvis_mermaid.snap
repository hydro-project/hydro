---
source: hydroflow/tests/surface_codegen.rs
expression: hydroflow.meta_graph().unwrap().to_mermaid()
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa,stroke-width:4px,color:red,font-size:1.5em;
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1[\"(1v1) <code>source_stream(contacts_recv)</code>"/]:::pullClass
    2v1[\"(2v1) <code>flat_map(|(pid_a, pid_b, time)| [(pid_a, (pid_b, time)), (pid_b, (pid_a, time))])</code>"/]:::pullClass
    4v1[\"(4v1) <code>source_stream(diagnosed_recv)</code>"/]:::pullClass
    9v1[\"(9v1) <code>map(|(pid, t)| (pid, (t, t + TRANSMISSIBLE_DURATION)))</code>"/]:::pullClass
    3v1[\"(3v1) <code>union()</code>"/]:::pullClass
    5v1[\"(5v1) <code>join()</code>"/]:::pullClass
    6v1[\"<div style=text-align:center>(6v1)</div> <code>filter(|(_pid_a, ((_pid_b, t_contact), (t_from, t_to)))| {<br>    (t_from..=t_to).contains(&amp;t_contact)<br>})</code>"/]:::pullClass
    7v1[\"(7v1) <code>map(|(_pid_a, (pid_b_t_contact, _t_from_to))| pid_b_t_contact)</code>"/]:::pullClass
    8v1[/"(8v1) <code>tee()</code>"\]:::pushClass
    13v1["(13v1) <code>handoff</code>"]:::otherClass
    13v1-->9v1
    1v1-->2v1
    2v1-->|0|5v1
    4v1-->|0|3v1
    9v1-->|1|3v1
    3v1-->|1|5v1
    5v1-->6v1
    6v1-->7v1
    7v1-->8v1
    8v1-->|0|13v1
    subgraph sg_1v1_var_contacts ["var <tt>contacts</tt>"]
        1v1
        2v1
    end
    subgraph sg_1v1_var_exposed ["var <tt>exposed</tt>"]
        3v1
    end
    subgraph sg_1v1_var_new_exposed ["var <tt>new_exposed</tt>"]
        5v1
        6v1
        7v1
        8v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    12v1[\"(12v1) <code>source_stream(people_recv)</code>"/]:::pullClass
    10v1[\"(10v1) <code>join()</code>"/]:::pullClass
    11v1[/"<div style=text-align:center>(11v1)</div> <code>for_each(|(_pid, ((name, phone), exposure))| {<br>    println!(&quot;[{}] To {}: Possible Exposure at t = {}&quot;, name, phone, exposure);<br>})</code>"\]:::pushClass
    12v1-->|0|10v1
    10v1-->11v1
    subgraph sg_2v1_var_notifs ["var <tt>notifs</tt>"]
        10v1
        11v1
    end
end
8v1-->|1|14v1
14v1["(14v1) <code>handoff</code>"]:::otherClass
14v1-->|1|10v1


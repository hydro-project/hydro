---
source: hydroflow/tests/surface_flow_props.rs
expression: hf.meta_graph().unwrap().to_mermaid()
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa,stroke-width:4px,color:red,font-size:1.5em;
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1[\"(1v1) <code>source_iter_delta((0..10).map(SetUnionSingletonSet::new_from))</code>"/]:::pullClass
    2v1[\"(2v1) <code>map(|SetUnion(SingletonSet(x))| SetUnion(SingletonSet(x + 5)))</code>"/]:::pullClass
    3v1[/"(3v1) <code>tee()</code>"\]:::pushClass
    4v1[/"(4v1) <code>cast(None)</code>"\]:::pushClass
    5v1[/"(5v1) <code>map(|SetUnion(SingletonSet(x))| 10 * x)</code>"\]:::pushClass
    6v1[/"(6v1) <code>for_each(|x| println!(&quot;seq {:?}&quot;, x))</code>"\]:::pushClass
    7v1[/"(7v1) <code>for_each(|s| println!(&quot;delta {:?}&quot;, s))</code>"\]:::pushClass
    1v1-.->2v1
    2v1-.->3v1
    3v1-.->4v1
    3v1-.->7v1
    4v1-->5v1
    5v1-->6v1
    subgraph sg_1v1_var_my_tee ["var <tt>my_tee</tt>"]
        1v1
        2v1
        3v1
    end
end


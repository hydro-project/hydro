---
source: hydroflow/tests/surface_singleton.rs
expression: "df.meta_graph().unwrap().to_mermaid(&Default::default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter(10..=30)</code>"/]:::pullClass
2v1[\"(2v1) <code>source_iter_delta(15..=25)</code>"/]:::pullClass
3v1[\"(3v1) <code>map(Max::new)</code>"/]:::pullClass
4v1[\"(4v1) <code>state_ref::&lt;Max&lt;_&gt;&gt;()</code>"/]:::pullClass
5v1[\"(5v1) <code>inspect(|x| println!(&quot;inspect {}&quot;, x))</code>"/]:::pullClass
6v1[\"(6v1) <code>filter(|value| { value &lt;= sum_of_stream2.as_reveal_ref() })</code>"/]:::pullClass
7v1[/"(7v1) <code>for_each(|x| println!(&quot;filtered {}&quot;, x))</code>"\]:::pushClass
8v1[/"(8v1) <code>for_each(|x| println!(&quot;state {:?}&quot;, x))</code>"\]:::pushClass
2v1-.->3v1; linkStyle 0 stroke:#060
3v1-.->4v1; linkStyle 1 stroke:#060
6v1-->7v1
5v1-->6v1
1v1-->5v1
4v1==>8v1; linkStyle 5 stroke:#060
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1
    5v1
    6v1
    7v1
    subgraph sg_1v1_var_filtered_stream1 ["var <tt>filtered_stream1</tt>"]
        5v1
        6v1
        7v1
    end
    subgraph sg_1v1_var_stream1 ["var <tt>stream1</tt>"]
        1v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    2v1
    3v1
    4v1
    8v1
    subgraph sg_2v1_var_stream2 ["var <tt>stream2</tt>"]
        2v1
        3v1
    end
    subgraph sg_2v1_var_sum_of_stream2 ["var <tt>sum_of_stream2</tt>"]
        4v1
    end
end


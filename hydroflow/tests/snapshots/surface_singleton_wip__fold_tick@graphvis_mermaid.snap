---
source: hydroflow/tests/surface_singleton_wip.rs
expression: "df.meta_graph().unwrap().to_mermaid(&Default::default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter(10..=30)</code>"/]:::pullClass
2v1[\"(2v1) <code>source_iter_delta(15..=25)</code>"/]:::pullClass
3v1[\"(3v1) <code>map(Max::new)</code>"/]:::pullClass
4v1[\"(4v1) <code>lattice_reduce()</code>"/]:::pullClass
5v1[/"(5v1) <code>tee()</code>"\]:::pushClass
6v1[\"(6v1) <code>inspect(|x| println!(&quot;inspect {}&quot;, x))</code>"/]:::pullClass
7v1[\"(7v1) <code>identity::&lt;Max&lt;_&gt;&gt;()</code>"/]:::pullClass
8v1[\"(8v1) <code>zip()</code>"/]:::pullClass
9v1[\"(9v1) <code>filter(|(value, sum_of_stream2)| { value &lt;= sum_of_stream2.as_reveal_ref() })</code>"/]:::pullClass
10v1[/"(10v1) <code>for_each(|x| println!(&quot;filtered {:?}&quot;, x))</code>"\]:::pushClass
11v1[/"(11v1) <code>for_each(|x: Max&lt;_&gt;| println!(&quot;state {:?}&quot;, x))</code>"\]:::pushClass
12v1["(12v1) <code>handoff</code>"]:::otherClass
13v1["(13v1) <code>handoff</code>"]:::otherClass
2v1-.->3v1; linkStyle 0 stroke:#060
4v1==>5v1; linkStyle 1 stroke:#060
3v1-.->12v1; linkStyle 2 stroke:#060
6v1-->|0|8v1
1v1-->6v1
7v1-->|1|8v1
5v1==>13v1; linkStyle 6 stroke:#060
9v1-->10v1
8v1-->9v1
5v1==>11v1; linkStyle 9 stroke:#060
12v1-.->4v1; linkStyle 10 stroke:#060
13v1==>7v1; linkStyle 11 stroke:#060
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    2v1
    3v1
    subgraph sg_1v1_var_stream2 ["var <tt>stream2</tt>"]
        2v1
        3v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    1v1
    6v1
    7v1
    8v1
    9v1
    10v1
    subgraph sg_2v1_var_filtered_stream1 ["var <tt>filtered_stream1</tt>"]
        6v1
    end
    subgraph sg_2v1_var_filtered_stream2 ["var <tt>filtered_stream2</tt>"]
        8v1
        9v1
        10v1
    end
    subgraph sg_2v1_var_stream1 ["var <tt>stream1</tt>"]
        1v1
    end
end
subgraph sg_3v1 ["sg_3v1 stratum 0"]
    4v1
    5v1
    11v1
    subgraph sg_3v1_var_sum_of_stream2 ["var <tt>sum_of_stream2</tt>"]
        4v1
        5v1
    end
end


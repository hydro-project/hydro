---
source: hydroflow/tests/surface_codegen.rs
expression: df.meta_graph().unwrap().to_mermaid()
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#02f,color:#fff,stroke:#000
classDef pushClass fill:#ff0,stroke:#000
linkStyle default stroke:#aaa,stroke-width:4px,color:red,font-size:1.5em;
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    4v1[\"(4v1) <tt>source_stream(pairs_recv)</tt>"/]:::pullClass
    3v1[/"(3v1) <tt>tee()</tt>"\]:::pushClass
    4v1--->3v1
    subgraph sg_1v1_var_link_tee ["var <tt>link_tee</tt>"]
        3v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    6v1[\"(6v1) <tt>map(|(a, k)| (k, a))</tt>"/]:::pullClass
    5v1[\"(5v1) <tt>join()</tt>"/]:::pullClass
    7v1[\"(7v1) <tt>map(|(_k, (a, b))| (a, b))</tt>"/]:::pullClass
    1v1[\"(1v1) <tt>merge()</tt>"/]:::pullClass
    2v1[/"(2v1) <tt>tee()</tt>"\]:::pushClass
    8v1[/"(8v1) <tt>for_each(|(a, b)| println!(&quot;transitive closure: ({},{})&quot;, a, b))</tt>"\]:::pushClass
    10v1["(10v1) <tt>handoff</tt>"]:::otherClass
    10v1--->6v1
    6v1--0--->5v1
    5v1--->7v1
    7v1--1--->1v1
    1v1--->2v1
    2v1--0--->10v1
    2v1--1--->8v1
    subgraph sg_2v1_var_edge_merge_tee ["var <tt>edge_merge_tee</tt>"]
        1v1
        2v1
    end
    subgraph sg_2v1_var_the_join ["var <tt>the_join</tt>"]
        5v1
    end
end
3v1--0--->9v1
3v1--1--->11v1
9v1["(9v1) <tt>handoff</tt>"]:::otherClass
9v1--0--->1v1
11v1["(11v1) <tt>handoff</tt>"]:::otherClass
11v1--1--->5v1


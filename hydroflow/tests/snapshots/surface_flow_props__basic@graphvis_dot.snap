---
source: hydroflow/tests/surface_flow_props.rs
expression: hf.meta_graph().unwrap().to_dot()
---
digraph {
    subgraph "cluster n1v1" {
        fillcolor="#dddddd"
        style=filled
        label = "sg_1v1\nstratum 0"
        n1v1 [label="(n1v1) source_iter_delta((0..10).map(SetUnionSingletonSet::new_from))", fontname=Monaco, shape=invhouse, style = filled, color = "#0022ff", fontcolor = "#ffffff"]
        n2v1 [label="(n2v1) map(|SetUnion(SingletonSet(x))| SetUnion(SingletonSet(x + 5)))", fontname=Monaco, shape=invhouse, style = filled, color = "#0022ff", fontcolor = "#ffffff"]
        n3v1 [label="(n3v1) tee()", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n4v1 [label="(n4v1) cast(None)", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n5v1 [label="(n5v1) map(|SetUnion(SingletonSet(x))| 10 * x)", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n6v1 [label="(n6v1) for_each(|x| println!(\"seq {:?}\", x))", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n7v1 [label="(n7v1) for_each(|s| println!(\"delta {:?}\", s))", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n8v1 [label="(n8v1) map(|SetUnion(SingletonSet(x))| SetUnionHashSet::new_from([x]))", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n1v1 -> n2v1 [style=dashed]
        n2v1 -> n3v1 [style=dashed]
        n3v1 -> n4v1 [style=dashed]
        n3v1 -> n7v1 [style=dashed]
        n3v1 -> n8v1 [style=dashed]
        n4v1 -> n5v1
        n5v1 -> n6v1
        subgraph "cluster sg_1v1_var_my_tee" {
            label="var my_tee"
            n1v1
            n2v1
            n3v1
        }
    }
    subgraph "cluster n2v1" {
        fillcolor="#dddddd"
        style=filled
        label = "sg_2v1\nstratum 1"
        n9v1 [label="(n9v1) lattice_reduce::<'static, SetUnionHashSet<_>>()", fontname=Monaco, shape=invhouse, style = filled, color = "#0022ff", fontcolor = "#ffffff"]
        n10v1 [label="(n10v1) for_each(|s| println!(\"cumul {:?}\", s))", fontname=Monaco, shape=house, style = filled, color = "#ffff00"]
        n9v1 -> n10v1 [style=bold]
    }
    n8v1 -> n11v1 [style=dashed]
    n11v1 [label="(n11v1) handoff", fontname=Monaco, shape=parallelogram, style = filled, color = "#ddddff"]
    n11v1 -> n9v1 [arrowhead=box, color=red, style=dashed]
}


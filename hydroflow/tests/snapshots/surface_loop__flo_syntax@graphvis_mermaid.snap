---
source: hydroflow/tests/surface_loop.rs
expression: "df.meta_graph().unwrap().to_mermaid(& Default :: default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter([&quot;alice&quot;, &quot;bob&quot;])</code>"/]:::pullClass
2v1[\"(2v1) <code>source_stream(iter_batches_stream(0..12, 3))</code>"/]:::pullClass
3v1[\"(3v1) <code>cross_join::&lt;'static, 'tick&gt;()</code>"/]:::pullClass
4v1[/"(4v1) <code>for_each(|(user, message)| println!(&quot;notify {} of {}&quot;, user, message))</code>"\]:::pushClass
5v1["(5v1) <code>handoff</code>"]:::otherClass
6v1["(6v1) <code>handoff</code>"]:::otherClass
1v1-->5v1
2v1-->6v1
3v1-->4v1
5v1-->|0|3v1
6v1-->|1|3v1
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1
    subgraph sg_1v1_var_users ["var <tt>users</tt>"]
        1v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    2v1
    subgraph sg_2v1_var_messages ["var <tt>messages</tt>"]
        2v1
    end
end
subgraph sg_3v1 ["sg_3v1 stratum 0"]
    3v1
    4v1
    subgraph sg_3v1_var_cp ["var <tt>cp</tt>"]
        3v1
        4v1
    end
end

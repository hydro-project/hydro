error[E0277]: the trait bound `Shape: DemuxEnumItems` is not satisfied
  --> tests/compile-fail/surface_demuxenum_notenum.rs:12:28
   |
12 |         ]) -> demux_enum::<Shape>();
   |                            ^^^^^ the trait `DemuxEnumItems` is not implemented for `Shape`
   |
note: required by a bound in `check_impl_demux_enum`
  --> tests/compile-fail/surface_demuxenum_notenum.rs:8:18
   |
8  |       let mut df = hydroflow_syntax! {
   |  __________________^
9  | |         my_demux = source_iter([
10 | |             Shape { area: 10.0 },
11 | |             Shape { area: 9.0 },
...  |
16 | |         my_demux[Ellipse] -> for_each(std::mem::drop);
17 | |     };
   | |_____^ required by this bound in `check_impl_demux_enum`
   = note: this error originates in the macro `hydroflow_syntax` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0223]: ambiguous associated type
  --> tests/compile-fail/surface_demuxenum_notenum.rs:14:18
   |
14 |         my_demux[Circle] -> for_each(std::mem::drop);
   |                  ^^^^^^
   |
help: if there were a trait named `Example` with associated type `Circle` implemented for `Shape`, you could use the fully-qualified path
   |
14 |         my_demux[<Shape as Example>::Circle] -> for_each(std::mem::drop);
   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0223]: ambiguous associated type
  --> tests/compile-fail/surface_demuxenum_notenum.rs:16:18
   |
16 |         my_demux[Ellipse] -> for_each(std::mem::drop);
   |                  ^^^^^^^
   |
help: if there were a trait named `Example` with associated type `Ellipse` implemented for `Shape`, you could use the fully-qualified path
   |
16 |         my_demux[<Shape as Example>::Ellipse] -> for_each(std::mem::drop);
   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0223]: ambiguous associated type
  --> tests/compile-fail/surface_demuxenum_notenum.rs:13:18
   |
13 |         my_demux[Rectangle] -> for_each(std::mem::drop);
   |                  ^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `Rectangle` implemented for `Shape`, you could use the fully-qualified path
   |
13 |         my_demux[<Shape as Example>::Rectangle] -> for_each(std::mem::drop);
   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0223]: ambiguous associated type
  --> tests/compile-fail/surface_demuxenum_notenum.rs:15:18
   |
15 |         my_demux[Square] -> for_each(std::mem::drop);
   |                  ^^^^^^
   |
help: if there were a trait named `Example` with associated type `Square` implemented for `Shape`, you could use the fully-qualified path
   |
15 |         my_demux[<Shape as Example>::Square] -> for_each(std::mem::drop);
   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `Shape: DemuxEnumItems` is not satisfied
  --> tests/compile-fail/surface_demuxenum_notenum.rs:12:15
   |
12 |         ]) -> demux_enum::<Shape>();
   |               ^^^^^^^^^^^^^^^^^^^^^ the trait `DemuxEnumItems` is not implemented for `Shape`

error[E0277]: the trait bound `Shape: DemuxEnum<_>` is not satisfied
  --> tests/compile-fail/surface_demuxenum_notenum.rs:12:28
   |
12 |         ]) -> demux_enum::<Shape>();
   |                            ^^^^^ the trait `DemuxEnum<_>` is not implemented for `Shape`
   |
note: required by a bound in `__typeguard_demux_enum_fn`
  --> tests/compile-fail/surface_demuxenum_notenum.rs:8:18
   |
8  |       let mut df = hydroflow_syntax! {
   |  __________________^
9  | |         my_demux = source_iter([
10 | |             Shape { area: 10.0 },
11 | |             Shape { area: 9.0 },
...  |
16 | |         my_demux[Ellipse] -> for_each(std::mem::drop);
17 | |     };
   | |_____^ required by this bound in `__typeguard_demux_enum_fn`
   = note: this error originates in the macro `hydroflow_syntax` (in Nightly builds, run with -Z macro-backtrace for more info)

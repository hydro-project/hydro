---
source: hydro_optimize/src/decoupler.rs
expression: built.ir()
---
[
    ForEach {
        f: DebugExpr(
            Expr::Call {
                attrs: [],
                func: Expr::Path {
                    attrs: [],
                    qself: None,
                    path: Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: stageleft,
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: runtime_support,
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: fn1_type_hint,
                                },
                                arguments: PathArguments::AngleBracketed {
                                    colon2_token: Some(
                                        PathSep,
                                    ),
                                    lt_token: Lt,
                                    args: [
                                        GenericArgument::Type(
                                            Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: i32,
                                                                span: bytes(839..842),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ),
                                        Comma,
                                        GenericArgument::Type(
                                            Type::Tuple {
                                                paren_token: Paren,
                                                elems: [],
                                            },
                                        ),
                                    ],
                                    gt_token: Gt,
                                },
                            },
                        ],
                    },
                },
                paren_token: Paren,
                args: [
                    Expr::Block {
                        attrs: [],
                        label: None,
                        block: Block {
                            brace_token: Brace,
                            stmts: [
                                Stmt::Item(
                                    Item::Use {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        use_token: Use,
                                        leading_colon: None,
                                        tree: UseTree::Path(
                                            UsePath {
                                                ident: Ident {
                                                    sym: crate,
                                                },
                                                colon2_token: PathSep,
                                                tree: UseTree::Path(
                                                    UsePath {
                                                        ident: Ident {
                                                            sym: __staged,
                                                        },
                                                        colon2_token: PathSep,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: __deps,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Glob(
                                                                    UseGlob {
                                                                        star_token: Star,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                ),
                                Stmt::Item(
                                    Item::Use {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        use_token: Use,
                                        leading_colon: None,
                                        tree: UseTree::Path(
                                            UsePath {
                                                ident: Ident {
                                                    sym: crate,
                                                },
                                                colon2_token: PathSep,
                                                tree: UseTree::Path(
                                                    UsePath {
                                                        ident: Ident {
                                                            sym: __staged,
                                                        },
                                                        colon2_token: PathSep,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: decoupler,
                                                                    span: bytes(789..798),
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: tests,
                                                                            span: bytes(800..805),
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Glob(
                                                                            UseGlob {
                                                                                star_token: Star,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                ),
                                Stmt::Expr(
                                    Expr::Closure {
                                        attrs: [],
                                        lifetimes: None,
                                        constness: None,
                                        movability: None,
                                        asyncness: None,
                                        capture: None,
                                        or1_token: Or,
                                        inputs: [
                                            Pat::Ident {
                                                attrs: [],
                                                by_ref: None,
                                                mutability: None,
                                                ident: Ident {
                                                    sym: a,
                                                    span: bytes(808..809),
                                                },
                                                subpat: None,
                                            },
                                        ],
                                        or2_token: Or,
                                        output: ReturnType::Default,
                                        body: Expr::Macro {
                                            attrs: [],
                                            mac: Macro {
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: println,
                                                                span: bytes(812..819),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                bang_token: Not,
                                                delimiter: MacroDelimiter::Paren(
                                                    Paren,
                                                ),
                                                tokens: TokenStream [
                                                    Literal {
                                                        lit: "Got it: {}",
                                                        span: bytes(822..834),
                                                    },
                                                    Punct {
                                                        char: ',',
                                                        spacing: Alone,
                                                        span: bytes(834..835),
                                                    },
                                                    Ident {
                                                        sym: a,
                                                        span: bytes(836..837),
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    None,
                                ),
                            ],
                        },
                    },
                ],
            },
        ),
        input: Map {
            f: DebugExpr(
                Expr::Call {
                    attrs: [],
                    func: Expr::Path {
                        attrs: [],
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: stageleft,
                                    },
                                    arguments: PathArguments::None,
                                },
                                PathSep,
                                PathSegment {
                                    ident: Ident {
                                        sym: runtime_support,
                                    },
                                    arguments: PathArguments::None,
                                },
                                PathSep,
                                PathSegment {
                                    ident: Ident {
                                        sym: fn1_type_hint,
                                    },
                                    arguments: PathArguments::AngleBracketed {
                                        colon2_token: Some(
                                            PathSep,
                                        ),
                                        lt_token: Lt,
                                        args: [
                                            GenericArgument::Type(
                                                Type::Tuple {
                                                    paren_token: Paren,
                                                    elems: [
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_optimize,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __deps,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_lang,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: location,
                                                                            span: bytes(714..722),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: cluster,
                                                                            span: bytes(724..731),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: cluster_id,
                                                                            span: bytes(733..743),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: ClusterId,
                                                                            span: bytes(745..754),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Tuple {
                                                                                        paren_token: Paren,
                                                                                        elems: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: i32,
                                                                            span: bytes(760..763),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                            ),
                                            Comma,
                                            GenericArgument::Type(
                                                Type::Path {
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: i32,
                                                                    span: bytes(765..768),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ),
                                        ],
                                        gt_token: Gt,
                                    },
                                },
                            ],
                        },
                    },
                    paren_token: Paren,
                    args: [
                        Expr::Block {
                            attrs: [],
                            label: None,
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Item(
                                        Item::Use {
                                            attrs: [],
                                            vis: Visibility::Inherited,
                                            use_token: Use,
                                            leading_colon: None,
                                            tree: UseTree::Path(
                                                UsePath {
                                                    ident: Ident {
                                                        sym: hydro_lang,
                                                    },
                                                    colon2_token: PathSep,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: __staged,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: __deps,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Glob(
                                                                        UseGlob {
                                                                            star_token: Star,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            semi_token: Semi,
                                        },
                                    ),
                                    Stmt::Item(
                                        Item::Use {
                                            attrs: [],
                                            vis: Visibility::Inherited,
                                            use_token: Use,
                                            leading_colon: None,
                                            tree: UseTree::Path(
                                                UsePath {
                                                    ident: Ident {
                                                        sym: hydro_lang,
                                                    },
                                                    colon2_token: PathSep,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: __staged,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: stream,
                                                                        span: bytes(681..687),
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Glob(
                                                                        UseGlob {
                                                                            star_token: Star,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            semi_token: Semi,
                                        },
                                    ),
                                    Stmt::Expr(
                                        Expr::Closure {
                                            attrs: [],
                                            lifetimes: None,
                                            constness: None,
                                            movability: None,
                                            asyncness: None,
                                            capture: None,
                                            or1_token: Or,
                                            inputs: [
                                                Pat::Tuple {
                                                    attrs: [],
                                                    paren_token: Paren,
                                                    elems: [
                                                        Pat::Wild {
                                                            attrs: [],
                                                            underscore_token: Underscore,
                                                        },
                                                        Comma,
                                                        Pat::Ident {
                                                            attrs: [],
                                                            by_ref: None,
                                                            mutability: None,
                                                            ident: Ident {
                                                                sym: b,
                                                                span: bytes(694..695),
                                                            },
                                                            subpat: None,
                                                        },
                                                    ],
                                                },
                                            ],
                                            or2_token: Or,
                                            output: ReturnType::Default,
                                            body: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: b,
                                                                span: bytes(699..700),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                        None,
                                    ),
                                ],
                            },
                        },
                    ],
                },
            ),
            input: Network {
                from_key: None,
                to_location: Cluster(
                    1,
                ),
                to_key: None,
                serialize_fn: None,
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    DebugExpr(
                        Expr::Closure {
                            attrs: [],
                            lifetimes: None,
                            constness: None,
                            movability: None,
                            asyncness: None,
                            capture: None,
                            or1_token: Or,
                            inputs: [
                                Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: res,
                                    },
                                    subpat: None,
                                },
                            ],
                            or2_token: Or,
                            output: ReturnType::Default,
                            body: Expr::Block {
                                attrs: [],
                                label: None,
                                block: Block {
                                    brace_token: Brace,
                                    stmts: [
                                        Stmt::Local {
                                            attrs: [],
                                            let_token: Let,
                                            pat: Pat::Tuple {
                                                attrs: [],
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: id,
                                                        },
                                                        subpat: None,
                                                    },
                                                    Comma,
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: b,
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            init: Some(
                                                LocalInit {
                                                    eq_token: Eq,
                                                    expr: Expr::MethodCall {
                                                        attrs: [],
                                                        receiver: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: res,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        dot_token: Dot,
                                                        method: Ident {
                                                            sym: unwrap,
                                                        },
                                                        turbofish: None,
                                                        paren_token: Paren,
                                                        args: [],
                                                    },
                                                    diverge: None,
                                                },
                                            ),
                                            semi_token: Semi,
                                        },
                                        Stmt::Expr(
                                            Expr::Tuple {
                                                attrs: [],
                                                paren_token: Paren,
                                                elems: [
                                                    Expr::Call {
                                                        attrs: [],
                                                        func: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_lang,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: ClusterId,
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: Some(
                                                                                PathSep,
                                                                            ),
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Tuple {
                                                                                        paren_token: Paren,
                                                                                        elems: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: from_raw,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        paren_token: Paren,
                                                        args: [
                                                            Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: id,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                    Comma,
                                                    Expr::MethodCall {
                                                        attrs: [],
                                                        receiver: Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: hydro_lang,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: runtime_support,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: bincode,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: deserialize,
                                                                            },
                                                                            arguments: PathArguments::AngleBracketed {
                                                                                colon2_token: Some(
                                                                                    PathSep,
                                                                                ),
                                                                                lt_token: Lt,
                                                                                args: [
                                                                                    GenericArgument::Type(
                                                                                        Type::Path {
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: i32,
                                                                                                            span: bytes(661..664),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                gt_token: Gt,
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Reference {
                                                                    attrs: [],
                                                                    and_token: And,
                                                                    mutability: None,
                                                                    expr: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: b,
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        dot_token: Dot,
                                                        method: Ident {
                                                            sym: unwrap,
                                                        },
                                                        turbofish: None,
                                                        paren_token: Paren,
                                                        args: [],
                                                    },
                                                ],
                                            },
                                            None,
                                        ),
                                    ],
                                },
                            },
                        },
                    ),
                ),
                input: FlatMap {
                    f: DebugExpr(
                        Expr::Call {
                            attrs: [],
                            func: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: stageleft,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: runtime_support,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: fn1_type_hint,
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: Some(
                                                    PathSep,
                                                ),
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_optimize,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __deps,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_lang,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __deps,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: bytes,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Bytes,
                                                                            span: bytes(321..326),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: std,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: iter,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Map,
                                                                            span: bytes(354..357),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: std,
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: slice,
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: Iter,
                                                                                                        span: bytes(377..381),
                                                                                                    },
                                                                                                    arguments: PathArguments::AngleBracketed {
                                                                                                        colon2_token: None,
                                                                                                        lt_token: Lt,
                                                                                                        args: [
                                                                                                            GenericArgument::Type(
                                                                                                                Type::Path {
                                                                                                                    qself: None,
                                                                                                                    path: Path {
                                                                                                                        leading_colon: None,
                                                                                                                        segments: [
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: hydro_optimize,
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: __staged,
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: __deps,
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: hydro_lang,
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: location,
                                                                                                                                    span: bytes(394..402),
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cluster,
                                                                                                                                    span: bytes(404..411),
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cluster_id,
                                                                                                                                    span: bytes(413..423),
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: ClusterId,
                                                                                                                                    span: bytes(425..434),
                                                                                                                                },
                                                                                                                                arguments: PathArguments::AngleBracketed {
                                                                                                                                    colon2_token: None,
                                                                                                                                    lt_token: Lt,
                                                                                                                                    args: [
                                                                                                                                        GenericArgument::Type(
                                                                                                                                            Type::Tuple {
                                                                                                                                                paren_token: Paren,
                                                                                                                                                elems: [],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    gt_token: Gt,
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                        gt_token: Gt,
                                                                                                    },
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                Comma,
                                                                                GenericArgument::Type(
                                                                                    Type::Infer {
                                                                                        underscore_token: Underscore,
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                            paren_token: Paren,
                            args: [
                                Expr::Block {
                                    attrs: [],
                                    label: None,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Item(
                                                Item::Use {
                                                    attrs: [],
                                                    vis: Visibility::Inherited,
                                                    use_token: Use,
                                                    leading_colon: None,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: hydro_lang,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: __staged,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: __deps,
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Glob(
                                                                                UseGlob {
                                                                                    star_token: Star,
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    semi_token: Semi,
                                                },
                                            ),
                                            Stmt::Item(
                                                Item::Use {
                                                    attrs: [],
                                                    vis: Visibility::Inherited,
                                                    use_token: Use,
                                                    leading_colon: None,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: hydro_lang,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: __staged,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: stream,
                                                                                span: bytes(233..239),
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Glob(
                                                                                UseGlob {
                                                                                    star_token: Star,
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    semi_token: Semi,
                                                },
                                            ),
                                            Stmt::Local {
                                                attrs: [],
                                                let_token: Let,
                                                pat: Pat::Ident {
                                                    attrs: [],
                                                    by_ref: None,
                                                    mutability: None,
                                                    ident: Ident {
                                                        sym: ids__free,
                                                    },
                                                    subpat: None,
                                                },
                                                init: Some(
                                                    LocalInit {
                                                        eq_token: Eq,
                                                        expr: Expr::Unsafe {
                                                            attrs: [],
                                                            unsafe_token: Unsafe,
                                                            block: Block {
                                                                brace_token: Brace,
                                                                stmts: [
                                                                    Stmt::Expr(
                                                                        Expr::Call {
                                                                            attrs: [],
                                                                            func: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: Some(
                                                                                        PathSep,
                                                                                    ),
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: std,
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: mem,
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: transmute,
                                                                                            },
                                                                                            arguments: PathArguments::AngleBracketed {
                                                                                                colon2_token: Some(
                                                                                                    PathSep,
                                                                                                ),
                                                                                                lt_token: Lt,
                                                                                                args: [
                                                                                                    GenericArgument::Type(
                                                                                                        Type::Infer {
                                                                                                            underscore_token: Underscore,
                                                                                                        },
                                                                                                    ),
                                                                                                    Comma,
                                                                                                    GenericArgument::Type(
                                                                                                        Type::Reference {
                                                                                                            and_token: And,
                                                                                                            lifetime: None,
                                                                                                            mutability: None,
                                                                                                            elem: Type::Slice {
                                                                                                                bracket_token: Bracket,
                                                                                                                elem: Type::Path {
                                                                                                                    qself: None,
                                                                                                                    path: Path {
                                                                                                                        leading_colon: None,
                                                                                                                        segments: [
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: hydro_lang,
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                            PathSep,
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: ClusterId,
                                                                                                                                },
                                                                                                                                arguments: PathArguments::AngleBracketed {
                                                                                                                                    colon2_token: None,
                                                                                                                                    lt_token: Lt,
                                                                                                                                    args: [
                                                                                                                                        GenericArgument::Type(
                                                                                                                                            Type::Tuple {
                                                                                                                                                paren_token: Paren,
                                                                                                                                                elems: [],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    gt_token: Gt,
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                gt_token: Gt,
                                                                                            },
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            paren_token: Paren,
                                                                            args: [
                                                                                Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: __hydro_lang_cluster_ids_1,
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ],
                                                                        },
                                                                        None,
                                                                    ),
                                                                ],
                                                            },
                                                        },
                                                        diverge: None,
                                                    },
                                                ),
                                                semi_token: Semi,
                                            },
                                            Stmt::Expr(
                                                Expr::Closure {
                                                    attrs: [],
                                                    lifetimes: None,
                                                    constness: None,
                                                    movability: None,
                                                    asyncness: None,
                                                    capture: None,
                                                    or1_token: Or,
                                                    inputs: [
                                                        Pat::Ident {
                                                            attrs: [],
                                                            by_ref: None,
                                                            mutability: None,
                                                            ident: Ident {
                                                                sym: v,
                                                                span: bytes(242..243),
                                                            },
                                                            subpat: None,
                                                        },
                                                    ],
                                                    or2_token: Or,
                                                    output: ReturnType::Default,
                                                    body: Expr::Block {
                                                        attrs: [],
                                                        label: None,
                                                        block: Block {
                                                            brace_token: Brace,
                                                            stmts: [
                                                                Stmt::Expr(
                                                                    Expr::MethodCall {
                                                                        attrs: [],
                                                                        receiver: Expr::MethodCall {
                                                                            attrs: [],
                                                                            receiver: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: ids__free,
                                                                                                span: bytes(248..257),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            dot_token: Dot,
                                                                            method: Ident {
                                                                                sym: iter,
                                                                                span: bytes(258..262),
                                                                            },
                                                                            turbofish: None,
                                                                            paren_token: Paren,
                                                                            args: [],
                                                                        },
                                                                        dot_token: Dot,
                                                                        method: Ident {
                                                                            sym: map,
                                                                            span: bytes(265..268),
                                                                        },
                                                                        turbofish: None,
                                                                        paren_token: Paren,
                                                                        args: [
                                                                            Expr::Closure {
                                                                                attrs: [],
                                                                                lifetimes: None,
                                                                                constness: None,
                                                                                movability: None,
                                                                                asyncness: None,
                                                                                capture: Some(
                                                                                    Move,
                                                                                ),
                                                                                or1_token: Or,
                                                                                inputs: [
                                                                                    Pat::Ident {
                                                                                        attrs: [],
                                                                                        by_ref: None,
                                                                                        mutability: None,
                                                                                        ident: Ident {
                                                                                            sym: id,
                                                                                            span: bytes(276..278),
                                                                                        },
                                                                                        subpat: None,
                                                                                    },
                                                                                ],
                                                                                or2_token: Or,
                                                                                output: ReturnType::Default,
                                                                                body: Expr::Tuple {
                                                                                    attrs: [],
                                                                                    paren_token: Paren,
                                                                                    elems: [
                                                                                        Expr::Field {
                                                                                            attrs: [],
                                                                                            base: Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: id,
                                                                                                                span: bytes(282..284),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                            dot_token: Dot,
                                                                                            member: Member::Named(
                                                                                                Ident {
                                                                                                    sym: raw_id,
                                                                                                    span: bytes(285..291),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        Comma,
                                                                                        Expr::MethodCall {
                                                                                            attrs: [],
                                                                                            receiver: Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: v,
                                                                                                                span: bytes(293..294),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                            dot_token: Dot,
                                                                                            method: Ident {
                                                                                                sym: clone,
                                                                                                span: bytes(295..300),
                                                                                            },
                                                                                            turbofish: None,
                                                                                            paren_token: Paren,
                                                                                            args: [],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                    None,
                                                                ),
                                                            ],
                                                        },
                                                    },
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                            ],
                        },
                    ),
                    input: Map {
                        f: DebugExpr(
                            Expr::Call {
                                attrs: [],
                                func: Expr::Path {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: stageleft,
                                                },
                                                arguments: PathArguments::None,
                                            },
                                            PathSep,
                                            PathSegment {
                                                ident: Ident {
                                                    sym: runtime_support,
                                                },
                                                arguments: PathArguments::None,
                                            },
                                            PathSep,
                                            PathSegment {
                                                ident: Ident {
                                                    sym: fn1_type_hint,
                                                },
                                                arguments: PathArguments::AngleBracketed {
                                                    colon2_token: Some(
                                                        PathSep,
                                                    ),
                                                    lt_token: Lt,
                                                    args: [
                                                        GenericArgument::Type(
                                                            Type::Path {
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: i32,
                                                                                span: bytes(174..177),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ),
                                                        Comma,
                                                        GenericArgument::Type(
                                                            Type::Path {
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: hydro_optimize,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: __staged,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: __deps,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: hydro_lang,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: __staged,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: __deps,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: bytes,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Bytes,
                                                                                span: bytes(192..197),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                    gt_token: Gt,
                                                },
                                            },
                                        ],
                                    },
                                },
                                paren_token: Paren,
                                args: [
                                    Expr::Block {
                                        attrs: [],
                                        label: None,
                                        block: Block {
                                            brace_token: Brace,
                                            stmts: [
                                                Stmt::Item(
                                                    Item::Use {
                                                        attrs: [],
                                                        vis: Visibility::Inherited,
                                                        use_token: Use,
                                                        leading_colon: None,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: hydro_lang,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Path(
                                                                            UsePath {
                                                                                ident: Ident {
                                                                                    sym: __deps,
                                                                                },
                                                                                colon2_token: PathSep,
                                                                                tree: UseTree::Glob(
                                                                                    UseGlob {
                                                                                        star_token: Star,
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                ),
                                                Stmt::Item(
                                                    Item::Use {
                                                        attrs: [],
                                                        vis: Visibility::Inherited,
                                                        use_token: Use,
                                                        leading_colon: None,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: hydro_lang,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Path(
                                                                            UsePath {
                                                                                ident: Ident {
                                                                                    sym: stream,
                                                                                    span: bytes(119..125),
                                                                                },
                                                                                colon2_token: PathSep,
                                                                                tree: UseTree::Glob(
                                                                                    UseGlob {
                                                                                        star_token: Star,
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                ),
                                                Stmt::Expr(
                                                    Expr::Closure {
                                                        attrs: [],
                                                        lifetimes: None,
                                                        constness: None,
                                                        movability: None,
                                                        asyncness: None,
                                                        capture: None,
                                                        or1_token: Or,
                                                        inputs: [
                                                            Pat::Ident {
                                                                attrs: [],
                                                                by_ref: None,
                                                                mutability: None,
                                                                ident: Ident {
                                                                    sym: v,
                                                                    span: bytes(128..129),
                                                                },
                                                                subpat: None,
                                                            },
                                                        ],
                                                        or2_token: Or,
                                                        output: ReturnType::Default,
                                                        body: Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Call {
                                                                    attrs: [],
                                                                    func: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: bincode,
                                                                                        span: bytes(132..139),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                                PathSep,
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: serialize,
                                                                                        span: bytes(143..152),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    paren_token: Paren,
                                                                    args: [
                                                                        Expr::Reference {
                                                                            attrs: [],
                                                                            and_token: And,
                                                                            mutability: None,
                                                                            expr: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: v,
                                                                                                span: bytes(155..156),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: unwrap,
                                                                    span: bytes(158..164),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: into,
                                                                span: bytes(167..171),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                    },
                                                    None,
                                                ),
                                            ],
                                        },
                                    },
                                ],
                            },
                        ),
                        input: Map {
                            f: DebugExpr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: stageleft,
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: runtime_support,
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: fn1_type_hint,
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: Some(
                                                            PathSep,
                                                        ),
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: i32,
                                                                                    span: bytes(95..98),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                            Comma,
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: i32,
                                                                                    span: bytes(99..102),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Block {
                                            attrs: [],
                                            label: None,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Item(
                                                        Item::Use {
                                                            attrs: [],
                                                            vis: Visibility::Inherited,
                                                            use_token: Use,
                                                            leading_colon: None,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: crate,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: __staged,
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Path(
                                                                                UsePath {
                                                                                    ident: Ident {
                                                                                        sym: __deps,
                                                                                    },
                                                                                    colon2_token: PathSep,
                                                                                    tree: UseTree::Glob(
                                                                                        UseGlob {
                                                                                            star_token: Star,
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            semi_token: Semi,
                                                        },
                                                    ),
                                                    Stmt::Item(
                                                        Item::Use {
                                                            attrs: [],
                                                            vis: Visibility::Inherited,
                                                            use_token: Use,
                                                            leading_colon: None,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: crate,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: __staged,
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Path(
                                                                                UsePath {
                                                                                    ident: Ident {
                                                                                        sym: decoupler,
                                                                                        span: bytes(66..75),
                                                                                    },
                                                                                    colon2_token: PathSep,
                                                                                    tree: UseTree::Path(
                                                                                        UsePath {
                                                                                            ident: Ident {
                                                                                                sym: tests,
                                                                                                span: bytes(77..82),
                                                                                            },
                                                                                            colon2_token: PathSep,
                                                                                            tree: UseTree::Glob(
                                                                                                UseGlob {
                                                                                                    star_token: Star,
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            semi_token: Semi,
                                                        },
                                                    ),
                                                    Stmt::Expr(
                                                        Expr::Closure {
                                                            attrs: [],
                                                            lifetimes: None,
                                                            constness: None,
                                                            movability: None,
                                                            asyncness: None,
                                                            capture: None,
                                                            or1_token: Or,
                                                            inputs: [
                                                                Pat::Ident {
                                                                    attrs: [],
                                                                    by_ref: None,
                                                                    mutability: None,
                                                                    ident: Ident {
                                                                        sym: a,
                                                                        span: bytes(85..86),
                                                                    },
                                                                    subpat: None,
                                                                },
                                                            ],
                                                            or2_token: Or,
                                                            output: ReturnType::Default,
                                                            body: Expr::Binary {
                                                                attrs: [],
                                                                left: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: a,
                                                                                    span: bytes(89..90),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                op: BinOp::Add(
                                                                    Plus,
                                                                ),
                                                                right: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Int {
                                                                        token: 1,
                                                                    },
                                                                },
                                                            },
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                    ],
                                },
                            ),
                            input: Map {
                                f: DebugExpr(
                                    Expr::Closure {
                                        attrs: [],
                                        lifetimes: None,
                                        constness: None,
                                        movability: None,
                                        asyncness: None,
                                        capture: None,
                                        or1_token: Or,
                                        inputs: [
                                            Pat::Tuple {
                                                attrs: [],
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Wild {
                                                        attrs: [],
                                                        underscore_token: Underscore,
                                                    },
                                                    Comma,
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: b,
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                        ],
                                        or2_token: Or,
                                        output: ReturnType::Default,
                                        body: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: b,
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                ),
                                input: Network {
                                    from_key: None,
                                    to_location: Cluster(
                                        2,
                                    ),
                                    to_key: None,
                                    serialize_fn: Some(
                                        DebugExpr(
                                            Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: Some(
                                                            PathSep,
                                                        ),
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: hydro_lang,
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: runtime_support,
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: stageleft,
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: runtime_support,
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: fn1_type_hint,
                                                                },
                                                                arguments: PathArguments::AngleBracketed {
                                                                    colon2_token: Some(
                                                                        PathSep,
                                                                    ),
                                                                    lt_token: Lt,
                                                                    args: [
                                                                        GenericArgument::Type(
                                                                            Type::Tuple {
                                                                                paren_token: Paren,
                                                                                elems: [
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: hydro_lang,
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: ClusterId,
                                                                                                    },
                                                                                                    arguments: PathArguments::AngleBracketed {
                                                                                                        colon2_token: None,
                                                                                                        lt_token: Lt,
                                                                                                        args: [
                                                                                                            GenericArgument::Type(
                                                                                                                Type::Infer {
                                                                                                                    underscore_token: Underscore,
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                        gt_token: Gt,
                                                                                                    },
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    Comma,
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: i32,
                                                                                                        span: bytes(42..45),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        Comma,
                                                                        GenericArgument::Type(
                                                                            Type::Infer {
                                                                                underscore_token: Underscore,
                                                                            },
                                                                        ),
                                                                    ],
                                                                    gt_token: Gt,
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Closure {
                                                        attrs: [],
                                                        lifetimes: None,
                                                        constness: None,
                                                        movability: None,
                                                        asyncness: None,
                                                        capture: None,
                                                        or1_token: Or,
                                                        inputs: [
                                                            Pat::Tuple {
                                                                attrs: [],
                                                                paren_token: Paren,
                                                                elems: [
                                                                    Pat::Ident {
                                                                        attrs: [],
                                                                        by_ref: None,
                                                                        mutability: None,
                                                                        ident: Ident {
                                                                            sym: id,
                                                                        },
                                                                        subpat: None,
                                                                    },
                                                                    Comma,
                                                                    Pat::Ident {
                                                                        attrs: [],
                                                                        by_ref: None,
                                                                        mutability: None,
                                                                        ident: Ident {
                                                                            sym: data,
                                                                        },
                                                                        subpat: None,
                                                                    },
                                                                ],
                                                            },
                                                        ],
                                                        or2_token: Or,
                                                        output: ReturnType::Default,
                                                        body: Expr::Block {
                                                            attrs: [],
                                                            label: None,
                                                            block: Block {
                                                                brace_token: Brace,
                                                                stmts: [
                                                                    Stmt::Expr(
                                                                        Expr::Tuple {
                                                                            attrs: [],
                                                                            paren_token: Paren,
                                                                            elems: [
                                                                                Expr::Field {
                                                                                    attrs: [],
                                                                                    base: Expr::Path {
                                                                                        attrs: [],
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: id,
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    dot_token: Dot,
                                                                                    member: Member::Named(
                                                                                        Ident {
                                                                                            sym: raw_id,
                                                                                        },
                                                                                    ),
                                                                                },
                                                                                Comma,
                                                                                Expr::MethodCall {
                                                                                    attrs: [],
                                                                                    receiver: Expr::MethodCall {
                                                                                        attrs: [],
                                                                                        receiver: Expr::Call {
                                                                                            attrs: [],
                                                                                            func: Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: hydro_lang,
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                        PathSep,
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: runtime_support,
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                        PathSep,
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: bincode,
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                        PathSep,
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: serialize,
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                            paren_token: Paren,
                                                                                            args: [
                                                                                                Expr::Reference {
                                                                                                    attrs: [],
                                                                                                    and_token: And,
                                                                                                    mutability: None,
                                                                                                    expr: Expr::Path {
                                                                                                        attrs: [],
                                                                                                        qself: None,
                                                                                                        path: Path {
                                                                                                            leading_colon: None,
                                                                                                            segments: [
                                                                                                                PathSegment {
                                                                                                                    ident: Ident {
                                                                                                                        sym: data,
                                                                                                                    },
                                                                                                                    arguments: PathArguments::None,
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                        dot_token: Dot,
                                                                                        method: Ident {
                                                                                            sym: unwrap,
                                                                                        },
                                                                                        turbofish: None,
                                                                                        paren_token: Paren,
                                                                                        args: [],
                                                                                    },
                                                                                    dot_token: Dot,
                                                                                    method: Ident {
                                                                                        sym: into,
                                                                                    },
                                                                                    turbofish: None,
                                                                                    paren_token: Paren,
                                                                                    args: [],
                                                                                },
                                                                            ],
                                                                        },
                                                                        None,
                                                                    ),
                                                                ],
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                        ),
                                    ),
                                    instantiate_fn: <network instantiate>,
                                    deserialize_fn: Some(
                                        DebugExpr(
                                            Expr::Closure {
                                                attrs: [],
                                                lifetimes: None,
                                                constness: None,
                                                movability: None,
                                                asyncness: None,
                                                capture: None,
                                                or1_token: Or,
                                                inputs: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: res,
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                                or2_token: Or,
                                                output: ReturnType::Default,
                                                body: Expr::Block {
                                                    attrs: [],
                                                    label: None,
                                                    block: Block {
                                                        brace_token: Brace,
                                                        stmts: [
                                                            Stmt::Local {
                                                                attrs: [],
                                                                let_token: Let,
                                                                pat: Pat::Tuple {
                                                                    attrs: [],
                                                                    paren_token: Paren,
                                                                    elems: [
                                                                        Pat::Ident {
                                                                            attrs: [],
                                                                            by_ref: None,
                                                                            mutability: None,
                                                                            ident: Ident {
                                                                                sym: id,
                                                                            },
                                                                            subpat: None,
                                                                        },
                                                                        Comma,
                                                                        Pat::Ident {
                                                                            attrs: [],
                                                                            by_ref: None,
                                                                            mutability: None,
                                                                            ident: Ident {
                                                                                sym: b,
                                                                            },
                                                                            subpat: None,
                                                                        },
                                                                    ],
                                                                },
                                                                init: Some(
                                                                    LocalInit {
                                                                        eq_token: Eq,
                                                                        expr: Expr::MethodCall {
                                                                            attrs: [],
                                                                            receiver: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: res,
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            dot_token: Dot,
                                                                            method: Ident {
                                                                                sym: unwrap,
                                                                            },
                                                                            turbofish: None,
                                                                            paren_token: Paren,
                                                                            args: [],
                                                                        },
                                                                        diverge: None,
                                                                    },
                                                                ),
                                                                semi_token: Semi,
                                                            },
                                                            Stmt::Expr(
                                                                Expr::Tuple {
                                                                    attrs: [],
                                                                    paren_token: Paren,
                                                                    elems: [
                                                                        Expr::Call {
                                                                            attrs: [],
                                                                            func: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: hydro_lang,
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: ClusterId,
                                                                                            },
                                                                                            arguments: PathArguments::AngleBracketed {
                                                                                                colon2_token: Some(
                                                                                                    PathSep,
                                                                                                ),
                                                                                                lt_token: Lt,
                                                                                                args: [
                                                                                                    GenericArgument::Type(
                                                                                                        Type::Tuple {
                                                                                                            paren_token: Paren,
                                                                                                            elems: [],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                gt_token: Gt,
                                                                                            },
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: from_raw,
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            paren_token: Paren,
                                                                            args: [
                                                                                Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: id,
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ],
                                                                        },
                                                                        Comma,
                                                                        Expr::MethodCall {
                                                                            attrs: [],
                                                                            receiver: Expr::Call {
                                                                                attrs: [],
                                                                                func: Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: hydro_lang,
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: runtime_support,
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: bincode,
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: deserialize,
                                                                                                },
                                                                                                arguments: PathArguments::AngleBracketed {
                                                                                                    colon2_token: Some(
                                                                                                        PathSep,
                                                                                                    ),
                                                                                                    lt_token: Lt,
                                                                                                    args: [
                                                                                                        GenericArgument::Type(
                                                                                                            Type::Path {
                                                                                                                qself: None,
                                                                                                                path: Path {
                                                                                                                    leading_colon: None,
                                                                                                                    segments: [
                                                                                                                        PathSegment {
                                                                                                                            ident: Ident {
                                                                                                                                sym: i32,
                                                                                                                                span: bytes(42..45),
                                                                                                                            },
                                                                                                                            arguments: PathArguments::None,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                    gt_token: Gt,
                                                                                                },
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                                paren_token: Paren,
                                                                                args: [
                                                                                    Expr::Reference {
                                                                                        attrs: [],
                                                                                        and_token: And,
                                                                                        mutability: None,
                                                                                        expr: Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: b,
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                ],
                                                                            },
                                                                            dot_token: Dot,
                                                                            method: Ident {
                                                                                sym: unwrap,
                                                                            },
                                                                            turbofish: None,
                                                                            paren_token: Paren,
                                                                            args: [],
                                                                        },
                                                                    ],
                                                                },
                                                                None,
                                                            ),
                                                        ],
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                    input: Map {
                                        f: DebugExpr(
                                            Expr::Closure {
                                                attrs: [],
                                                lifetimes: None,
                                                constness: None,
                                                movability: None,
                                                asyncness: None,
                                                capture: None,
                                                or1_token: Or,
                                                inputs: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: b,
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                                or2_token: Or,
                                                output: ReturnType::Default,
                                                body: Expr::Tuple {
                                                    attrs: [],
                                                    paren_token: Paren,
                                                    elems: [
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: ClusterId,
                                                                            },
                                                                            arguments: PathArguments::AngleBracketed {
                                                                                colon2_token: Some(
                                                                                    PathSep,
                                                                                ),
                                                                                lt_token: Lt,
                                                                                args: [
                                                                                    GenericArgument::Type(
                                                                                        Type::Tuple {
                                                                                            paren_token: Paren,
                                                                                            elems: [],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                gt_token: Gt,
                                                                            },
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: from_raw,
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: __hydro_lang_cluster_self_id_0,
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        Comma,
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: b,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                            },
                                        ),
                                        input: Source {
                                            source: Iter(
                                                DebugExpr(
                                                    Expr::Block {
                                                        attrs: [],
                                                        label: None,
                                                        block: Block {
                                                            brace_token: Brace,
                                                            stmts: [
                                                                Stmt::Item(
                                                                    Item::Use {
                                                                        attrs: [],
                                                                        vis: Visibility::Inherited,
                                                                        use_token: Use,
                                                                        leading_colon: None,
                                                                        tree: UseTree::Path(
                                                                            UsePath {
                                                                                ident: Ident {
                                                                                    sym: crate,
                                                                                },
                                                                                colon2_token: PathSep,
                                                                                tree: UseTree::Path(
                                                                                    UsePath {
                                                                                        ident: Ident {
                                                                                            sym: __staged,
                                                                                        },
                                                                                        colon2_token: PathSep,
                                                                                        tree: UseTree::Path(
                                                                                            UsePath {
                                                                                                ident: Ident {
                                                                                                    sym: __deps,
                                                                                                },
                                                                                                colon2_token: PathSep,
                                                                                                tree: UseTree::Glob(
                                                                                                    UseGlob {
                                                                                                        star_token: Star,
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        semi_token: Semi,
                                                                    },
                                                                ),
                                                                Stmt::Item(
                                                                    Item::Use {
                                                                        attrs: [],
                                                                        vis: Visibility::Inherited,
                                                                        use_token: Use,
                                                                        leading_colon: None,
                                                                        tree: UseTree::Path(
                                                                            UsePath {
                                                                                ident: Ident {
                                                                                    sym: crate,
                                                                                },
                                                                                colon2_token: PathSep,
                                                                                tree: UseTree::Path(
                                                                                    UsePath {
                                                                                        ident: Ident {
                                                                                            sym: __staged,
                                                                                        },
                                                                                        colon2_token: PathSep,
                                                                                        tree: UseTree::Path(
                                                                                            UsePath {
                                                                                                ident: Ident {
                                                                                                    sym: decoupler,
                                                                                                    span: bytes(17..26),
                                                                                                },
                                                                                                colon2_token: PathSep,
                                                                                                tree: UseTree::Path(
                                                                                                    UsePath {
                                                                                                        ident: Ident {
                                                                                                            sym: tests,
                                                                                                            span: bytes(28..33),
                                                                                                        },
                                                                                                        colon2_token: PathSep,
                                                                                                        tree: UseTree::Glob(
                                                                                                            UseGlob {
                                                                                                                star_token: Star,
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        semi_token: Semi,
                                                                    },
                                                                ),
                                                                Stmt::Expr(
                                                                    Expr::Range {
                                                                        attrs: [],
                                                                        start: Some(
                                                                            Expr::Lit {
                                                                                attrs: [],
                                                                                lit: Lit::Int {
                                                                                    token: 0,
                                                                                },
                                                                            },
                                                                        ),
                                                                        limits: RangeLimits::HalfOpen(
                                                                            DotDot,
                                                                        ),
                                                                        end: Some(
                                                                            Expr::Lit {
                                                                                attrs: [],
                                                                                lit: Lit::Int {
                                                                                    token: 10,
                                                                                },
                                                                            },
                                                                        ),
                                                                    },
                                                                    None,
                                                                ),
                                                            ],
                                                        },
                                                    },
                                                ),
                                            ),
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                backtrace: [
                                                    hydro_optimize::decoupler::tests::decouple_mini_program,
                                                    hydro_optimize::decoupler::tests::decouple_after_source_ir,
                                                    hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                                                    core::ops::function::FnOnce::call_once,
                                                ],
                                                output_type: Some(
                                                    i32,
                                                ),
                                                cardinality: None,
                                                cpu_usage: None,
                                                network_recv_cpu_usage: None,
                                                id: Some(
                                                    0,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            backtrace: [
                                                hydro_optimize::decoupler::tests::decouple_mini_program,
                                                hydro_optimize::decoupler::tests::decouple_after_source_ir,
                                                hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                                                core::ops::function::FnOnce::call_once,
                                            ],
                                            output_type: Some(
                                                (hydro_optimize :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                                            ),
                                            cardinality: None,
                                            cpu_usage: None,
                                            network_recv_cpu_usage: None,
                                            id: Some(
                                                1,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            2,
                                        ),
                                        backtrace: [
                                            hydro_optimize::decoupler::tests::decouple_mini_program,
                                            hydro_optimize::decoupler::tests::decouple_after_source_ir,
                                            hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                                            core::ops::function::FnOnce::call_once,
                                        ],
                                        output_type: Some(
                                            (hydro_optimize :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                                        ),
                                        cardinality: None,
                                        cpu_usage: None,
                                        network_recv_cpu_usage: None,
                                        id: Some(
                                            2,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        2,
                                    ),
                                    backtrace: [
                                        hydro_optimize::decoupler::tests::decouple_mini_program,
                                        hydro_optimize::decoupler::tests::decouple_after_source_ir,
                                        hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                                        core::ops::function::FnOnce::call_once,
                                    ],
                                    output_type: Some(
                                        i32,
                                    ),
                                    cardinality: None,
                                    cpu_usage: None,
                                    network_recv_cpu_usage: None,
                                    id: Some(
                                        3,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    2,
                                ),
                                backtrace: [
                                    hydro_optimize::decoupler::tests::decouple_mini_program,
                                    hydro_optimize::decoupler::tests::decouple_after_source_ir,
                                    hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                                    core::ops::function::FnOnce::call_once,
                                ],
                                output_type: Some(
                                    i32,
                                ),
                                cardinality: None,
                                cpu_usage: None,
                                network_recv_cpu_usage: None,
                                id: Some(
                                    4,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                2,
                            ),
                            backtrace: [
                                hydro_lang::stream::Stream<T,L,B,O,R>::broadcast_bincode,
                                hydro_lang::stream::Stream<T,L,B,O,R>::broadcast_bincode_anonymous,
                                hydro_optimize::decoupler::tests::decouple_mini_program,
                                hydro_optimize::decoupler::tests::decouple_after_source_ir,
                                hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                                core::ops::function::FnOnce::call_once,
                            ],
                            output_type: Some(
                                hydro_optimize :: __staged :: __deps :: hydro_lang :: __staged :: __deps :: bytes :: Bytes,
                            ),
                            cardinality: None,
                            cpu_usage: None,
                            network_recv_cpu_usage: None,
                            id: Some(
                                5,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            2,
                        ),
                        backtrace: [
                            hydro_lang::stream::Stream<T,L,B,O,R>::broadcast_bincode,
                            hydro_lang::stream::Stream<T,L,B,O,R>::broadcast_bincode_anonymous,
                            hydro_optimize::decoupler::tests::decouple_mini_program,
                            hydro_optimize::decoupler::tests::decouple_after_source_ir,
                            hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                            core::ops::function::FnOnce::call_once,
                        ],
                        output_type: Some(
                            (u32 , hydro_optimize :: __staged :: __deps :: hydro_lang :: __staged :: __deps :: bytes :: Bytes),
                        ),
                        cardinality: None,
                        cpu_usage: None,
                        network_recv_cpu_usage: None,
                        id: Some(
                            6,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        1,
                    ),
                    backtrace: [
                        hydro_lang::stream::Stream<T,L,B,O,R>::broadcast_bincode_anonymous,
                        hydro_optimize::decoupler::tests::decouple_mini_program,
                        hydro_optimize::decoupler::tests::decouple_after_source_ir,
                        hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                        core::ops::function::FnOnce::call_once,
                    ],
                    output_type: Some(
                        i32,
                    ),
                    cardinality: None,
                    cpu_usage: None,
                    network_recv_cpu_usage: None,
                    id: Some(
                        7,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    1,
                ),
                backtrace: [
                    hydro_lang::stream::Stream<T,L,B,O,R>::broadcast_bincode_anonymous,
                    hydro_optimize::decoupler::tests::decouple_mini_program,
                    hydro_optimize::decoupler::tests::decouple_after_source_ir,
                    hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                    core::ops::function::FnOnce::call_once,
                ],
                output_type: Some(
                    i32,
                ),
                cardinality: None,
                cpu_usage: None,
                network_recv_cpu_usage: None,
                id: Some(
                    8,
                ),
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Cluster(
                1,
            ),
            backtrace: [
                hydro_optimize::decoupler::tests::decouple_mini_program,
                hydro_optimize::decoupler::tests::decouple_after_source_ir,
                hydro_optimize::decoupler::tests::decouple_after_source_ir::{{closure}},
                core::ops::function::FnOnce::call_once,
            ],
            output_type: Some(
                i32,
            ),
            cardinality: None,
            cpu_usage: None,
            network_recv_cpu_usage: None,
            id: Some(
                9,
            ),
        },
    },
]

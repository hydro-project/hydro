---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        {
            use hydroflow::{var_expr, var_args};
            let mut df = hydroflow::scheduled::graph::Hydroflow::new_with_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"unique :: < 'tick > ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"unique :: < 'tick > ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"source_stream (input)\",\"version\":1},{\"value\":\"for_each (| v | out . send (v) . unwrap ())\",\"version\":1},{\"value\":\"join :: < 'tick > ()\",\"version\":1},{\"value\":\"map (| kv : ((_ , _ ,) , ((_ , _ ,) , (_ , _ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 ,))\",\"version\":1},{\"value\":\"map (| v : (_ , _ ,) | ((v . 0 , v . 1 ,) , v))\",\"version\":1},{\"value\":\"map (| v : (_ , _ ,) | ((v . 1 , v . 0 ,) , v))\",\"version\":1},{\"value\":\"map (| row : (_ , _ ,) | (row . 0 , row . 1 ,))\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1}],\"node_color_map\":[{\"value\":null,\"version\":0},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":1,\"version\":1},\"dst\":{\"idx\":2,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":2,\"version\":1},\"dst\":{\"idx\":3,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":3,\"version\":1},\"dst\":{\"idx\":14,\"version\":1},\"blocking\":false,\"label\":\"0\"},{\"src\":{\"idx\":3,\"version\":1},\"dst\":{\"idx\":15,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":4,\"version\":1},\"dst\":{\"idx\":5,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":5,\"version\":1},\"dst\":{\"idx\":6,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":6,\"version\":1},\"dst\":{\"idx\":8,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":7,\"version\":1},\"dst\":{\"idx\":1,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":9,\"version\":1},\"dst\":{\"idx\":10,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":10,\"version\":1},\"dst\":{\"idx\":13,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":11,\"version\":1},\"dst\":{\"idx\":9,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":12,\"version\":1},\"dst\":{\"idx\":9,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":13,\"version\":1},\"dst\":{\"idx\":4,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":14,\"version\":1},\"dst\":{\"idx\":11,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":15,\"version\":1},\"dst\":{\"idx\":12,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1}],\"barrier_handoffs\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":12,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}],\"subgraph_internal_handoffs\":[{\"value\":null,\"version\":0}],\"varname_nodes\":{\"input\":[{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"join_0\":[{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1}],\"out\":[{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1}]}}\n",
            );
            let (hoff_14v1_send, hoff_14v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(14v1)");
            let (hoff_15v1_send, hoff_15v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(15v1)");
            let mut sg_1v1_node_7v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: hydroflow::futures::stream::Stream<Item = Item>,
                    Item,
                >(
                    stream: Stream,
                ) -> ::std::pin::Pin<
                    ::std::boxed::Box<
                        impl hydroflow::futures::stream::Stream<Item = Item>,
                    >,
                > {
                    ::std::boxed::Box::pin(stream)
                }
                check_stream(input)
            };
            let sg_1v1_node_2v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::<
                            _,
                            ::std::collections::HashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(),
                var_expr!(hoff_14v1_send, hoff_15v1_send),
                move |context, var_args!(), var_args!(hoff_14v1_send, hoff_15v1_send)| {
                    let hoff_14v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_14v1_send.give(Some(v));
                    });
                    let hoff_15v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_15v1_send.give(Some(v));
                    });
                    let op_7v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_1v1_node_7v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_7v1 = {
                        #[inline(always)]
                        pub fn check_op_7v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_7v1(op_7v1)
                    };
                    let op_1v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_7v1
                    };
                    let op_1v1 = {
                        #[inline(always)]
                        pub fn check_op_1v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_1v1(op_1v1)
                    };
                    let op_2v1 = op_1v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_1v1_node_2v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .try_insert_with(
                                    (context.current_tick(), context.current_stratum()),
                                    ::std::collections::HashSet::new,
                                );
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_2v1 = {
                        #[inline(always)]
                        pub fn check_op_2v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_2v1(op_2v1)
                    };
                    let op_3v1 = hydroflow::pusherator::tee::Tee::new(
                        hoff_14v1_send,
                        hoff_15v1_send,
                    );
                    let op_3v1 = {
                        #[inline(always)]
                        pub fn check_op_3v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_3v1(op_3v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_2v1, op_3v1);
                },
            );
            let sg_2v1_node_9v1_joindata_lhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            let sg_2v1_node_9v1_joindata_rhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            let sg_2v1_node_5v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::<
                            _,
                            ::std::collections::HashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                0,
                var_expr!(hoff_14v1_recv, hoff_15v1_recv),
                var_expr!(),
                move |context, var_args!(hoff_14v1_recv, hoff_15v1_recv), var_args!()| {
                    let hoff_14v1_recv = hoff_14v1_recv.take_inner().into_iter();
                    let hoff_15v1_recv = hoff_15v1_recv.take_inner().into_iter();
                    let op_11v1 = hoff_14v1_recv.map(|v: (_, _)| ((v.0, v.1), v));
                    let op_11v1 = {
                        #[inline(always)]
                        pub fn check_op_11v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_11v1(op_11v1)
                    };
                    let op_12v1 = hoff_15v1_recv.map(|v: (_, _)| ((v.1, v.0), v));
                    let op_12v1 = {
                        #[inline(always)]
                        pub fn check_op_12v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_12v1(op_12v1)
                    };
                    let mut sg_2v1_node_9v1_joindata_lhs_borrow = context
                        .state_ref(sg_2v1_node_9v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_2v1_node_9v1_joindata_rhs_borrow = context
                        .state_ref(sg_2v1_node_9v1_joindata_rhs)
                        .borrow_mut();
                    let op_9v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            lhs: I1,
                            rhs: I2,
                            lhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V2,
                                V1,
                            >,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Eq + Clone,
                            V2: Eq + Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                                lhs,
                                rhs,
                                lhs_state,
                                rhs_state,
                            )
                        }
                        check_inputs(
                            op_11v1,
                            op_12v1,
                            &mut sg_2v1_node_9v1_joindata_lhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                            &mut sg_2v1_node_9v1_joindata_rhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                        )
                    };
                    let op_9v1 = {
                        #[inline(always)]
                        pub fn check_op_9v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_9v1(op_9v1)
                    };
                    let op_10v1 = op_9v1
                        .map(|kv: ((_, _), ((_, _), (_, _)))| (kv.1.0.0, kv.1.0.1));
                    let op_10v1 = {
                        #[inline(always)]
                        pub fn check_op_10v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_10v1(op_10v1)
                    };
                    let op_13v1 = op_10v1.map(|row: (_, _)| (row.0, row.1));
                    let op_13v1 = {
                        #[inline(always)]
                        pub fn check_op_13v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_13v1(op_13v1)
                    };
                    let op_4v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_13v1
                    };
                    let op_4v1 = {
                        #[inline(always)]
                        pub fn check_op_4v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_4v1(op_4v1)
                    };
                    let op_5v1 = op_4v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_2v1_node_5v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .try_insert_with(
                                    (context.current_tick(), context.current_stratum()),
                                    ::std::collections::HashSet::new,
                                );
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_5v1 = {
                        #[inline(always)]
                        pub fn check_op_5v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_5v1(op_5v1)
                    };
                    let op_6v1 = op_5v1;
                    let op_6v1 = {
                        #[inline(always)]
                        pub fn check_op_6v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_6v1(op_6v1)
                    };
                    let op_8v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        out.send(v).unwrap()
                    });
                    let op_8v1 = {
                        #[inline(always)]
                        pub fn check_op_8v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_8v1(op_8v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_6v1, op_8v1);
                },
            );
            df
        }
    }
}


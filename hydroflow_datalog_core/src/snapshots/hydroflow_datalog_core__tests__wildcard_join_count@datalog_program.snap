---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        use hydroflow::{var_expr, var_args};
        let mut df = hydroflow::scheduled::graph::Hydroflow::new();
        df.__assign_meta_graph(
            "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"source_stream (ints1)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints2)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result2 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'tick , 'tick , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : ((_ ,) , ((_ ,) , ())) | (kv . 0 . 0 , kv . 1 . 0 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | ((_v . 0 ,) , (_v . 1 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | ((_v . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | (() , (() ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"group_by :: < 'tick , () , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some (prev + 1) } else { Some (1) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) | (a . 0 . unwrap () ,))\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'tick , 'tick , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : ((_ ,) , ((_ ,) , ())) | (kv . 0 . 0 , kv . 1 . 0 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | ((_v . 0 ,) , (_v . 1 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | ((_v . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | (() , ((row . 0) ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"group_by :: < 'tick , () , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some ({ let prev : (hydroflow :: rustc_hash :: FxHashSet < _ > , _) = prev ; let mut set : hydroflow :: rustc_hash :: FxHashSet :: < _ > = prev . 0 ; if set . insert (val . 0) { (set , prev . 1 + 1) } else { (set , prev . 1) } }) } else { Some ({ let mut set = hydroflow :: rustc_hash :: FxHashSet :: < _ > :: default () ; set . insert (val . 0) ; (set , 1) }) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) | (a . 0 . unwrap () . 1 ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":13,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":23,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":3},{\"idx\":20,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":30,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":12,\"version\":3},{\"idx\":19,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":1,\"version\":3},{\"idx\":29,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":4,\"version\":3},{\"idx\":27,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":15,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":16,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":17,\"version\":1},{\"idx\":18,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":19,\"version\":1},{\"idx\":17,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":12,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":20,\"version\":1},{\"idx\":17,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1},{\"idx\":9,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":7,\"version\":3},{\"idx\":26,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":22,\"version\":1},{\"idx\":23,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":10,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":25,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":26,\"version\":1},{\"idx\":24,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":7,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":27,\"version\":1},{\"idx\":24,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1},{\"idx\":4,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":10,\"version\":3},{\"idx\":22,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":29,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":28,\"version\":1},{\"idx\":1,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":25,\"version\":1},{\"idx\":28,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":13,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":22,\"version\":1},{\"idx\":23,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":15,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":29,\"version\":1},{\"idx\":30,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":16,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":19,\"version\":1},{\"idx\":20,\"version\":1},{\"idx\":17,\"version\":1},{\"idx\":18,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":26,\"version\":1},{\"idx\":27,\"version\":1},{\"idx\":24,\"version\":1},{\"idx\":25,\"version\":1},{\"idx\":28,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints1_insert\",\"version\":1},{\"value\":\"ints1\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"ints2_insert\",\"version\":1},{\"value\":\"ints2\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"result_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result2_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_0\",\"version\":1},{\"value\":\"join_0\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_1\",\"version\":1},{\"value\":\"join_1\",\"version\":1}]}",
        );
        df.__assign_diagnostics("[]");
        let (hoff_1v3_send, hoff_1v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(1v3)");
        let (hoff_4v3_send, hoff_4v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(4v3)");
        let (hoff_7v3_send, hoff_7v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(7v3)");
        let (hoff_9v3_send, hoff_9v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(9v3)");
        let (hoff_10v3_send, hoff_10v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(10v3)");
        let (hoff_12v3_send, hoff_12v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(12v3)");
        let mut sg_1v1_node_13v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints1)
        };
        let sg_1v1_node_2v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(1v1)",
            0,
            var_expr!(),
            var_expr!(hoff_7v3_send, hoff_12v3_send),
            move |context, var_args!(), var_args!(hoff_7v3_send, hoff_12v3_send)| {
                let hoff_7v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_7v3_send.give(Some(v));
                });
                let hoff_12v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_12v3_send.give(Some(v));
                });
                let op_13v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_1v1_node_13v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_13v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_13v1__source_stream__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_13v1__source_stream__loc_unknown_start_1_0_end_1_0(op_13v1)
                };
                let op_2v1 = op_13v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_1v1_node_2v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .get_mut_clear((
                                context.current_tick(),
                                context.current_stratum(),
                            ));
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_2v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_2v1__unique__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_2v1__unique__loc_unknown_start_1_0_end_1_0(op_2v1)
                };
                let op_3v1 = hydroflow::pusherator::tee::Tee::new(
                    hoff_12v3_send,
                    hoff_7v3_send,
                );
                let op_3v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_3v1__tee__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        struct Push<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > {
                            inner: Input,
                        }
                        impl<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn give(&mut self, item: Self::Item) {
                                self.inner.give(item)
                            }
                        }
                        Push { inner: input }
                    }
                    op_3v1__tee__loc_unknown_start_1_0_end_1_0(op_3v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_2v1, op_3v1);
            },
        );
        let mut sg_2v1_node_14v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints2)
        };
        let sg_2v1_node_5v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(2v1)",
            0,
            var_expr!(),
            var_expr!(hoff_4v3_send, hoff_9v3_send),
            move |context, var_args!(), var_args!(hoff_4v3_send, hoff_9v3_send)| {
                let hoff_4v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_4v3_send.give(Some(v));
                });
                let hoff_9v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_9v3_send.give(Some(v));
                });
                let op_14v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_2v1_node_14v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_14v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_14v1__source_stream__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_14v1__source_stream__loc_unknown_start_1_0_end_1_0(op_14v1)
                };
                let op_5v1 = op_14v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_2v1_node_5v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .get_mut_clear((
                                context.current_tick(),
                                context.current_stratum(),
                            ));
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_5v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_5v1__unique__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_5v1__unique__loc_unknown_start_1_0_end_1_0(op_5v1)
                };
                let op_6v1 = hydroflow::pusherator::tee::Tee::new(
                    hoff_9v3_send,
                    hoff_4v3_send,
                );
                let op_6v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_6v1__tee__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        struct Push<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > {
                            inner: Input,
                        }
                        impl<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn give(&mut self, item: Self::Item) {
                                self.inner.give(item)
                            }
                        }
                        Push { inner: input }
                    }
                    op_6v1__tee__loc_unknown_start_1_0_end_1_0(op_6v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_5v1, op_6v1);
            },
        );
        let sg_3v1_node_8v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(3v1)",
            1,
            var_expr!(hoff_10v3_recv),
            var_expr!(),
            move |context, var_args!(hoff_10v3_recv), var_args!()| {
                let mut hoff_10v3_recv = hoff_10v3_recv.borrow_mut_swap();
                let hoff_10v3_recv = hoff_10v3_recv.drain(..);
                let op_22v1 = {
                    #[inline(always)]
                    fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                        iter
                    }
                    check_input(hoff_10v3_recv)
                        .fold(
                            hydroflow::rustc_hash::FxHashMap::<
                                (),
                                (Option<_>,),
                            >::default(),
                            |mut ht, kv| {
                                let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                #[allow(clippy::redundant_closure_call)]
                                (|old: &mut (Option<_>,), val: (_,)| {
                                    old
                                        .0 = if let Some(prev) = old.0.take() {
                                        Some(prev + 1)
                                    } else {
                                        Some(1)
                                    };
                                })(entry, kv.1);
                                ht
                            },
                        )
                        .into_iter()
                };
                let op_22v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_22v1__group_by__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_22v1__group_by__loc_unknown_start_1_0_end_1_0(op_22v1)
                };
                let op_23v1 = op_22v1.map(|(g, a)| (a.0.unwrap(),));
                let op_23v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_23v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_23v1__map__loc_unknown_start_1_0_end_1_0(op_23v1)
                };
                let op_8v1 = op_23v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_3v1_node_8v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .get_mut_clear((
                                context.current_tick(),
                                context.current_stratum(),
                            ));
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_8v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_8v1__unique__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_8v1__unique__loc_unknown_start_1_0_end_1_0(op_8v1)
                };
                let op_15v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result.send(v).unwrap()
                });
                let op_15v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_15v1__for_each__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        struct Push<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > {
                            inner: Input,
                        }
                        impl<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn give(&mut self, item: Self::Item) {
                                self.inner.give(item)
                            }
                        }
                        Push { inner: input }
                    }
                    op_15v1__for_each__loc_unknown_start_1_0_end_1_0(op_15v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_8v1, op_15v1);
            },
        );
        let sg_4v1_node_11v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(4v1)",
            1,
            var_expr!(hoff_1v3_recv),
            var_expr!(),
            move |context, var_args!(hoff_1v3_recv), var_args!()| {
                let mut hoff_1v3_recv = hoff_1v3_recv.borrow_mut_swap();
                let hoff_1v3_recv = hoff_1v3_recv.drain(..);
                let op_29v1 = {
                    #[inline(always)]
                    fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                        iter
                    }
                    check_input(hoff_1v3_recv)
                        .fold(
                            hydroflow::rustc_hash::FxHashMap::<
                                (),
                                (Option<_>,),
                            >::default(),
                            |mut ht, kv| {
                                let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                #[allow(clippy::redundant_closure_call)]
                                (|old: &mut (Option<_>,), val: (_,)| {
                                    old
                                        .0 = if let Some(prev) = old.0.take() {
                                        Some({
                                            let prev: (hydroflow::rustc_hash::FxHashSet<_>, _) = prev;
                                            let mut set: hydroflow::rustc_hash::FxHashSet::<_> = prev.0;
                                            if set.insert(val.0) {
                                                (set, prev.1 + 1)
                                            } else {
                                                (set, prev.1)
                                            }
                                        })
                                    } else {
                                        Some({
                                            let mut set = hydroflow::rustc_hash::FxHashSet::<
                                                _,
                                            >::default();
                                            set.insert(val.0);
                                            (set, 1)
                                        })
                                    };
                                })(entry, kv.1);
                                ht
                            },
                        )
                        .into_iter()
                };
                let op_29v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_29v1__group_by__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_29v1__group_by__loc_unknown_start_1_0_end_1_0(op_29v1)
                };
                let op_30v1 = op_29v1.map(|(g, a)| (a.0.unwrap().1,));
                let op_30v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_30v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_30v1__map__loc_unknown_start_1_0_end_1_0(op_30v1)
                };
                let op_11v1 = op_30v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_4v1_node_11v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .get_mut_clear((
                                context.current_tick(),
                                context.current_stratum(),
                            ));
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_11v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_11v1__unique__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_11v1__unique__loc_unknown_start_1_0_end_1_0(op_11v1)
                };
                let op_16v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result2.send(v).unwrap()
                });
                let op_16v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_16v1__for_each__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        struct Push<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > {
                            inner: Input,
                        }
                        impl<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn give(&mut self, item: Self::Item) {
                                self.inner.give(item)
                            }
                        }
                        Push { inner: input }
                    }
                    op_16v1__for_each__loc_unknown_start_1_0_end_1_0(op_16v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_11v1, op_16v1);
            },
        );
        let sg_5v1_node_17v1_joindata_lhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                        hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                ),
            );
        let sg_5v1_node_17v1_joindata_rhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                        hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(5v1)",
            0,
            var_expr!(hoff_9v3_recv, hoff_12v3_recv),
            var_expr!(hoff_10v3_send),
            move |
                context,
                var_args!(hoff_9v3_recv, hoff_12v3_recv),
                var_args!(hoff_10v3_send)|
            {
                let mut hoff_9v3_recv = hoff_9v3_recv.borrow_mut_swap();
                let hoff_9v3_recv = hoff_9v3_recv.drain(..);
                let mut hoff_12v3_recv = hoff_12v3_recv.borrow_mut_swap();
                let hoff_12v3_recv = hoff_12v3_recv.drain(..);
                let hoff_10v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_10v3_send.give(Some(v));
                });
                let op_19v1 = hoff_12v3_recv.map(|_v: (_, _)| ((_v.0,), (_v.1,)));
                let op_19v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_19v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_19v1__map__loc_unknown_start_1_0_end_1_0(op_19v1)
                };
                let op_20v1 = hoff_9v3_recv.map(|_v: (_,)| ((_v.0,), ()));
                let op_20v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_20v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_20v1__map__loc_unknown_start_1_0_end_1_0(op_20v1)
                };
                let mut sg_5v1_node_17v1_joindata_lhs_borrow = context
                    .state_ref(sg_5v1_node_17v1_joindata_lhs)
                    .borrow_mut();
                let mut sg_5v1_node_17v1_joindata_rhs_borrow = context
                    .state_ref(sg_5v1_node_17v1_joindata_rhs)
                    .borrow_mut();
                let op_17v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V1, I2, V2>(
                        lhs: I1,
                        rhs: I2,
                        lhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V1,
                            V2,
                        >,
                        rhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V2,
                            V1,
                        >,
                    ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                    where
                        K: Eq + std::hash::Hash + Clone,
                        V1: Eq + Clone,
                        V2: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V1)>,
                        I2: 'a + Iterator<Item = (K, V2)>,
                    {
                        hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                            lhs,
                            rhs,
                            lhs_state,
                            rhs_state,
                        )
                    }
                    check_inputs(
                        op_19v1,
                        op_20v1,
                        &mut *sg_5v1_node_17v1_joindata_lhs_borrow
                            .get_mut_clear(context.current_tick()),
                        &mut *sg_5v1_node_17v1_joindata_rhs_borrow
                            .get_mut_clear(context.current_tick()),
                    )
                };
                let op_17v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_17v1__join__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_17v1__join__loc_unknown_start_1_0_end_1_0(op_17v1)
                };
                let op_18v1 = op_17v1.map(|kv: ((_,), ((_,), ()))| (kv.0.0, kv.1.0.0));
                let op_18v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_18v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_18v1__map__loc_unknown_start_1_0_end_1_0(op_18v1)
                };
                let op_21v1 = op_18v1.map(|row: (_, _)| ((), ((),)));
                let op_21v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_21v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_21v1__map__loc_unknown_start_1_0_end_1_0(op_21v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_21v1, hoff_10v3_send);
            },
        );
        let sg_6v1_node_24v1_joindata_lhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                        hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                ),
            );
        let sg_6v1_node_24v1_joindata_rhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                        hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(6v1)",
            0,
            var_expr!(hoff_4v3_recv, hoff_7v3_recv),
            var_expr!(hoff_1v3_send),
            move |
                context,
                var_args!(hoff_4v3_recv, hoff_7v3_recv),
                var_args!(hoff_1v3_send)|
            {
                let mut hoff_4v3_recv = hoff_4v3_recv.borrow_mut_swap();
                let hoff_4v3_recv = hoff_4v3_recv.drain(..);
                let mut hoff_7v3_recv = hoff_7v3_recv.borrow_mut_swap();
                let hoff_7v3_recv = hoff_7v3_recv.drain(..);
                let hoff_1v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_1v3_send.give(Some(v));
                });
                let op_26v1 = hoff_7v3_recv.map(|_v: (_, _)| ((_v.0,), (_v.1,)));
                let op_26v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_26v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_26v1__map__loc_unknown_start_1_0_end_1_0(op_26v1)
                };
                let op_27v1 = hoff_4v3_recv.map(|_v: (_,)| ((_v.0,), ()));
                let op_27v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_27v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_27v1__map__loc_unknown_start_1_0_end_1_0(op_27v1)
                };
                let mut sg_6v1_node_24v1_joindata_lhs_borrow = context
                    .state_ref(sg_6v1_node_24v1_joindata_lhs)
                    .borrow_mut();
                let mut sg_6v1_node_24v1_joindata_rhs_borrow = context
                    .state_ref(sg_6v1_node_24v1_joindata_rhs)
                    .borrow_mut();
                let op_24v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V1, I2, V2>(
                        lhs: I1,
                        rhs: I2,
                        lhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V1,
                            V2,
                        >,
                        rhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V2,
                            V1,
                        >,
                    ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                    where
                        K: Eq + std::hash::Hash + Clone,
                        V1: Eq + Clone,
                        V2: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V1)>,
                        I2: 'a + Iterator<Item = (K, V2)>,
                    {
                        hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                            lhs,
                            rhs,
                            lhs_state,
                            rhs_state,
                        )
                    }
                    check_inputs(
                        op_26v1,
                        op_27v1,
                        &mut *sg_6v1_node_24v1_joindata_lhs_borrow
                            .get_mut_clear(context.current_tick()),
                        &mut *sg_6v1_node_24v1_joindata_rhs_borrow
                            .get_mut_clear(context.current_tick()),
                    )
                };
                let op_24v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_24v1__join__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_24v1__join__loc_unknown_start_1_0_end_1_0(op_24v1)
                };
                let op_25v1 = op_24v1.map(|kv: ((_,), ((_,), ()))| (kv.0.0, kv.1.0.0));
                let op_25v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_25v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_25v1__map__loc_unknown_start_1_0_end_1_0(op_25v1)
                };
                let op_28v1 = op_25v1.map(|row: (_, _)| ((), ((row.0),)));
                let op_28v1 = {
                    #[allow(non_snake_case)]
                    #[inline(always)]
                    pub fn op_28v1__map__loc_unknown_start_1_0_end_1_0<
                        Item,
                        Input: ::std::iter::Iterator<Item = Item>,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        struct Pull<Item, Input: ::std::iter::Iterator<Item = Item>> {
                            inner: Input,
                        }
                        impl<Item, Input: ::std::iter::Iterator<Item = Item>> Iterator
                        for Pull<Item, Input> {
                            type Item = Item;
                            #[inline(always)]
                            fn next(&mut self) -> Option<Self::Item> {
                                self.inner.next()
                            }
                            #[inline(always)]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.inner.size_hint()
                            }
                        }
                        Pull { inner: input }
                    }
                    op_28v1__map__loc_unknown_start_1_0_end_1_0(op_28v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_28v1, hoff_1v3_send);
            },
        );
        df
    }
}


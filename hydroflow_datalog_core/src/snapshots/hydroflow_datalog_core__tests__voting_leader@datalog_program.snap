---
source: hydroflow_datalog_core/src/lib.rs
assertion_line: 634
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        {
            use hydroflow::{var_expr, var_args};
            let mut df = hydroflow::scheduled::graph::Hydroflow::new_with_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"merge ()\",\"version\":1},{\"value\":\"tee ()\",\"version\":1},{\"value\":\"source_stream (clientIn)\",\"version\":1},{\"value\":\"source_stream (voteFromReplica)\",\"version\":1},{\"value\":\"source_stream (voteCounts)\",\"version\":1},{\"value\":\"source_stream (replicaAddr)\",\"version\":1},{\"value\":\"source_stream (numReplicas)\",\"version\":1},{\"value\":\"source_stream (clientAddr)\",\"version\":1},{\"value\":\"for_each (| v | clientOut . send (v) . unwrap ())\",\"version\":1},{\"value\":\"for_each (| v | voteToReplica . send (v) . unwrap ())\",\"version\":1},{\"value\":\"join :: < 'tick > ()\",\"version\":1},{\"value\":\"map (| kv : (() , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 1 . 0 ,))\",\"version\":1},{\"value\":\"map (| v : (_ ,) | (() , v))\",\"version\":1},{\"value\":\"map (| v : (_ ,) | (() , v))\",\"version\":1},{\"value\":\"source_stream (async_receive_voteToReplica)\",\"version\":1},{\"value\":\"map (| row : (_ , _ ,) | (row . 0 , row . 1 ,))\",\"version\":1},{\"value\":\"for_each (| v : (_ , _ ,) | async_send_voteToReplica (v . 1 , (v . 0 ,)) . unwrap ())\",\"version\":1},{\"value\":\"map (| row : (_ , _ ,) | (row . 0 , row . 1 ,))\",\"version\":1},{\"value\":\"next_tick ()\",\"version\":1},{\"value\":\"map (| row : (_ , _ ,) | ((row . 1 ,) , (row . 0 ,)))\",\"version\":1},{\"value\":\"group_by :: < 'tick , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 { Some (prev + 1) } else { Some (1) } ; })\",\"version\":1},{\"value\":\"map (| (g , a) | (a . 0 . unwrap () , g . 0 ,))\",\"version\":1},{\"value\":\"join :: < 'tick > ()\",\"version\":1},{\"value\":\"map (| kv : ((_ ,) , ((_ , _ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 ,))\",\"version\":1},{\"value\":\"map (| v : (_ , _ ,) | ((v . 0 ,) , v))\",\"version\":1},{\"value\":\"map (| v : (_ ,) | ((v . 0 ,) , v))\",\"version\":1},{\"value\":\"join :: < 'tick > ()\",\"version\":1},{\"value\":\"map (| kv : (() , ((_ , _ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 , kv . 1 . 1 . 0 ,))\",\"version\":1},{\"value\":\"map (| v : (_ , _ ,) | (() , v))\",\"version\":1},{\"value\":\"map (| v : (_ ,) | (() , v))\",\"version\":1},{\"value\":\"source_stream (async_receive_clientOut)\",\"version\":1},{\"value\":\"map (| row : (_ , _ , _ ,) | (row . 1 , row . 2 ,))\",\"version\":1},{\"value\":\"for_each (| v : (_ , _ ,) | async_send_clientOut (v . 1 , (v . 0 ,)) . unwrap ())\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"identity ()\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1}],\"node_color_map\":[{\"value\":null,\"version\":0},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Pull\",\"version\":1},{\"value\":\"Push\",\"version\":1},{\"value\":\"Push\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":1,\"version\":1},\"dst\":{\"idx\":2,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":2,\"version\":1},\"dst\":{\"idx\":27,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":3,\"version\":1},\"dst\":{\"idx\":4,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":4,\"version\":1},\"dst\":{\"idx\":23,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":5,\"version\":1},\"dst\":{\"idx\":6,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":6,\"version\":1},\"dst\":{\"idx\":24,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":7,\"version\":1},\"dst\":{\"idx\":8,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":8,\"version\":1},\"dst\":{\"idx\":49,\"version\":1},\"blocking\":false,\"label\":\"0\"},{\"src\":{\"idx\":8,\"version\":1},\"dst\":{\"idx\":34,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":9,\"version\":1},\"dst\":{\"idx\":10,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":10,\"version\":1},\"dst\":{\"idx\":39,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":11,\"version\":1},\"dst\":{\"idx\":12,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":12,\"version\":1},\"dst\":{\"idx\":28,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":13,\"version\":1},\"dst\":{\"idx\":14,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":14,\"version\":1},\"dst\":{\"idx\":40,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":15,\"version\":1},\"dst\":{\"idx\":16,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":16,\"version\":1},\"dst\":{\"idx\":44,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":17,\"version\":1},\"dst\":{\"idx\":1,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":18,\"version\":1},\"dst\":{\"idx\":7,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":19,\"version\":1},\"dst\":{\"idx\":53,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":20,\"version\":1},\"dst\":{\"idx\":11,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":21,\"version\":1},\"dst\":{\"idx\":54,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":22,\"version\":1},\"dst\":{\"idx\":55,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":25,\"version\":1},\"dst\":{\"idx\":26,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":26,\"version\":1},\"dst\":{\"idx\":30,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":27,\"version\":1},\"dst\":{\"idx\":25,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":28,\"version\":1},\"dst\":{\"idx\":25,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":29,\"version\":1},\"dst\":{\"idx\":5,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":30,\"version\":1},\"dst\":{\"idx\":31,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":32,\"version\":1},\"dst\":{\"idx\":48,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":33,\"version\":1},\"dst\":{\"idx\":7,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":34,\"version\":1},\"dst\":{\"idx\":50,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":35,\"version\":1},\"dst\":{\"idx\":36,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":36,\"version\":1},\"dst\":{\"idx\":9,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":37,\"version\":1},\"dst\":{\"idx\":38,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":38,\"version\":1},\"dst\":{\"idx\":43,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":39,\"version\":1},\"dst\":{\"idx\":37,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":40,\"version\":1},\"dst\":{\"idx\":37,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":41,\"version\":1},\"dst\":{\"idx\":42,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":42,\"version\":1},\"dst\":{\"idx\":46,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":43,\"version\":1},\"dst\":{\"idx\":41,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":44,\"version\":1},\"dst\":{\"idx\":41,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":45,\"version\":1},\"dst\":{\"idx\":3,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":46,\"version\":1},\"dst\":{\"idx\":47,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":48,\"version\":1},\"dst\":{\"idx\":51,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":49,\"version\":1},\"dst\":{\"idx\":32,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":50,\"version\":1},\"dst\":{\"idx\":35,\"version\":1},\"blocking\":true,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":51,\"version\":1},\"dst\":{\"idx\":52,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":52,\"version\":1},\"dst\":{\"idx\":33,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":53,\"version\":1},\"dst\":{\"idx\":9,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":54,\"version\":1},\"dst\":{\"idx\":13,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":55,\"version\":1},\"dst\":{\"idx\":15,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1}],\"barrier_handoffs\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":null,\"version\":0},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":45,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":23,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":29,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":24,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":20,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":12,\"version\":1},{\"idx\":27,\"version\":1},{\"idx\":28,\"version\":1},{\"idx\":25,\"version\":1},{\"idx\":26,\"version\":1},{\"idx\":30,\"version\":1},{\"idx\":31,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":32,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":33,\"version\":1},{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":34,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":35,\"version\":1},{\"idx\":36,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":14,\"version\":1},{\"idx\":15,\"version\":1},{\"idx\":16,\"version\":1},{\"idx\":39,\"version\":1},{\"idx\":40,\"version\":1},{\"idx\":37,\"version\":1},{\"idx\":38,\"version\":1},{\"idx\":43,\"version\":1},{\"idx\":44,\"version\":1},{\"idx\":41,\"version\":1},{\"idx\":42,\"version\":1},{\"idx\":46,\"version\":1},{\"idx\":47,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":51,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":19,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":21,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":22,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":1,\"version\":1},{\"value\":2,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}],\"subgraph_internal_handoffs\":[{\"value\":null,\"version\":0}],\"varname_nodes\":{\"clientAddr\":[{\"idx\":15,\"version\":1},{\"idx\":16,\"version\":1}],\"clientIn\":[{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1}],\"clientOut\":[{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1}],\"join_0\":[{\"idx\":25,\"version\":1},{\"idx\":26,\"version\":1}],\"join_1\":[{\"idx\":37,\"version\":1},{\"idx\":38,\"version\":1}],\"join_2\":[{\"idx\":41,\"version\":1},{\"idx\":42,\"version\":1}],\"numReplicas\":[{\"idx\":13,\"version\":1},{\"idx\":14,\"version\":1}],\"replicaAddr\":[{\"idx\":11,\"version\":1},{\"idx\":12,\"version\":1}],\"voteCounts\":[{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1}],\"voteFromReplica\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1}],\"voteToReplica\":[{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1}]}}\n",
            );
            let (hoff_48v1_send, hoff_48v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(48v1)");
            let (hoff_49v1_send, hoff_49v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(49v1)");
            let (hoff_50v1_send, hoff_50v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(50v1)");
            let (hoff_52v1_send, hoff_52v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(52v1)");
            let (hoff_53v1_send, hoff_53v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(53v1)");
            let (hoff_54v1_send, hoff_54v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(54v1)");
            let (hoff_55v1_send, hoff_55v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(55v1)");
            let mut sg_1v1_node_45v1_stream = Box::pin(async_receive_clientOut);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(),
                var_expr!(),
                move |context, var_args!(), var_args!()| {
                    let op_45v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_1v1_node_45v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_45v1 = {
                        #[inline(always)]
                        pub fn check_op_45v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_45v1(op_45v1)
                    };
                    let op_3v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_45v1
                    };
                    let op_3v1 = {
                        #[inline(always)]
                        pub fn check_op_3v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_3v1(op_3v1)
                    };
                    let op_4v1 = op_3v1;
                    let op_4v1 = {
                        #[inline(always)]
                        pub fn check_op_4v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_4v1(op_4v1)
                    };
                    let op_23v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        clientOut.send(v).unwrap()
                    });
                    let op_23v1 = {
                        #[inline(always)]
                        pub fn check_op_23v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_23v1(op_23v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_4v1, op_23v1);
                },
            );
            let mut sg_2v1_node_29v1_stream = Box::pin(async_receive_voteToReplica);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                0,
                var_expr!(),
                var_expr!(),
                move |context, var_args!(), var_args!()| {
                    let op_29v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_2v1_node_29v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_29v1 = {
                        #[inline(always)]
                        pub fn check_op_29v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_29v1(op_29v1)
                    };
                    let op_5v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_29v1
                    };
                    let op_5v1 = {
                        #[inline(always)]
                        pub fn check_op_5v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_5v1(op_5v1)
                    };
                    let op_6v1 = op_5v1;
                    let op_6v1 = {
                        #[inline(always)]
                        pub fn check_op_6v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_6v1(op_6v1)
                    };
                    let op_24v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        voteToReplica.send(v).unwrap()
                    });
                    let op_24v1 = {
                        #[inline(always)]
                        pub fn check_op_24v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_24v1(op_24v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_6v1, op_24v1);
                },
            );
            let mut sg_3v1_node_17v1_stream = Box::pin(clientIn);
            let mut sg_3v1_node_20v1_stream = Box::pin(replicaAddr);
            let sg_3v1_node_25v1_joindata_lhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            let sg_3v1_node_25v1_joindata_rhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(3v1)",
                0,
                var_expr!(),
                var_expr!(),
                move |context, var_args!(), var_args!()| {
                    let op_17v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_3v1_node_17v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_17v1 = {
                        #[inline(always)]
                        pub fn check_op_17v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_17v1(op_17v1)
                    };
                    let op_1v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_17v1
                    };
                    let op_1v1 = {
                        #[inline(always)]
                        pub fn check_op_1v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_1v1(op_1v1)
                    };
                    let op_2v1 = op_1v1;
                    let op_2v1 = {
                        #[inline(always)]
                        pub fn check_op_2v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_2v1(op_2v1)
                    };
                    let op_20v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_3v1_node_20v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_20v1 = {
                        #[inline(always)]
                        pub fn check_op_20v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_20v1(op_20v1)
                    };
                    let op_11v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_20v1
                    };
                    let op_11v1 = {
                        #[inline(always)]
                        pub fn check_op_11v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_11v1(op_11v1)
                    };
                    let op_12v1 = op_11v1;
                    let op_12v1 = {
                        #[inline(always)]
                        pub fn check_op_12v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_12v1(op_12v1)
                    };
                    let op_27v1 = op_2v1.map(|v: (_,)| ((), v));
                    let op_27v1 = {
                        #[inline(always)]
                        pub fn check_op_27v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_27v1(op_27v1)
                    };
                    let op_28v1 = op_12v1.map(|v: (_,)| ((), v));
                    let op_28v1 = {
                        #[inline(always)]
                        pub fn check_op_28v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_28v1(op_28v1)
                    };
                    let mut sg_3v1_node_25v1_joindata_lhs_borrow = context
                        .state_ref(sg_3v1_node_25v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_3v1_node_25v1_joindata_rhs_borrow = context
                        .state_ref(sg_3v1_node_25v1_joindata_rhs)
                        .borrow_mut();
                    let op_25v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            lhs: I1,
                            rhs: I2,
                            lhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V2,
                                V1,
                            >,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Eq + Clone,
                            V2: Eq + Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                                lhs,
                                rhs,
                                lhs_state,
                                rhs_state,
                            )
                        }
                        check_inputs(
                            op_27v1,
                            op_28v1,
                            &mut sg_3v1_node_25v1_joindata_lhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                            &mut sg_3v1_node_25v1_joindata_rhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                        )
                    };
                    let op_25v1 = {
                        #[inline(always)]
                        pub fn check_op_25v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_25v1(op_25v1)
                    };
                    let op_26v1 = op_25v1
                        .map(|kv: ((), ((_,), (_,)))| (kv.1.0.0, kv.1.1.0));
                    let op_26v1 = {
                        #[inline(always)]
                        pub fn check_op_26v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_26v1(op_26v1)
                    };
                    let op_30v1 = op_26v1.map(|row: (_, _)| (row.0, row.1));
                    let op_30v1 = {
                        #[inline(always)]
                        pub fn check_op_30v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_30v1(op_30v1)
                    };
                    let op_31v1 = hydroflow::pusherator::for_each::ForEach::new(|
                        v: (_, _)|
                    async_send_voteToReplica(v.1, (v.0,)).unwrap());
                    let op_31v1 = {
                        #[inline(always)]
                        pub fn check_op_31v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_31v1(op_31v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_30v1, op_31v1);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(4v1)",
                0,
                var_expr!(hoff_49v1_recv),
                var_expr!(hoff_48v1_send),
                move |context, var_args!(hoff_49v1_recv), var_args!(hoff_48v1_send)| {
                    let hoff_49v1_recv = hoff_49v1_recv.take_inner().into_iter();
                    let hoff_48v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_48v1_send.give(Some(v));
                    });
                    let op_32v1 = hoff_49v1_recv.map(|row: (_, _)| (row.0, row.1));
                    let op_32v1 = {
                        #[inline(always)]
                        pub fn check_op_32v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_32v1(op_32v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_32v1, hoff_48v1_send);
                },
            );
            let mut sg_5v1_node_18v1_stream = Box::pin(voteFromReplica);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(5v1)",
                0,
                var_expr!(hoff_52v1_recv),
                var_expr!(hoff_49v1_send, hoff_50v1_send),
                move |
                    context,
                    var_args!(hoff_52v1_recv),
                    var_args!(hoff_49v1_send, hoff_50v1_send)|
                {
                    let hoff_52v1_recv = hoff_52v1_recv.take_inner().into_iter();
                    let hoff_49v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_49v1_send.give(Some(v));
                    });
                    let hoff_50v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_50v1_send.give(Some(v));
                    });
                    let op_18v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_5v1_node_18v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_18v1 = {
                        #[inline(always)]
                        pub fn check_op_18v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_18v1(op_18v1)
                    };
                    let op_33v1 = hoff_52v1_recv;
                    let op_33v1 = {
                        #[inline(always)]
                        pub fn check_op_33v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_33v1(op_33v1)
                    };
                    let op_7v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        check_inputs(op_18v1, op_33v1)
                    };
                    let op_7v1 = {
                        #[inline(always)]
                        pub fn check_op_7v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_7v1(op_7v1)
                    };
                    let op_34v1 = hydroflow::pusherator::map::Map::new(
                        |row: (_, _)| ((row.1,), (row.0,)),
                        hoff_50v1_send,
                    );
                    let op_34v1 = {
                        #[inline(always)]
                        pub fn check_op_34v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_34v1(op_34v1)
                    };
                    let op_8v1 = hydroflow::pusherator::tee::Tee::new(
                        hoff_49v1_send,
                        op_34v1,
                    );
                    let op_8v1 = {
                        #[inline(always)]
                        pub fn check_op_8v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_8v1(op_8v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_7v1, op_8v1);
                },
            );
            let sg_6v1_node_37v1_joindata_lhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            let sg_6v1_node_37v1_joindata_rhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            let sg_6v1_node_41v1_joindata_lhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            let sg_6v1_node_41v1_joindata_rhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                            hydroflow::lang::clear::ClearDefault(
                                hydroflow::compiled::pull::HalfJoinState::default(),
                            ),
                        ),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(6v1)",
                1,
                var_expr!(
                    hoff_50v1_recv, hoff_53v1_recv, hoff_54v1_recv, hoff_55v1_recv
                ),
                var_expr!(),
                move |
                    context,
                    var_args!(
                        hoff_50v1_recv, hoff_53v1_recv, hoff_54v1_recv, hoff_55v1_recv
                    ),
                    var_args!()|
                {
                    let hoff_50v1_recv = hoff_50v1_recv.take_inner().into_iter();
                    let hoff_53v1_recv = hoff_53v1_recv.take_inner().into_iter();
                    let hoff_54v1_recv = hoff_54v1_recv.take_inner().into_iter();
                    let hoff_55v1_recv = hoff_55v1_recv.take_inner().into_iter();
                    let op_35v1 = {
                        #[inline(always)]
                        fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                            iter
                        }
                        check_input(hoff_50v1_recv)
                            .fold(
                                ::std::collections::HashMap::<(_,), (Option<_>,)>::new(),
                                |mut ht, kv| {
                                    let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                    #[allow(clippy::redundant_closure_call)]
                                    (|old: &mut (Option<_>,), val: (_,)| {
                                        old
                                            .0 = if let Some(prev) = old.0 {
                                            Some(prev + 1)
                                        } else {
                                            Some(1)
                                        };
                                    })(entry, kv.1);
                                    ht
                                },
                            )
                            .into_iter()
                    };
                    let op_35v1 = {
                        #[inline(always)]
                        pub fn check_op_35v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_35v1(op_35v1)
                    };
                    let op_36v1 = op_35v1.map(|(g, a)| (a.0.unwrap(), g.0));
                    let op_36v1 = {
                        #[inline(always)]
                        pub fn check_op_36v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_36v1(op_36v1)
                    };
                    let op_9v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        check_inputs(hoff_53v1_recv, op_36v1)
                    };
                    let op_9v1 = {
                        #[inline(always)]
                        pub fn check_op_9v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_9v1(op_9v1)
                    };
                    let op_10v1 = op_9v1;
                    let op_10v1 = {
                        #[inline(always)]
                        pub fn check_op_10v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_10v1(op_10v1)
                    };
                    let op_13v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        hoff_54v1_recv
                    };
                    let op_13v1 = {
                        #[inline(always)]
                        pub fn check_op_13v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_13v1(op_13v1)
                    };
                    let op_14v1 = op_13v1;
                    let op_14v1 = {
                        #[inline(always)]
                        pub fn check_op_14v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_14v1(op_14v1)
                    };
                    let op_15v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        hoff_55v1_recv
                    };
                    let op_15v1 = {
                        #[inline(always)]
                        pub fn check_op_15v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_15v1(op_15v1)
                    };
                    let op_16v1 = op_15v1;
                    let op_16v1 = {
                        #[inline(always)]
                        pub fn check_op_16v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_16v1(op_16v1)
                    };
                    let op_39v1 = op_10v1.map(|v: (_, _)| ((v.0,), v));
                    let op_39v1 = {
                        #[inline(always)]
                        pub fn check_op_39v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_39v1(op_39v1)
                    };
                    let op_40v1 = op_14v1.map(|v: (_,)| ((v.0,), v));
                    let op_40v1 = {
                        #[inline(always)]
                        pub fn check_op_40v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_40v1(op_40v1)
                    };
                    let mut sg_6v1_node_37v1_joindata_lhs_borrow = context
                        .state_ref(sg_6v1_node_37v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_6v1_node_37v1_joindata_rhs_borrow = context
                        .state_ref(sg_6v1_node_37v1_joindata_rhs)
                        .borrow_mut();
                    let op_37v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            lhs: I1,
                            rhs: I2,
                            lhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V2,
                                V1,
                            >,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Eq + Clone,
                            V2: Eq + Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                                lhs,
                                rhs,
                                lhs_state,
                                rhs_state,
                            )
                        }
                        check_inputs(
                            op_39v1,
                            op_40v1,
                            &mut sg_6v1_node_37v1_joindata_lhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                            &mut sg_6v1_node_37v1_joindata_rhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                        )
                    };
                    let op_37v1 = {
                        #[inline(always)]
                        pub fn check_op_37v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_37v1(op_37v1)
                    };
                    let op_38v1 = op_37v1
                        .map(|kv: ((_,), ((_, _), (_,)))| (kv.1.0.0, kv.1.0.1));
                    let op_38v1 = {
                        #[inline(always)]
                        pub fn check_op_38v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_38v1(op_38v1)
                    };
                    let op_43v1 = op_38v1.map(|v: (_, _)| ((), v));
                    let op_43v1 = {
                        #[inline(always)]
                        pub fn check_op_43v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_43v1(op_43v1)
                    };
                    let op_44v1 = op_16v1.map(|v: (_,)| ((), v));
                    let op_44v1 = {
                        #[inline(always)]
                        pub fn check_op_44v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_44v1(op_44v1)
                    };
                    let mut sg_6v1_node_41v1_joindata_lhs_borrow = context
                        .state_ref(sg_6v1_node_41v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_6v1_node_41v1_joindata_rhs_borrow = context
                        .state_ref(sg_6v1_node_41v1_joindata_rhs)
                        .borrow_mut();
                    let op_41v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            lhs: I1,
                            rhs: I2,
                            lhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                                K,
                                V2,
                                V1,
                            >,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Eq + Clone,
                            V2: Eq + Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                                lhs,
                                rhs,
                                lhs_state,
                                rhs_state,
                            )
                        }
                        check_inputs(
                            op_43v1,
                            op_44v1,
                            &mut sg_6v1_node_41v1_joindata_lhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                            &mut sg_6v1_node_41v1_joindata_rhs_borrow
                                .try_insert_with(context.current_tick(), Default::default)
                                .0,
                        )
                    };
                    let op_41v1 = {
                        #[inline(always)]
                        pub fn check_op_41v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_41v1(op_41v1)
                    };
                    let op_42v1 = op_41v1
                        .map(|kv: ((), ((_, _), (_,)))| (kv.1.0.0, kv.1.0.1, kv.1.1.0));
                    let op_42v1 = {
                        #[inline(always)]
                        pub fn check_op_42v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_42v1(op_42v1)
                    };
                    let op_46v1 = op_42v1.map(|row: (_, _, _)| (row.1, row.2));
                    let op_46v1 = {
                        #[inline(always)]
                        pub fn check_op_46v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_46v1(op_46v1)
                    };
                    let op_47v1 = hydroflow::pusherator::for_each::ForEach::new(|
                        v: (_, _)|
                    async_send_clientOut(v.1, (v.0,)).unwrap());
                    let op_47v1 = {
                        #[inline(always)]
                        pub fn check_op_47v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_47v1(op_47v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_46v1, op_47v1);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(7v1)",
                2,
                var_expr!(hoff_48v1_recv),
                var_expr!(hoff_52v1_send),
                move |context, var_args!(hoff_48v1_recv), var_args!(hoff_52v1_send)| {
                    let hoff_48v1_recv = hoff_48v1_recv.take_inner().into_iter();
                    let hoff_52v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_52v1_send.give(Some(v));
                    });
                    let op_51v1 = hoff_48v1_recv;
                    let op_51v1 = {
                        #[inline(always)]
                        pub fn check_op_51v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_51v1(op_51v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_51v1, hoff_52v1_send);
                },
            );
            let mut sg_8v1_node_19v1_stream = Box::pin(voteCounts);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(8v1)",
                0,
                var_expr!(),
                var_expr!(hoff_53v1_send),
                move |context, var_args!(), var_args!(hoff_53v1_send)| {
                    let hoff_53v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_53v1_send.give(Some(v));
                    });
                    let op_19v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_8v1_node_19v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_19v1 = {
                        #[inline(always)]
                        pub fn check_op_19v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_19v1(op_19v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_19v1, hoff_53v1_send);
                },
            );
            let mut sg_9v1_node_21v1_stream = Box::pin(numReplicas);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(9v1)",
                0,
                var_expr!(),
                var_expr!(hoff_54v1_send),
                move |context, var_args!(), var_args!(hoff_54v1_send)| {
                    let hoff_54v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_54v1_send.give(Some(v));
                    });
                    let op_21v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_9v1_node_21v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_21v1 = {
                        #[inline(always)]
                        pub fn check_op_21v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_21v1(op_21v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_21v1, hoff_54v1_send);
                },
            );
            let mut sg_10v1_node_22v1_stream = Box::pin(clientAddr);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(10v1)",
                0,
                var_expr!(),
                var_expr!(hoff_55v1_send),
                move |context, var_args!(), var_args!(hoff_55v1_send)| {
                    let hoff_55v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_55v1_send.give(Some(v));
                    });
                    let op_22v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_10v1_node_22v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_22v1 = {
                        #[inline(always)]
                        pub fn check_op_22v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_22v1(op_22v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_22v1, hoff_55v1_send);
                },
            );
            df
        }
    }
}


---
source: hydroflow_datalog_core/src/lib.rs
assertion_line: 620
expression: graph.surface_syntax_string()
---
1v1 = merge ();
2v1 = tee ();
3v1 = merge ();
4v1 = tee ();
5v1 = merge ();
6v1 = tee ();
7v1 = source_stream (clientIn);
8v1 = source_stream (clientAddr);
9v1 = for_each (| v | clientOut . send (v) . unwrap ());
10v1 = join :: < 'tick > ();
11v1 = map (| kv : (() , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 1 . 0 ,));
12v1 = map (| v : (_ ,) | (() , v));
13v1 = map (| v : (_ ,) | (() , v));
14v1 = source_stream (async_receive_clientOut);
15v1 = map (| row : (_ , _ ,) | ((row . 1 ,) , (row . 0 ,)));
16v1 = group_by :: < 'tick , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 { Some (prev) } else { Some (val . 0) } ; });
17v1 = map (| (g , a) | (a . 0 . unwrap () , g . 0 ,));
18v1 = for_each (| v : (_ , _ ,) | async_send_clientOut (v . 1 , (v . 0 ,)) . unwrap ());

(1v1-->2v1);
(3v1-->4v1);
(5v1-->6v1);
(7v1-->1v1);
(8v1-->5v1);
(4v1-->9v1);
(10v1-->11v1);
(12v1-->10v1);
(2v1-->12v1);
(13v1-->10v1);
(6v1-->13v1);
(14v1-->3v1);
(17v1-->18v1);
(16v1-->17v1);
(15v1-->16v1);
(11v1-->15v1);


---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        use hydroflow::{var_expr, var_args};
        let mut df = hydroflow::scheduled::graph::Hydroflow::new();
        df.__assign_meta_graph(
            "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"merge ()\"},\"version\":1},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"source_stream (in1)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (in2)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | out . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | (row . 0 , row . 1 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | (row . 1 , row . 0 ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":1},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":12,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":13,\"version\":1},{\"idx\":7,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":13,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":7,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":14,\"version\":1}],\"version\":3}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":14,\"version\":1},{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":12,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"in1_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"in2_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"out_insert\",\"version\":1},{\"value\":\"out_insert\",\"version\":1}]}",
        );
        df.__assign_diagnostics("[]");
        let mut sg_1v1_node_10v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(in1)
        };
        let sg_1v1_node_2v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let mut sg_1v1_node_11v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(in2)
        };
        let sg_1v1_node_5v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_1v1_node_8v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(1v1)",
            0,
            var_expr!(),
            var_expr!(),
            move |context, var_args!(), var_args!()| {
                let op_10v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_1v1_node_10v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_10v1 = {
                    #[inline(always)]
                    pub fn check_op_10v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_10v1(op_10v1)
                };
                let op_2v1 = op_10v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_1v1_node_2v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_2v1 = {
                    #[inline(always)]
                    pub fn check_op_2v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_2v1(op_2v1)
                };
                let op_11v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_1v1_node_11v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_11v1 = {
                    #[inline(always)]
                    pub fn check_op_11v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_11v1(op_11v1)
                };
                let op_5v1 = op_11v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_1v1_node_5v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_5v1 = {
                    #[inline(always)]
                    pub fn check_op_5v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_5v1(op_5v1)
                };
                let op_13v1 = op_2v1.map(|row: (_, _)| (row.0, row.1));
                let op_13v1 = {
                    #[inline(always)]
                    pub fn check_op_13v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_13v1(op_13v1)
                };
                let op_14v1 = op_5v1.map(|row: (_, _)| (row.1, row.0));
                let op_14v1 = {
                    #[inline(always)]
                    pub fn check_op_14v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_14v1(op_14v1)
                };
                let op_7v1 = {
                    #[allow(unused)]
                    #[inline(always)]
                    fn check_inputs<
                        A: ::std::iter::Iterator<Item = Item>,
                        B: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                        a.chain(b)
                    }
                    check_inputs(op_13v1, op_14v1)
                };
                let op_7v1 = {
                    #[inline(always)]
                    pub fn check_op_7v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_7v1(op_7v1)
                };
                let op_8v1 = op_7v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_1v1_node_8v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_8v1 = {
                    #[inline(always)]
                    pub fn check_op_8v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_8v1(op_8v1)
                };
                let op_12v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    out.send(v).unwrap()
                });
                let op_12v1 = {
                    #[inline(always)]
                    pub fn check_op_12v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_12v1(op_12v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_8v1, op_12v1);
            },
        );
        df
    }
}


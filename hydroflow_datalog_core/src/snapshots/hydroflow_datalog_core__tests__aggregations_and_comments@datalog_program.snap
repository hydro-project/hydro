---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        use hydroflow::{var_expr, var_args};
        let mut df = hydroflow::scheduled::graph::Hydroflow::new();
        df.__assign_meta_graph(
            "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"merge ()\"},\"version\":1},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"source_stream (ints)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result2 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 1 ,) , ((row . 0) ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"group_by :: < 'tick , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some ({ let prev : (hydroflow :: rustc_hash :: FxHashSet < _ > , _) = prev ; let mut set : hydroflow :: rustc_hash :: FxHashSet :: < _ > = prev . 0 ; if set . insert (val . 0) { (set , prev . 1 + 1) } else { (set , prev . 1) } }) } else { Some ({ let mut set = hydroflow :: rustc_hash :: FxHashSet :: < _ > :: default () ; set . insert (val . 0) ; (set , 1) }) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) | (a . 0 . unwrap () . 1 , g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 1 ,) , (row . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"group_by :: < 'tick , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some (prev + val . 0) } else { Some (val . 0) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) | (a . 0 . unwrap () , g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"next_tick ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 1 ,) , (row . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"group_by :: < 'tick , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some (prev) } else { Some (val . 0) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) | (a . 0 . unwrap () , g . 0 ,))\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":1},{\"value\":{\"Operator\":\"identity ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":3},{\"idx\":24,\"version\":1}],\"version\":5},{\"value\":[{\"idx\":22,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":3},{\"idx\":14,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":1,\"version\":3},{\"idx\":17,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":12,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":15,\"version\":1},{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":15,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":13,\"version\":1},{\"idx\":9,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":13,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":19,\"version\":1},{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":6,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":17,\"version\":1},{\"idx\":7,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":16,\"version\":1},{\"idx\":1,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":16,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":3},{\"idx\":18,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":22,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":20,\"version\":1},{\"idx\":23,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":20,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":23,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":25,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":25,\"version\":1},{\"idx\":19,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"2\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":6,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":15,\"version\":1},{\"idx\":19,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":22,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":12,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":18,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":16,\"version\":1},{\"idx\":20,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":24,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":0,\"version\":1},{\"value\":2,\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints_insert\",\"version\":1},{\"value\":\"ints\",\"version\":1},{\"value\":\"result_insert\",\"version\":1},{\"value\":\"result_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result2_insert\",\"version\":1}]}",
        );
        df.__assign_diagnostics("[]");
        let (hoff_1v3_send, hoff_1v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(1v3)");
        let (hoff_6v3_send, hoff_6v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(6v3)");
        let (hoff_7v3_send, hoff_7v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(7v3)");
        let (hoff_9v3_send, hoff_9v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(9v3)");
        let (hoff_23v1_send, hoff_23v1_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(23v1)");
        let (hoff_25v1_send, hoff_25v1_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(25v1)");
        let mut sg_5v1_node_10v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints)
        };
        let sg_5v1_node_2v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(5v1)",
            0,
            var_expr!(),
            var_expr!(hoff_1v3_send, hoff_9v3_send, hoff_23v1_send),
            move |
                context,
                var_args!(),
                var_args!(hoff_1v3_send, hoff_9v3_send, hoff_23v1_send)|
            {
                let hoff_1v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_1v3_send.give(Some(v));
                });
                let hoff_9v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_9v3_send.give(Some(v));
                });
                let hoff_23v1_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_23v1_send.give(Some(v));
                });
                let op_10v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_5v1_node_10v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_10v1 = {
                    #[inline(always)]
                    pub fn check_op_10v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_10v1(op_10v1)
                };
                let op_2v1 = op_10v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_5v1_node_2v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_2v1 = {
                    #[inline(always)]
                    pub fn check_op_2v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_2v1(op_2v1)
                };
                let op_20v1 = hydroflow::pusherator::map::Map::new(
                    |row: (_, _)| ((row.1,), (row.0,)),
                    hoff_23v1_send,
                );
                let op_20v1 = {
                    #[inline(always)]
                    pub fn check_op_20v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_20v1(op_20v1)
                };
                let op_16v1 = hydroflow::pusherator::map::Map::new(
                    |row: (_, _)| ((row.1,), (row.0,)),
                    hoff_1v3_send,
                );
                let op_16v1 = {
                    #[inline(always)]
                    pub fn check_op_16v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_16v1(op_16v1)
                };
                let op_13v1 = hydroflow::pusherator::map::Map::new(
                    |row: (_, _)| ((row.1,), ((row.0),)),
                    hoff_9v3_send,
                );
                let op_13v1 = {
                    #[inline(always)]
                    pub fn check_op_13v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_13v1(op_13v1)
                };
                let op_3v1 = hydroflow::pusherator::tee::Tee::new(
                    op_13v1,
                    hydroflow::pusherator::tee::Tee::new(op_16v1, op_20v1),
                );
                let op_3v1 = {
                    #[inline(always)]
                    pub fn check_op_3v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_3v1(op_3v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_2v1, op_3v1);
            },
        );
        let sg_1v1_node_5v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(1v1)",
            1,
            var_expr!(hoff_9v3_recv, hoff_25v1_recv),
            var_expr!(),
            move |context, var_args!(hoff_9v3_recv, hoff_25v1_recv), var_args!()| {
                let mut hoff_9v3_recv = hoff_9v3_recv.borrow_mut_swap();
                let hoff_9v3_recv = hoff_9v3_recv.drain(..);
                let mut hoff_25v1_recv = hoff_25v1_recv.borrow_mut_swap();
                let hoff_25v1_recv = hoff_25v1_recv.drain(..);
                let op_14v1 = {
                    #[inline(always)]
                    fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                        iter
                    }
                    check_input(hoff_9v3_recv)
                        .fold(
                            hydroflow::rustc_hash::FxHashMap::<
                                (_,),
                                (Option<_>,),
                            >::default(),
                            |mut ht, kv| {
                                let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                #[allow(clippy::redundant_closure_call)]
                                (|old: &mut (Option<_>,), val: (_,)| {
                                    old
                                        .0 = if let Some(prev) = old.0.take() {
                                        Some({
                                            let prev: (hydroflow::rustc_hash::FxHashSet<_>, _) = prev;
                                            let mut set: hydroflow::rustc_hash::FxHashSet::<_> = prev.0;
                                            if set.insert(val.0) {
                                                (set, prev.1 + 1)
                                            } else {
                                                (set, prev.1)
                                            }
                                        })
                                    } else {
                                        Some({
                                            let mut set = hydroflow::rustc_hash::FxHashSet::<
                                                _,
                                            >::default();
                                            set.insert(val.0);
                                            (set, 1)
                                        })
                                    };
                                })(entry, kv.1);
                                ht
                            },
                        )
                        .into_iter()
                };
                let op_14v1 = {
                    #[inline(always)]
                    pub fn check_op_14v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_14v1(op_14v1)
                };
                let op_15v1 = op_14v1.map(|(g, a)| (a.0.unwrap().1, g.0));
                let op_15v1 = {
                    #[inline(always)]
                    pub fn check_op_15v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_15v1(op_15v1)
                };
                let op_19v1 = {
                    fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        iter
                    }
                    check_input::<_, _>(hoff_25v1_recv)
                };
                let op_19v1 = {
                    #[inline(always)]
                    pub fn check_op_19v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_19v1(op_19v1)
                };
                let op_4v1 = {
                    #[allow(unused)]
                    #[inline(always)]
                    fn check_inputs<
                        A: ::std::iter::Iterator<Item = Item>,
                        B: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                        a.chain(b)
                    }
                    check_inputs(op_15v1, op_19v1)
                };
                let op_4v1 = {
                    #[inline(always)]
                    pub fn check_op_4v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_4v1(op_4v1)
                };
                let op_5v1 = op_4v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_1v1_node_5v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_5v1 = {
                    #[inline(always)]
                    pub fn check_op_5v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_5v1(op_5v1)
                };
                let op_11v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result.send(v).unwrap()
                });
                let op_11v1 = {
                    #[inline(always)]
                    pub fn check_op_11v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_11v1(op_11v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_5v1, op_11v1);
            },
        );
        let sg_2v1_node_8v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(2v1)",
            1,
            var_expr!(hoff_23v1_recv),
            var_expr!(),
            move |context, var_args!(hoff_23v1_recv), var_args!()| {
                let mut hoff_23v1_recv = hoff_23v1_recv.borrow_mut_swap();
                let hoff_23v1_recv = hoff_23v1_recv.drain(..);
                let op_21v1 = {
                    #[inline(always)]
                    fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                        iter
                    }
                    check_input(hoff_23v1_recv)
                        .fold(
                            hydroflow::rustc_hash::FxHashMap::<
                                (_,),
                                (Option<_>,),
                            >::default(),
                            |mut ht, kv| {
                                let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                #[allow(clippy::redundant_closure_call)]
                                (|old: &mut (Option<_>,), val: (_,)| {
                                    old
                                        .0 = if let Some(prev) = old.0.take() {
                                        Some(prev)
                                    } else {
                                        Some(val.0)
                                    };
                                })(entry, kv.1);
                                ht
                            },
                        )
                        .into_iter()
                };
                let op_21v1 = {
                    #[inline(always)]
                    pub fn check_op_21v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_21v1(op_21v1)
                };
                let op_22v1 = op_21v1.map(|(g, a)| (a.0.unwrap(), g.0));
                let op_22v1 = {
                    #[inline(always)]
                    pub fn check_op_22v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_22v1(op_22v1)
                };
                let op_8v1 = op_22v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_2v1_node_8v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_8v1 = {
                    #[inline(always)]
                    pub fn check_op_8v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_8v1(op_8v1)
                };
                let op_12v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result2.send(v).unwrap()
                });
                let op_12v1 = {
                    #[inline(always)]
                    pub fn check_op_12v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_12v1(op_12v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_8v1, op_12v1);
            },
        );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(3v1)",
            1,
            var_expr!(hoff_1v3_recv),
            var_expr!(hoff_7v3_send),
            move |context, var_args!(hoff_1v3_recv), var_args!(hoff_7v3_send)| {
                let mut hoff_1v3_recv = hoff_1v3_recv.borrow_mut_swap();
                let hoff_1v3_recv = hoff_1v3_recv.drain(..);
                let hoff_7v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_7v3_send.give(Some(v));
                });
                let op_17v1 = {
                    #[inline(always)]
                    fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                        iter
                    }
                    check_input(hoff_1v3_recv)
                        .fold(
                            hydroflow::rustc_hash::FxHashMap::<
                                (_,),
                                (Option<_>,),
                            >::default(),
                            |mut ht, kv| {
                                let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                #[allow(clippy::redundant_closure_call)]
                                (|old: &mut (Option<_>,), val: (_,)| {
                                    old
                                        .0 = if let Some(prev) = old.0.take() {
                                        Some(prev + val.0)
                                    } else {
                                        Some(val.0)
                                    };
                                })(entry, kv.1);
                                ht
                            },
                        )
                        .into_iter()
                };
                let op_17v1 = {
                    #[inline(always)]
                    pub fn check_op_17v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_17v1(op_17v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_17v1, hoff_7v3_send);
            },
        );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(4v1)",
            1,
            var_expr!(hoff_7v3_recv),
            var_expr!(hoff_6v3_send),
            move |context, var_args!(hoff_7v3_recv), var_args!(hoff_6v3_send)| {
                let mut hoff_7v3_recv = hoff_7v3_recv.borrow_mut_swap();
                let hoff_7v3_recv = hoff_7v3_recv.drain(..);
                let hoff_6v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_6v3_send.give(Some(v));
                });
                let op_18v1 = hoff_7v3_recv.map(|(g, a)| (a.0.unwrap(), g.0));
                let op_18v1 = {
                    #[inline(always)]
                    pub fn check_op_18v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_18v1(op_18v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_18v1, hoff_6v3_send);
            },
        );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(6v1)",
            2,
            var_expr!(hoff_6v3_recv),
            var_expr!(hoff_25v1_send),
            move |context, var_args!(hoff_6v3_recv), var_args!(hoff_25v1_send)| {
                let mut hoff_6v3_recv = hoff_6v3_recv.borrow_mut_swap();
                let hoff_6v3_recv = hoff_6v3_recv.drain(..);
                let hoff_25v1_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_25v1_send.give(Some(v));
                });
                let op_24v1 = {
                    fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        iter
                    }
                    check_input::<_, _>(hoff_6v3_recv)
                };
                let op_24v1 = {
                    #[inline(always)]
                    pub fn check_op_24v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_24v1(op_24v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_24v1, hoff_25v1_send);
            },
        );
        df
    }
}


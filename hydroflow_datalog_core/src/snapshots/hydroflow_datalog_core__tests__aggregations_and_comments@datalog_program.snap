---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        {
            use hydroflow::{var_expr, var_args};
            let mut df = hydroflow::scheduled::graph::Hydroflow::new_with_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"merge()\",\"version\":1},{\"value\":\"unique::<'tick>()\",\"version\":1},{\"value\":\"tee()\",\"version\":1},{\"value\":\"merge()\",\"version\":1},{\"value\":\"unique::<'tick>()\",\"version\":1},{\"value\":\"tee()\",\"version\":1},{\"value\":\"merge()\",\"version\":1},{\"value\":\"unique::<'tick>()\",\"version\":1},{\"value\":\"tee()\",\"version\":1},{\"value\":\"source_stream(ints)\",\"version\":1},{\"value\":\"for_each(|v| result.send(v).unwrap())\",\"version\":1},{\"value\":\"for_each(|v| result2.send(v).unwrap())\",\"version\":1},{\"value\":\"map(|row: (_, _)| ((row.1,), (row.0,)))\",\"version\":1},{\"value\":\"group_by::<'tick,(_,),(Option<_>,),>(|| (None,),|old: &mut (Option<_>,), val: (_,)| {old.0 = if let Some(prev) = old.0 { Some(prev + 1) } else { Some(1) };},)\",\"version\":1},{\"value\":\"map(|(g, a)| (a.0.unwrap(), g.0))\",\"version\":1},{\"value\":\"map(|row: (_, _)| ((row.1,), (row.0,)))\",\"version\":1},{\"value\":\"group_by::<'tick,(_,),(Option<_>,),>(|| (None,),|old: &mut (Option<_>,), val: (_,)| {old.0 = if let Some(prev) = old.0 {Some(prev + val.0)} else {Some(val.0)};},)\",\"version\":1},{\"value\":\"map(|(g, a)| (a.0.unwrap(), g.0))\",\"version\":1},{\"value\":\"next_tick()\",\"version\":1},{\"value\":\"map(|row: (_, _)| ((row.1,), (row.0,)))\",\"version\":1},{\"value\":\"group_by::<'tick,(_,),(Option<_>,),>(|| (None,),|old: &mut (Option<_>,), val: (_,)| {old.0 = if let Some(prev) = old.0 { Some(prev) } else { Some(val.0) };},)\",\"version\":1},{\"value\":\"map(|(g, a)| (a.0.unwrap(), g.0))\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"handoff\",\"version\":1},{\"value\":\"identity()\",\"version\":1},{\"value\":\"handoff\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":1,\"version\":1},\"dst\":{\"idx\":2,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":2,\"version\":1},\"dst\":{\"idx\":3,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":3,\"version\":1},\"dst\":{\"idx\":13,\"version\":1},\"blocking\":false,\"label\":\"0\"},{\"src\":{\"idx\":3,\"version\":1},\"dst\":{\"idx\":16,\"version\":1},\"blocking\":false,\"label\":\"1\"},{\"src\":{\"idx\":3,\"version\":1},\"dst\":{\"idx\":20,\"version\":1},\"blocking\":false,\"label\":\"2\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":4,\"version\":1},\"dst\":{\"idx\":5,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":5,\"version\":1},\"dst\":{\"idx\":6,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":6,\"version\":1},\"dst\":{\"idx\":11,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":7,\"version\":1},\"dst\":{\"idx\":8,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":8,\"version\":1},\"dst\":{\"idx\":9,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":9,\"version\":1},\"dst\":{\"idx\":12,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":10,\"version\":1},\"dst\":{\"idx\":1,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":[{\"src\":{\"idx\":13,\"version\":1},\"dst\":{\"idx\":23,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":14,\"version\":1},\"dst\":{\"idx\":15,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":15,\"version\":1},\"dst\":{\"idx\":4,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":16,\"version\":1},\"dst\":{\"idx\":26,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":17,\"version\":1},\"dst\":{\"idx\":25,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":18,\"version\":1},\"dst\":{\"idx\":24,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":19,\"version\":1},\"dst\":{\"idx\":4,\"version\":1},\"blocking\":false,\"label\":\"1\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":20,\"version\":1},\"dst\":{\"idx\":27,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":21,\"version\":1},\"dst\":{\"idx\":22,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":22,\"version\":1},\"dst\":{\"idx\":7,\"version\":1},\"blocking\":false,\"label\":\"0\"}],\"version\":1},{\"value\":[{\"src\":{\"idx\":23,\"version\":1},\"dst\":{\"idx\":14,\"version\":1},\"blocking\":true,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":24,\"version\":1},\"dst\":{\"idx\":28,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":25,\"version\":1},\"dst\":{\"idx\":18,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":26,\"version\":1},\"dst\":{\"idx\":17,\"version\":1},\"blocking\":true,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":27,\"version\":1},\"dst\":{\"idx\":21,\"version\":1},\"blocking\":true,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":28,\"version\":1},\"dst\":{\"idx\":29,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1},{\"value\":[{\"src\":{\"idx\":29,\"version\":1},\"dst\":{\"idx\":19,\"version\":1},\"blocking\":false,\"label\":null}],\"version\":1}],\"barrier_handoffs\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1},{\"value\":null,\"version\":0},{\"value\":true,\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":15,\"version\":1},{\"idx\":19,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":22,\"version\":1},{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":12,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":18,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":16,\"version\":1},{\"idx\":20,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":28,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":0,\"version\":1},{\"value\":2,\"version\":1}],\"subgraph_internal_handoffs\":[{\"value\":null,\"version\":0}],\"varname_nodes\":{\"ints\":[{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"result\":[{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1}],\"result2\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":9,\"version\":1}]}}\n",
            );
            let (hoff_23v1_send, hoff_23v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(23v1)");
            let (hoff_24v1_send, hoff_24v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(24v1)");
            let (hoff_25v1_send, hoff_25v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(25v1)");
            let (hoff_26v1_send, hoff_26v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(26v1)");
            let (hoff_27v1_send, hoff_27v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(27v1)");
            let (hoff_29v1_send, hoff_29v1_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(29v1)");
            let sg_1v1_node_5v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::<
                            _,
                            ::std::collections::HashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                1,
                var_expr!(hoff_23v1_recv, hoff_29v1_recv),
                var_expr!(),
                move |context, var_args!(hoff_23v1_recv, hoff_29v1_recv), var_args!()| {
                    let hoff_23v1_recv = hoff_23v1_recv.take_inner().into_iter();
                    let hoff_29v1_recv = hoff_29v1_recv.take_inner().into_iter();
                    let op_14v1 = {
                        #[inline(always)]
                        fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                            iter
                        }
                        check_input(hoff_23v1_recv)
                            .fold(
                                ::std::collections::HashMap::<(_,), (Option<_>,)>::new(),
                                |mut ht, kv| {
                                    let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                    #[allow(clippy::redundant_closure_call)]
                                    (|old: &mut (Option<_>,), val: (_,)| {
                                        old
                                            .0 = if let Some(prev) = old.0 {
                                            Some(prev + 1)
                                        } else {
                                            Some(1)
                                        };
                                    })(entry, kv.1);
                                    ht
                                },
                            )
                            .into_iter()
                    };
                    let op_14v1 = {
                        #[inline(always)]
                        pub fn check_op_14v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_14v1(op_14v1)
                    };
                    let op_15v1 = op_14v1.map(|(g, a)| (a.0.unwrap(), g.0));
                    let op_15v1 = {
                        #[inline(always)]
                        pub fn check_op_15v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_15v1(op_15v1)
                    };
                    let op_19v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_29v1_recv)
                    };
                    let op_19v1 = {
                        #[inline(always)]
                        pub fn check_op_19v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_19v1(op_19v1)
                    };
                    let op_4v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        check_inputs(op_15v1, op_19v1)
                    };
                    let op_4v1 = {
                        #[inline(always)]
                        pub fn check_op_4v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_4v1(op_4v1)
                    };
                    let op_5v1 = op_4v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_1v1_node_5v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .try_insert_with(
                                    (context.current_tick(), context.current_stratum()),
                                    ::std::collections::HashSet::new,
                                );
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_5v1 = {
                        #[inline(always)]
                        pub fn check_op_5v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_5v1(op_5v1)
                    };
                    let op_6v1 = op_5v1;
                    let op_6v1 = {
                        #[inline(always)]
                        pub fn check_op_6v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_6v1(op_6v1)
                    };
                    let op_11v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        result.send(v).unwrap()
                    });
                    let op_11v1 = {
                        #[inline(always)]
                        pub fn check_op_11v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_11v1(op_11v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_6v1, op_11v1);
                },
            );
            let sg_2v1_node_8v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::<
                            _,
                            ::std::collections::HashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                1,
                var_expr!(hoff_27v1_recv),
                var_expr!(),
                move |context, var_args!(hoff_27v1_recv), var_args!()| {
                    let hoff_27v1_recv = hoff_27v1_recv.take_inner().into_iter();
                    let op_21v1 = {
                        #[inline(always)]
                        fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                            iter
                        }
                        check_input(hoff_27v1_recv)
                            .fold(
                                ::std::collections::HashMap::<(_,), (Option<_>,)>::new(),
                                |mut ht, kv| {
                                    let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                    #[allow(clippy::redundant_closure_call)]
                                    (|old: &mut (Option<_>,), val: (_,)| {
                                        old
                                            .0 = if let Some(prev) = old.0 {
                                            Some(prev)
                                        } else {
                                            Some(val.0)
                                        };
                                    })(entry, kv.1);
                                    ht
                                },
                            )
                            .into_iter()
                    };
                    let op_21v1 = {
                        #[inline(always)]
                        pub fn check_op_21v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_21v1(op_21v1)
                    };
                    let op_22v1 = op_21v1.map(|(g, a)| (a.0.unwrap(), g.0));
                    let op_22v1 = {
                        #[inline(always)]
                        pub fn check_op_22v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_22v1(op_22v1)
                    };
                    let op_7v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_22v1
                    };
                    let op_7v1 = {
                        #[inline(always)]
                        pub fn check_op_7v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_7v1(op_7v1)
                    };
                    let op_8v1 = op_7v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_2v1_node_8v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .try_insert_with(
                                    (context.current_tick(), context.current_stratum()),
                                    ::std::collections::HashSet::new,
                                );
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_8v1 = {
                        #[inline(always)]
                        pub fn check_op_8v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_8v1(op_8v1)
                    };
                    let op_9v1 = op_8v1;
                    let op_9v1 = {
                        #[inline(always)]
                        pub fn check_op_9v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_9v1(op_9v1)
                    };
                    let op_12v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        result2.send(v).unwrap()
                    });
                    let op_12v1 = {
                        #[inline(always)]
                        pub fn check_op_12v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_12v1(op_12v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_9v1, op_12v1);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(3v1)",
                1,
                var_expr!(hoff_26v1_recv),
                var_expr!(hoff_25v1_send),
                move |context, var_args!(hoff_26v1_recv), var_args!(hoff_25v1_send)| {
                    let hoff_26v1_recv = hoff_26v1_recv.take_inner().into_iter();
                    let hoff_25v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_25v1_send.give(Some(v));
                    });
                    let op_17v1 = {
                        #[inline(always)]
                        fn check_input<Iter: ::std::iter::Iterator<Item = (A, B)>, A, B>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = (A, B)> {
                            iter
                        }
                        check_input(hoff_26v1_recv)
                            .fold(
                                ::std::collections::HashMap::<(_,), (Option<_>,)>::new(),
                                |mut ht, kv| {
                                    let entry = ht.entry(kv.0).or_insert_with(|| (None,));
                                    #[allow(clippy::redundant_closure_call)]
                                    (|old: &mut (Option<_>,), val: (_,)| {
                                        old
                                            .0 = if let Some(prev) = old.0 {
                                            Some(prev + val.0)
                                        } else {
                                            Some(val.0)
                                        };
                                    })(entry, kv.1);
                                    ht
                                },
                            )
                            .into_iter()
                    };
                    let op_17v1 = {
                        #[inline(always)]
                        pub fn check_op_17v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_17v1(op_17v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_17v1, hoff_25v1_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(4v1)",
                1,
                var_expr!(hoff_25v1_recv),
                var_expr!(hoff_24v1_send),
                move |context, var_args!(hoff_25v1_recv), var_args!(hoff_24v1_send)| {
                    let hoff_25v1_recv = hoff_25v1_recv.take_inner().into_iter();
                    let hoff_24v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_24v1_send.give(Some(v));
                    });
                    let op_18v1 = hoff_25v1_recv.map(|(g, a)| (a.0.unwrap(), g.0));
                    let op_18v1 = {
                        #[inline(always)]
                        pub fn check_op_18v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_18v1(op_18v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_18v1, hoff_24v1_send);
                },
            );
            let mut sg_5v1_node_10v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: hydroflow::futures::stream::Stream<Item = Item>,
                    Item,
                >(
                    stream: Stream,
                ) -> ::std::pin::Pin<
                    ::std::boxed::Box<
                        impl hydroflow::futures::stream::Stream<Item = Item>,
                    >,
                > {
                    ::std::boxed::Box::pin(stream)
                }
                check_stream(ints)
            };
            let sg_5v1_node_2v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::lang::monotonic_map::MonotonicMap::<
                            _,
                            ::std::collections::HashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(5v1)",
                0,
                var_expr!(),
                var_expr!(hoff_23v1_send, hoff_26v1_send, hoff_27v1_send),
                move |
                    context,
                    var_args!(),
                    var_args!(hoff_23v1_send, hoff_26v1_send, hoff_27v1_send)|
                {
                    let hoff_23v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_23v1_send.give(Some(v));
                    });
                    let hoff_26v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_26v1_send.give(Some(v));
                    });
                    let hoff_27v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_27v1_send.give(Some(v));
                    });
                    let op_10v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_5v1_node_10v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_10v1 = {
                        #[inline(always)]
                        pub fn check_op_10v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_10v1(op_10v1)
                    };
                    let op_1v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_10v1
                    };
                    let op_1v1 = {
                        #[inline(always)]
                        pub fn check_op_1v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_1v1(op_1v1)
                    };
                    let op_2v1 = op_1v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_5v1_node_2v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .try_insert_with(
                                    (context.current_tick(), context.current_stratum()),
                                    ::std::collections::HashSet::new,
                                );
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_2v1 = {
                        #[inline(always)]
                        pub fn check_op_2v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_2v1(op_2v1)
                    };
                    let op_20v1 = hydroflow::pusherator::map::Map::new(
                        |row: (_, _)| ((row.1,), (row.0,)),
                        hoff_27v1_send,
                    );
                    let op_20v1 = {
                        #[inline(always)]
                        pub fn check_op_20v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_20v1(op_20v1)
                    };
                    let op_16v1 = hydroflow::pusherator::map::Map::new(
                        |row: (_, _)| ((row.1,), (row.0,)),
                        hoff_26v1_send,
                    );
                    let op_16v1 = {
                        #[inline(always)]
                        pub fn check_op_16v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_16v1(op_16v1)
                    };
                    let op_13v1 = hydroflow::pusherator::map::Map::new(
                        |row: (_, _)| ((row.1,), (row.0,)),
                        hoff_23v1_send,
                    );
                    let op_13v1 = {
                        #[inline(always)]
                        pub fn check_op_13v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_13v1(op_13v1)
                    };
                    let op_3v1 = hydroflow::pusherator::tee::Tee::new(
                        op_13v1,
                        hydroflow::pusherator::tee::Tee::new(op_16v1, op_20v1),
                    );
                    let op_3v1 = {
                        #[inline(always)]
                        pub fn check_op_3v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_3v1(op_3v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_2v1, op_3v1);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(6v1)",
                2,
                var_expr!(hoff_24v1_recv),
                var_expr!(hoff_29v1_send),
                move |context, var_args!(hoff_24v1_recv), var_args!(hoff_29v1_send)| {
                    let hoff_24v1_recv = hoff_24v1_recv.take_inner().into_iter();
                    let hoff_29v1_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_29v1_send.give(Some(v));
                    });
                    let op_28v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_24v1_recv)
                    };
                    let op_28v1 = {
                        #[inline(always)]
                        pub fn check_op_28v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_28v1(op_28v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_28v1, hoff_29v1_send);
                },
            );
            df
        }
    }
}


---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        use hydroflow::{var_expr, var_args};
        let mut df = hydroflow::scheduled::graph::Hydroflow::new();
        df.__assign_meta_graph(
            "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"source_stream (ints1)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints2)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints3)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result2 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'static , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : (() , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 1 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'static , 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : (() , ((_ , _ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 , kv . 1 . 1 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | (() , (_v . 0 , _v . 1 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ , _ ,) | (row . 0 , row . 1 , row . 2 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"anti_join ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : ((_ ,) , ()) | (kv . 0 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist ()\"},\"version\":1},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | ((_v . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"persist ()\"},\"version\":1},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (_v . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | (row . 0 ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":16,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":3},{\"idx\":32,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":12,\"version\":3},{\"idx\":24,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":29,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":15,\"version\":3},{\"idx\":23,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":38,\"version\":1},{\"idx\":14,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":19,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":20,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":22,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":23,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":15,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1},{\"idx\":12,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":25,\"version\":1},{\"idx\":26,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":27,\"version\":1},{\"idx\":25,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":22,\"version\":1},{\"idx\":27,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":28,\"version\":1},{\"idx\":25,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":28,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":26,\"version\":1},{\"idx\":29,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":30,\"version\":1},{\"idx\":31,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":34,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":33,\"version\":1},{\"idx\":34,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":32,\"version\":1},{\"idx\":33,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":9,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":37,\"version\":1},{\"idx\":13,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":36,\"version\":1},{\"idx\":37,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":35,\"version\":1},{\"idx\":36,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1},{\"idx\":35,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":13,\"version\":3},{\"idx\":30,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":31,\"version\":1},{\"idx\":38,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":16,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":23,\"version\":1},{\"idx\":24,\"version\":1},{\"idx\":21,\"version\":1},{\"idx\":22,\"version\":1},{\"idx\":27,\"version\":1},{\"idx\":28,\"version\":1},{\"idx\":25,\"version\":1},{\"idx\":26,\"version\":1},{\"idx\":29,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":19,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":32,\"version\":1},{\"idx\":33,\"version\":1},{\"idx\":34,\"version\":1},{\"idx\":30,\"version\":1},{\"idx\":31,\"version\":1},{\"idx\":38,\"version\":1},{\"idx\":14,\"version\":1},{\"idx\":20,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":35,\"version\":1},{\"idx\":36,\"version\":1},{\"idx\":37,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":1,\"version\":1},{\"value\":0,\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints1\",\"version\":1},{\"value\":\"ints1\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"ints2\",\"version\":1},{\"value\":\"ints2\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"ints3\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result2\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_0\",\"version\":1},{\"value\":\"join_0\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_1\",\"version\":1},{\"value\":\"join_1\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_2\",\"version\":1},{\"value\":\"join_2\",\"version\":1}]}",
        );
        df.__assign_diagnostics("[]");
        let (hoff_9v3_send, hoff_9v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(9v3)");
        let (hoff_12v3_send, hoff_12v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(12v3)");
        let (hoff_13v3_send, hoff_13v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(13v3)");
        let (hoff_15v3_send, hoff_15v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(15v3)");
        let mut sg_1v1_node_16v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints1)
        };
        let sg_1v1_node_2v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(1v1)",
            0,
            var_expr!(),
            var_expr!(hoff_9v3_send, hoff_15v3_send),
            move |context, var_args!(), var_args!(hoff_9v3_send, hoff_15v3_send)| {
                let hoff_9v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_9v3_send.give(Some(v));
                });
                let hoff_15v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_15v3_send.give(Some(v));
                });
                let op_16v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_1v1_node_16v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_16v1 = {
                    #[inline(always)]
                    pub fn check_op_16v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_16v1(op_16v1)
                };
                let op_2v1 = op_16v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_1v1_node_2v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_2v1 = {
                    #[inline(always)]
                    pub fn check_op_2v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_2v1(op_2v1)
                };
                let op_3v1 = hydroflow::pusherator::tee::Tee::new(
                    hoff_15v3_send,
                    hoff_9v3_send,
                );
                let op_3v1 = {
                    #[inline(always)]
                    pub fn check_op_3v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_3v1(op_3v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_2v1, op_3v1);
            },
        );
        let mut sg_2v1_node_18v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints3)
        };
        let sg_2v1_node_8v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        let sg_2v1_node_21v1_joindata_lhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::compiled::pull::HalfJoinState::default(),
                ),
            );
        let sg_2v1_node_21v1_joindata_rhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::compiled::pull::HalfJoinState::default(),
                ),
            );
        let sg_2v1_node_25v1_joindata_lhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::compiled::pull::HalfJoinState::default(),
                ),
            );
        let sg_2v1_node_25v1_joindata_rhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                        hydroflow::lang::clear::ClearDefault(
                            hydroflow::compiled::pull::HalfJoinState::default(),
                        ),
                    ),
                ),
            );
        let sg_2v1_node_11v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(2v1)",
            0,
            var_expr!(hoff_12v3_recv, hoff_15v3_recv),
            var_expr!(),
            move |context, var_args!(hoff_12v3_recv, hoff_15v3_recv), var_args!()| {
                let mut hoff_12v3_recv = hoff_12v3_recv.borrow_mut_swap();
                let hoff_12v3_recv = hoff_12v3_recv.drain(..);
                let mut hoff_15v3_recv = hoff_15v3_recv.borrow_mut_swap();
                let hoff_15v3_recv = hoff_15v3_recv.drain(..);
                let op_18v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_2v1_node_18v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_18v1 = {
                    #[inline(always)]
                    pub fn check_op_18v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_18v1(op_18v1)
                };
                let op_8v1 = op_18v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_2v1_node_8v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_8v1 = {
                    #[inline(always)]
                    pub fn check_op_8v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_8v1(op_8v1)
                };
                let op_23v1 = hoff_15v3_recv.map(|_v: (_,)| ((), (_v.0,)));
                let op_23v1 = {
                    #[inline(always)]
                    pub fn check_op_23v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_23v1(op_23v1)
                };
                let op_24v1 = hoff_12v3_recv.map(|_v: (_,)| ((), (_v.0,)));
                let op_24v1 = {
                    #[inline(always)]
                    pub fn check_op_24v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_24v1(op_24v1)
                };
                let mut sg_2v1_node_21v1_joindata_lhs_borrow = context
                    .state_ref(sg_2v1_node_21v1_joindata_lhs)
                    .borrow_mut();
                let mut sg_2v1_node_21v1_joindata_rhs_borrow = context
                    .state_ref(sg_2v1_node_21v1_joindata_rhs)
                    .borrow_mut();
                let op_21v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V1, I2, V2>(
                        lhs: I1,
                        rhs: I2,
                        lhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                            K,
                            V1,
                            V2,
                        >,
                        rhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                            K,
                            V2,
                            V1,
                        >,
                    ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                    where
                        K: Eq + std::hash::Hash + Clone,
                        V1: Eq + Clone,
                        V2: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V1)>,
                        I2: 'a + Iterator<Item = (K, V2)>,
                    {
                        hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                            lhs,
                            rhs,
                            lhs_state,
                            rhs_state,
                        )
                    }
                    check_inputs(
                        op_23v1,
                        op_24v1,
                        &mut sg_2v1_node_21v1_joindata_lhs_borrow,
                        &mut sg_2v1_node_21v1_joindata_rhs_borrow,
                    )
                };
                let op_21v1 = {
                    #[inline(always)]
                    pub fn check_op_21v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_21v1(op_21v1)
                };
                let op_22v1 = op_21v1.map(|kv: ((), ((_,), (_,)))| (kv.1.0.0, kv.1.1.0));
                let op_22v1 = {
                    #[inline(always)]
                    pub fn check_op_22v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_22v1(op_22v1)
                };
                let op_27v1 = op_22v1.map(|_v: (_, _)| ((), (_v.0, _v.1)));
                let op_27v1 = {
                    #[inline(always)]
                    pub fn check_op_27v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_27v1(op_27v1)
                };
                let op_28v1 = op_8v1.map(|_v: (_,)| ((), (_v.0,)));
                let op_28v1 = {
                    #[inline(always)]
                    pub fn check_op_28v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_28v1(op_28v1)
                };
                let mut sg_2v1_node_25v1_joindata_lhs_borrow = context
                    .state_ref(sg_2v1_node_25v1_joindata_lhs)
                    .borrow_mut();
                let mut sg_2v1_node_25v1_joindata_rhs_borrow = context
                    .state_ref(sg_2v1_node_25v1_joindata_rhs)
                    .borrow_mut();
                let op_25v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V1, I2, V2>(
                        lhs: I1,
                        rhs: I2,
                        lhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                            K,
                            V1,
                            V2,
                        >,
                        rhs_state: &'a mut hydroflow::compiled::pull::HalfJoinState<
                            K,
                            V2,
                            V1,
                        >,
                    ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                    where
                        K: Eq + std::hash::Hash + Clone,
                        V1: Eq + Clone,
                        V2: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V1)>,
                        I2: 'a + Iterator<Item = (K, V2)>,
                    {
                        hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                            lhs,
                            rhs,
                            lhs_state,
                            rhs_state,
                        )
                    }
                    check_inputs(
                        op_27v1,
                        op_28v1,
                        &mut sg_2v1_node_25v1_joindata_lhs_borrow,
                        &mut sg_2v1_node_25v1_joindata_rhs_borrow
                            .try_insert_with(context.current_tick(), Default::default)
                            .0,
                    )
                };
                let op_25v1 = {
                    #[inline(always)]
                    pub fn check_op_25v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_25v1(op_25v1)
                };
                let op_26v1 = op_25v1
                    .map(|kv: ((), ((_, _), (_,)))| (kv.1.0.0, kv.1.0.1, kv.1.1.0));
                let op_26v1 = {
                    #[inline(always)]
                    pub fn check_op_26v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_26v1(op_26v1)
                };
                let op_29v1 = op_26v1.map(|row: (_, _, _)| (row.0, row.1, row.2));
                let op_29v1 = {
                    #[inline(always)]
                    pub fn check_op_29v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_29v1(op_29v1)
                };
                let op_11v1 = op_29v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_2v1_node_11v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_11v1 = {
                    #[inline(always)]
                    pub fn check_op_11v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_11v1(op_11v1)
                };
                let op_19v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result.send(v).unwrap()
                });
                let op_19v1 = {
                    #[inline(always)]
                    pub fn check_op_19v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_19v1(op_19v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_11v1, op_19v1);
            },
        );
        let mut sg_4v1_node_17v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints2)
        };
        let sg_4v1_node_5v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        let sg_4v1_node_36v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        let sg_4v1_node_35v1_persistdata = df
            .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(4v1)",
            0,
            var_expr!(),
            var_expr!(hoff_12v3_send, hoff_13v3_send),
            move |context, var_args!(), var_args!(hoff_12v3_send, hoff_13v3_send)| {
                let hoff_12v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_12v3_send.give(Some(v));
                });
                let hoff_13v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_13v3_send.give(Some(v));
                });
                let op_17v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_4v1_node_17v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_17v1 = {
                    #[inline(always)]
                    pub fn check_op_17v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_17v1(op_17v1)
                };
                let op_5v1 = op_17v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_4v1_node_5v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_5v1 = {
                    #[inline(always)]
                    pub fn check_op_5v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_5v1(op_5v1)
                };
                let op_37v1 = hydroflow::pusherator::map::Map::new(
                    |_v: (_,)| (_v.0,),
                    hoff_13v3_send,
                );
                let op_37v1 = {
                    #[inline(always)]
                    pub fn check_op_37v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_37v1(op_37v1)
                };
                let op_36v1 = hydroflow::pusherator::filter::Filter::new(
                    |item| {
                        let mut borrow = context
                            .state_ref(sg_4v1_node_36v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    },
                    op_37v1,
                );
                let op_36v1 = {
                    #[inline(always)]
                    pub fn check_op_36v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_36v1(op_36v1)
                };
                let mut sg_4v1_node_35v1_persistvec = context
                    .state_ref(sg_4v1_node_35v1_persistdata)
                    .borrow_mut();
                let op_35v1 = {
                    fn constrain_types<'ctx, Push, Item>(
                        vec: &'ctx mut Vec<Item>,
                        mut output: Push,
                    ) -> impl 'ctx + hydroflow::pusherator::Pusherator<Item = Item>
                    where
                        Push: 'ctx + hydroflow::pusherator::Pusherator<Item = Item>,
                        Item: ::std::clone::Clone,
                    {
                        vec.iter()
                            .cloned()
                            .for_each(|item| {
                                hydroflow::pusherator::Pusherator::give(&mut output, item);
                            });
                        hydroflow::pusherator::map::Map::new(
                            |item| {
                                vec.push(item);
                                vec.last().unwrap().clone()
                            },
                            output,
                        )
                    }
                    constrain_types(&mut *sg_4v1_node_35v1_persistvec, op_36v1)
                };
                let op_35v1 = {
                    #[inline(always)]
                    pub fn check_op_35v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_35v1(op_35v1)
                };
                let op_6v1 = hydroflow::pusherator::tee::Tee::new(
                    hoff_12v3_send,
                    op_35v1,
                );
                let op_6v1 = {
                    #[inline(always)]
                    pub fn check_op_6v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_6v1(op_6v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_5v1, op_6v1);
                context.schedule_subgraph(context.current_subgraph(), false);
            },
        );
        let sg_3v1_node_32v1_persistdata = df
            .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
        let sg_3v1_node_33v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        let sg_3v1_node_30v1_diffdata_handle = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_3v1_node_14v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        ::std::collections::HashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(3v1)",
            1,
            var_expr!(hoff_9v3_recv, hoff_13v3_recv),
            var_expr!(),
            move |context, var_args!(hoff_9v3_recv, hoff_13v3_recv), var_args!()| {
                let mut hoff_9v3_recv = hoff_9v3_recv.borrow_mut_swap();
                let hoff_9v3_recv = hoff_9v3_recv.drain(..);
                let mut hoff_13v3_recv = hoff_13v3_recv.borrow_mut_swap();
                let hoff_13v3_recv = hoff_13v3_recv.drain(..);
                let mut sg_3v1_node_32v1_persistvec = context
                    .state_ref(sg_3v1_node_32v1_persistdata)
                    .borrow_mut();
                sg_3v1_node_32v1_persistvec.extend(hoff_9v3_recv);
                let op_32v1 = sg_3v1_node_32v1_persistvec.iter().cloned();
                let op_32v1 = {
                    #[inline(always)]
                    pub fn check_op_32v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_32v1(op_32v1)
                };
                let op_33v1 = op_32v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_3v1_node_33v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_33v1 = {
                    #[inline(always)]
                    pub fn check_op_33v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_33v1(op_33v1)
                };
                let op_34v1 = op_33v1.map(|_v: (_,)| ((_v.0,), ()));
                let op_34v1 = {
                    #[inline(always)]
                    pub fn check_op_34v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_34v1(op_34v1)
                };
                let mut sg_3v1_node_30v1_borrow = context
                    .state_ref(sg_3v1_node_30v1_diffdata_handle)
                    .borrow_mut();
                let op_30v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V, I2>(
                        input_pos: I1,
                        input_neg: I2,
                        borrow_state: &'a mut hydroflow::rustc_hash::FxHashSet<K>,
                    ) -> impl 'a + Iterator<Item = (K, V)>
                    where
                        K: Eq + ::std::hash::Hash + Clone,
                        V: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V)>,
                        I2: 'a + Iterator<Item = K>,
                    {
                        borrow_state.extend(input_neg);
                        input_pos.filter(move |x| !borrow_state.contains(&x.0))
                    }
                    check_inputs(
                        op_34v1,
                        hoff_13v3_recv,
                        sg_3v1_node_30v1_borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                Default::default,
                            ),
                    )
                };
                let op_30v1 = {
                    #[inline(always)]
                    pub fn check_op_30v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_30v1(op_30v1)
                };
                let op_31v1 = op_30v1.map(|kv: ((_,), ())| (kv.0.0,));
                let op_31v1 = {
                    #[inline(always)]
                    pub fn check_op_31v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_31v1(op_31v1)
                };
                let op_38v1 = op_31v1.map(|row: (_,)| (row.0,));
                let op_38v1 = {
                    #[inline(always)]
                    pub fn check_op_38v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_38v1(op_38v1)
                };
                let op_14v1 = op_38v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_3v1_node_14v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                ::std::collections::HashSet::new,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_14v1 = {
                    #[inline(always)]
                    pub fn check_op_14v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_14v1(op_14v1)
                };
                let op_20v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result2.send(v).unwrap()
                });
                let op_20v1 = {
                    #[inline(always)]
                    pub fn check_op_20v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_20v1(op_20v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_14v1, op_20v1);
                context.schedule_subgraph(context.current_subgraph(), false);
            },
        );
        df
    }
}


---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        use hydroflow::{var_expr, var_args};
        let mut df = hydroflow::scheduled::graph::Hydroflow::new();
        df.__assign_meta_graph(
            "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"next_tick ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"next_tick ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"source_stream (ints1)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints2)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints3)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result2 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result3 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'static , 'static , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : (() , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 1 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'static , 'tick , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : (() , ((_ , _ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 , kv . 1 . 1 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | (() , (_v . 0 , _v . 1 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ , _ ,) | (row . 0 , row . 1 , row . 2 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"anti_join ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : ((_ ,) , ()) | (kv . 0 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | ((_v . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"persist ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (_v . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | (row . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | (row . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | (row . 0 ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":26,\"version\":1},{\"idx\":14,\"version\":3}],\"version\":5},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":25,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":22,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":27,\"version\":1},{\"idx\":11,\"version\":3}],\"version\":5},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":19,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":16,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":28,\"version\":1},{\"idx\":6,\"version\":3}],\"version\":5},{\"value\":[{\"idx\":13,\"version\":3},{\"idx\":34,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":40,\"version\":1},{\"idx\":15,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":16,\"version\":3},{\"idx\":10,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":47,\"version\":1},{\"idx\":18,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":19,\"version\":3},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":50,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":22,\"version\":3},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":49,\"version\":1},{\"idx\":24,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":25,\"version\":3},{\"idx\":3,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":6,\"version\":3},{\"idx\":12,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":11,\"version\":3},{\"idx\":7,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":15,\"version\":1},{\"idx\":29,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":31,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":32,\"version\":1},{\"idx\":33,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":34,\"version\":1},{\"idx\":32,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":13,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":35,\"version\":1},{\"idx\":32,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":23,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":36,\"version\":1},{\"idx\":37,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":38,\"version\":1},{\"idx\":36,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":33,\"version\":1},{\"idx\":38,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":39,\"version\":1},{\"idx\":36,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":12,\"version\":1},{\"idx\":39,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":14,\"version\":3},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":37,\"version\":1},{\"idx\":40,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":41,\"version\":1},{\"idx\":42,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":44,\"version\":1},{\"idx\":41,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":43,\"version\":1},{\"idx\":44,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":20,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":46,\"version\":1},{\"idx\":17,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":45,\"version\":1},{\"idx\":46,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":45,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":3},{\"idx\":41,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":42,\"version\":1},{\"idx\":47,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":23,\"version\":3},{\"idx\":35,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":48,\"version\":1},{\"idx\":49,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":48,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":20,\"version\":3},{\"idx\":43,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":50,\"version\":1}],\"version\":3}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"2\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":8,\"version\":1},\"version\":1},{\"value\":{\"idx\":9,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":5,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":12,\"version\":1},{\"idx\":34,\"version\":1},{\"idx\":35,\"version\":1},{\"idx\":32,\"version\":1},{\"idx\":33,\"version\":1},{\"idx\":38,\"version\":1},{\"idx\":39,\"version\":1},{\"idx\":36,\"version\":1},{\"idx\":37,\"version\":1},{\"idx\":40,\"version\":1},{\"idx\":15,\"version\":1},{\"idx\":29,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":43,\"version\":1},{\"idx\":44,\"version\":1},{\"idx\":41,\"version\":1},{\"idx\":42,\"version\":1},{\"idx\":47,\"version\":1},{\"idx\":18,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":48,\"version\":1},{\"idx\":49,\"version\":1},{\"idx\":24,\"version\":1},{\"idx\":50,\"version\":1},{\"idx\":21,\"version\":1},{\"idx\":31,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":45,\"version\":1},{\"idx\":46,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":26,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":27,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":28,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":1,\"version\":1},{\"value\":2,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints1_insert\",\"version\":1},{\"value\":\"ints1\",\"version\":1},{\"value\":\"ints1\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints2_insert\",\"version\":1},{\"value\":\"ints2\",\"version\":1},{\"value\":\"ints2\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints3_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result2_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result3_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"intermediate_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_0\",\"version\":1},{\"value\":\"join_0\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_1\",\"version\":1},{\"value\":\"join_1\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_2\",\"version\":1},{\"value\":\"join_2\",\"version\":1}]}",
        );
        df.__assign_diagnostics("[]");
        let (hoff_6v3_send, hoff_6v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(6v3)");
        let (hoff_11v3_send, hoff_11v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(11v3)");
        let (hoff_13v3_send, hoff_13v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(13v3)");
        let (hoff_14v3_send, hoff_14v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(14v3)");
        let (hoff_16v3_send, hoff_16v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(16v3)");
        let (hoff_17v3_send, hoff_17v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(17v3)");
        let (hoff_19v3_send, hoff_19v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(19v3)");
        let (hoff_20v3_send, hoff_20v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(20v3)");
        let (hoff_22v3_send, hoff_22v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(22v3)");
        let (hoff_23v3_send, hoff_23v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(23v3)");
        let (hoff_25v3_send, hoff_25v3_recv) = df
            .make_edge::<
                _,
                hydroflow::scheduled::handoff::VecHandoff<_>,
            >("handoff GraphNodeId(25v3)");
        let mut sg_7v1_node_26v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints1)
        };
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(7v1)",
            0,
            var_expr!(),
            var_expr!(hoff_14v3_send),
            move |context, var_args!(), var_args!(hoff_14v3_send)| {
                let hoff_14v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_14v3_send.give(Some(v));
                });
                let op_26v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_7v1_node_26v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_26v1 = {
                    #[inline(always)]
                    pub fn check_op_26v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_26v1(op_26v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_26v1, hoff_14v3_send);
            },
        );
        let mut sg_8v1_node_27v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints2)
        };
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(8v1)",
            0,
            var_expr!(),
            var_expr!(hoff_11v3_send),
            move |context, var_args!(), var_args!(hoff_11v3_send)| {
                let hoff_11v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_11v3_send.give(Some(v));
                });
                let op_27v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_8v1_node_27v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_27v1 = {
                    #[inline(always)]
                    pub fn check_op_27v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_27v1(op_27v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_27v1, hoff_11v3_send);
            },
        );
        let mut sg_9v1_node_28v1_stream = {
            #[inline(always)]
            fn check_stream<
                Stream: hydroflow::futures::stream::Stream<Item = Item>,
                Item,
            >(
                stream: Stream,
            ) -> ::std::pin::Pin<
                ::std::boxed::Box<impl hydroflow::futures::stream::Stream<Item = Item>>,
            > {
                ::std::boxed::Box::pin(stream)
            }
            check_stream(ints3)
        };
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(9v1)",
            0,
            var_expr!(),
            var_expr!(hoff_6v3_send),
            move |context, var_args!(), var_args!(hoff_6v3_send)| {
                let hoff_6v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_6v3_send.give(Some(v));
                });
                let op_28v1 = std::iter::from_fn(|| {
                    match hydroflow::futures::stream::Stream::poll_next(
                        sg_9v1_node_28v1_stream.as_mut(),
                        &mut std::task::Context::from_waker(&context.waker()),
                    ) {
                        std::task::Poll::Ready(maybe) => maybe,
                        std::task::Poll::Pending => None,
                    }
                });
                let op_28v1 = {
                    #[inline(always)]
                    pub fn check_op_28v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_28v1(op_28v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_28v1, hoff_6v3_send);
            },
        );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(1v1)",
            0,
            var_expr!(hoff_22v3_recv),
            var_expr!(hoff_25v3_send),
            move |context, var_args!(hoff_22v3_recv), var_args!(hoff_25v3_send)| {
                let mut hoff_22v3_recv = hoff_22v3_recv.borrow_mut_swap();
                let hoff_22v3_recv = hoff_22v3_recv.drain(..);
                let hoff_25v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_25v3_send.give(Some(v));
                });
                let op_5v1 = {
                    fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        iter
                    }
                    check_input::<_, _>(hoff_22v3_recv)
                };
                let op_5v1 = {
                    #[inline(always)]
                    pub fn check_op_5v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_5v1(op_5v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_5v1, hoff_25v3_send);
            },
        );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(2v1)",
            0,
            var_expr!(hoff_16v3_recv),
            var_expr!(hoff_19v3_send),
            move |context, var_args!(hoff_16v3_recv), var_args!(hoff_19v3_send)| {
                let mut hoff_16v3_recv = hoff_16v3_recv.borrow_mut_swap();
                let hoff_16v3_recv = hoff_16v3_recv.drain(..);
                let hoff_19v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_19v3_send.give(Some(v));
                });
                let op_10v1 = {
                    fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                        iter: Iter,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        iter
                    }
                    check_input::<_, _>(hoff_16v3_recv)
                };
                let op_10v1 = {
                    #[inline(always)]
                    pub fn check_op_10v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_10v1(op_10v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_10v1, hoff_19v3_send);
            },
        );
        let sg_3v1_node_12v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_3v1_node_32v1_joindata_lhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                ),
            );
        let sg_3v1_node_32v1_joindata_rhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                ),
            );
        let sg_3v1_node_36v1_joindata_lhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                ),
            );
        let sg_3v1_node_36v1_joindata_rhs = df
            .add_state(
                std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::new_init(
                        hydroflow::lang::clear::ClearDefault(
                            hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                        ),
                    ),
                ),
            );
        let sg_3v1_node_15v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(3v1)",
            1,
            var_expr!(hoff_6v3_recv, hoff_13v3_recv, hoff_23v3_recv),
            var_expr!(),
            move |
                context,
                var_args!(hoff_6v3_recv, hoff_13v3_recv, hoff_23v3_recv),
                var_args!()|
            {
                let mut hoff_6v3_recv = hoff_6v3_recv.borrow_mut_swap();
                let hoff_6v3_recv = hoff_6v3_recv.drain(..);
                let mut hoff_13v3_recv = hoff_13v3_recv.borrow_mut_swap();
                let hoff_13v3_recv = hoff_13v3_recv.drain(..);
                let mut hoff_23v3_recv = hoff_23v3_recv.borrow_mut_swap();
                let hoff_23v3_recv = hoff_23v3_recv.drain(..);
                let op_12v1 = hoff_6v3_recv
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_3v1_node_12v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_12v1 = {
                    #[inline(always)]
                    pub fn check_op_12v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_12v1(op_12v1)
                };
                let op_34v1 = hoff_13v3_recv.map(|_v: (_,)| ((), (_v.0,)));
                let op_34v1 = {
                    #[inline(always)]
                    pub fn check_op_34v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_34v1(op_34v1)
                };
                let op_35v1 = hoff_23v3_recv.map(|_v: (_,)| ((), (_v.0,)));
                let op_35v1 = {
                    #[inline(always)]
                    pub fn check_op_35v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_35v1(op_35v1)
                };
                let mut sg_3v1_node_32v1_joindata_lhs_borrow = context
                    .state_ref(sg_3v1_node_32v1_joindata_lhs)
                    .borrow_mut();
                let mut sg_3v1_node_32v1_joindata_rhs_borrow = context
                    .state_ref(sg_3v1_node_32v1_joindata_rhs)
                    .borrow_mut();
                let op_32v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V1, I2, V2>(
                        lhs: I1,
                        rhs: I2,
                        lhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V1,
                            V2,
                        >,
                        rhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V2,
                            V1,
                        >,
                    ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                    where
                        K: Eq + std::hash::Hash + Clone,
                        V1: Eq + Clone,
                        V2: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V1)>,
                        I2: 'a + Iterator<Item = (K, V2)>,
                    {
                        hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                            lhs,
                            rhs,
                            lhs_state,
                            rhs_state,
                        )
                    }
                    check_inputs(
                        op_34v1,
                        op_35v1,
                        &mut sg_3v1_node_32v1_joindata_lhs_borrow,
                        &mut sg_3v1_node_32v1_joindata_rhs_borrow,
                    )
                };
                let op_32v1 = {
                    #[inline(always)]
                    pub fn check_op_32v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_32v1(op_32v1)
                };
                let op_33v1 = op_32v1.map(|kv: ((), ((_,), (_,)))| (kv.1.0.0, kv.1.1.0));
                let op_33v1 = {
                    #[inline(always)]
                    pub fn check_op_33v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_33v1(op_33v1)
                };
                let op_38v1 = op_33v1.map(|_v: (_, _)| ((), (_v.0, _v.1)));
                let op_38v1 = {
                    #[inline(always)]
                    pub fn check_op_38v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_38v1(op_38v1)
                };
                let op_39v1 = op_12v1.map(|_v: (_,)| ((), (_v.0,)));
                let op_39v1 = {
                    #[inline(always)]
                    pub fn check_op_39v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_39v1(op_39v1)
                };
                let mut sg_3v1_node_36v1_joindata_lhs_borrow = context
                    .state_ref(sg_3v1_node_36v1_joindata_lhs)
                    .borrow_mut();
                let mut sg_3v1_node_36v1_joindata_rhs_borrow = context
                    .state_ref(sg_3v1_node_36v1_joindata_rhs)
                    .borrow_mut();
                let op_36v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V1, I2, V2>(
                        lhs: I1,
                        rhs: I2,
                        lhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V1,
                            V2,
                        >,
                        rhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                            K,
                            V2,
                            V1,
                        >,
                    ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                    where
                        K: Eq + std::hash::Hash + Clone,
                        V1: Eq + Clone,
                        V2: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V1)>,
                        I2: 'a + Iterator<Item = (K, V2)>,
                    {
                        hydroflow::compiled::pull::SymmetricHashJoin::new_from_mut(
                            lhs,
                            rhs,
                            lhs_state,
                            rhs_state,
                        )
                    }
                    check_inputs(
                        op_38v1,
                        op_39v1,
                        &mut sg_3v1_node_36v1_joindata_lhs_borrow,
                        &mut sg_3v1_node_36v1_joindata_rhs_borrow
                            .try_insert_with(context.current_tick(), Default::default)
                            .0,
                    )
                };
                let op_36v1 = {
                    #[inline(always)]
                    pub fn check_op_36v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_36v1(op_36v1)
                };
                let op_37v1 = op_36v1
                    .map(|kv: ((), ((_, _), (_,)))| (kv.1.0.0, kv.1.0.1, kv.1.1.0));
                let op_37v1 = {
                    #[inline(always)]
                    pub fn check_op_37v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_37v1(op_37v1)
                };
                let op_40v1 = op_37v1.map(|row: (_, _, _)| (row.0, row.1, row.2));
                let op_40v1 = {
                    #[inline(always)]
                    pub fn check_op_40v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_40v1(op_40v1)
                };
                let op_15v1 = op_40v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_3v1_node_15v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_15v1 = {
                    #[inline(always)]
                    pub fn check_op_15v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_15v1(op_15v1)
                };
                let op_29v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result.send(v).unwrap()
                });
                let op_29v1 = {
                    #[inline(always)]
                    pub fn check_op_29v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_29v1(op_29v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_15v1, op_29v1);
            },
        );
        let sg_4v1_node_43v1_persistdata = df
            .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
        let sg_4v1_node_41v1_diffdata_handle = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_4v1_node_18v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(4v1)",
            2,
            var_expr!(hoff_17v3_recv, hoff_20v3_recv),
            var_expr!(),
            move |context, var_args!(hoff_17v3_recv, hoff_20v3_recv), var_args!()| {
                let mut hoff_17v3_recv = hoff_17v3_recv.borrow_mut_swap();
                let hoff_17v3_recv = hoff_17v3_recv.drain(..);
                let mut hoff_20v3_recv = hoff_20v3_recv.borrow_mut_swap();
                let hoff_20v3_recv = hoff_20v3_recv.drain(..);
                let mut sg_4v1_node_43v1_persistvec = context
                    .state_ref(sg_4v1_node_43v1_persistdata)
                    .borrow_mut();
                sg_4v1_node_43v1_persistvec.extend(hoff_20v3_recv);
                let op_43v1 = sg_4v1_node_43v1_persistvec.iter().cloned();
                let op_43v1 = {
                    #[inline(always)]
                    pub fn check_op_43v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_43v1(op_43v1)
                };
                let op_44v1 = op_43v1.map(|_v: (_,)| ((_v.0,), ()));
                let op_44v1 = {
                    #[inline(always)]
                    pub fn check_op_44v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_44v1(op_44v1)
                };
                let mut sg_4v1_node_41v1_borrow = context
                    .state_ref(sg_4v1_node_41v1_diffdata_handle)
                    .borrow_mut();
                let op_41v1 = {
                    /// Limit error propagation by bounding locally, erasing output iterator type.
                    #[inline(always)]
                    fn check_inputs<'a, K, I1, V, I2>(
                        input_pos: I1,
                        input_neg: I2,
                        borrow_state: &'a mut hydroflow::rustc_hash::FxHashSet<K>,
                    ) -> impl 'a + Iterator<Item = (K, V)>
                    where
                        K: Eq + ::std::hash::Hash + Clone,
                        V: Eq + Clone,
                        I1: 'a + Iterator<Item = (K, V)>,
                        I2: 'a + Iterator<Item = K>,
                    {
                        borrow_state.extend(input_neg);
                        input_pos.filter(move |x| !borrow_state.contains(&x.0))
                    }
                    check_inputs(
                        op_44v1,
                        hoff_17v3_recv,
                        sg_4v1_node_41v1_borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                Default::default,
                            ),
                    )
                };
                let op_41v1 = {
                    #[inline(always)]
                    pub fn check_op_41v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_41v1(op_41v1)
                };
                let op_42v1 = op_41v1.map(|kv: ((_,), ())| (kv.0.0,));
                let op_42v1 = {
                    #[inline(always)]
                    pub fn check_op_42v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_42v1(op_42v1)
                };
                let op_47v1 = op_42v1.map(|row: (_,)| (row.0,));
                let op_47v1 = {
                    #[inline(always)]
                    pub fn check_op_47v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_47v1(op_47v1)
                };
                let op_18v1 = op_47v1
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_4v1_node_18v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_18v1 = {
                    #[inline(always)]
                    pub fn check_op_18v1<
                        Input: ::std::iter::Iterator<Item = Item>,
                        Item,
                    >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_18v1(op_18v1)
                };
                let op_30v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result2.send(v).unwrap()
                });
                let op_30v1 = {
                    #[inline(always)]
                    pub fn check_op_30v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_30v1(op_30v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_18v1, op_30v1);
                context.schedule_subgraph(context.current_subgraph(), false);
            },
        );
        let sg_5v1_node_2v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_5v1_node_3v1_diffdata_handle = df
            .add_state(
                ::std::cell::RefCell::new(hydroflow::rustc_hash::FxHashSet::default()),
            );
        let sg_5v1_node_21v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_5v1_node_24v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_5v1_node_49v1_persistdata = df
            .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(5v1)",
            1,
            var_expr!(hoff_14v3_recv, hoff_25v3_recv),
            var_expr!(hoff_13v3_send, hoff_20v3_send, hoff_22v3_send),
            move |
                context,
                var_args!(hoff_14v3_recv, hoff_25v3_recv),
                var_args!(hoff_13v3_send, hoff_20v3_send, hoff_22v3_send)|
            {
                let mut hoff_14v3_recv = hoff_14v3_recv.borrow_mut_swap();
                let hoff_14v3_recv = hoff_14v3_recv.drain(..);
                let mut hoff_25v3_recv = hoff_25v3_recv.borrow_mut_swap();
                let hoff_25v3_recv = hoff_25v3_recv.drain(..);
                let hoff_13v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_13v3_send.give(Some(v));
                });
                let hoff_20v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_20v3_send.give(Some(v));
                });
                let hoff_22v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_22v3_send.give(Some(v));
                });
                let op_2v1 = hoff_14v3_recv
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_5v1_node_2v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_2v1 = {
                    #[inline(always)]
                    pub fn check_op_2v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_2v1(op_2v1)
                };
                let mut sg_5v1_node_3v1_negset = context
                    .state_ref(sg_5v1_node_3v1_diffdata_handle)
                    .borrow_mut();
                sg_5v1_node_3v1_negset.extend(hoff_25v3_recv);
                let op_3v1 = op_2v1.filter(move |x| !sg_5v1_node_3v1_negset.contains(x));
                let op_3v1 = {
                    #[inline(always)]
                    pub fn check_op_3v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_3v1(op_3v1)
                };
                let op_31v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    result3.send(v).unwrap()
                });
                let op_31v1 = {
                    #[inline(always)]
                    pub fn check_op_31v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_31v1(op_31v1)
                };
                let op_21v1 = hydroflow::pusherator::filter::Filter::new(
                    |item| {
                        let mut borrow = context
                            .state_ref(sg_5v1_node_21v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    },
                    op_31v1,
                );
                let op_21v1 = {
                    #[inline(always)]
                    pub fn check_op_21v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_21v1(op_21v1)
                };
                let op_50v1 = hydroflow::pusherator::map::Map::new(
                    |row: (_,)| (row.0,),
                    op_21v1,
                );
                let op_50v1 = {
                    #[inline(always)]
                    pub fn check_op_50v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_50v1(op_50v1)
                };
                let op_24v1 = hydroflow::pusherator::filter::Filter::new(
                    |item| {
                        let mut borrow = context
                            .state_ref(sg_5v1_node_24v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    },
                    op_50v1,
                );
                let op_24v1 = {
                    #[inline(always)]
                    pub fn check_op_24v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_24v1(op_24v1)
                };
                let mut sg_5v1_node_49v1_persistvec = context
                    .state_ref(sg_5v1_node_49v1_persistdata)
                    .borrow_mut();
                let op_49v1 = {
                    fn constrain_types<'ctx, Push, Item>(
                        vec: &'ctx mut Vec<Item>,
                        mut output: Push,
                    ) -> impl 'ctx + hydroflow::pusherator::Pusherator<Item = Item>
                    where
                        Push: 'ctx + hydroflow::pusherator::Pusherator<Item = Item>,
                        Item: ::std::clone::Clone,
                    {
                        vec.iter()
                            .cloned()
                            .for_each(|item| {
                                hydroflow::pusherator::Pusherator::give(&mut output, item);
                            });
                        hydroflow::pusherator::map::Map::new(
                            |item| {
                                vec.push(item);
                                vec.last().unwrap().clone()
                            },
                            output,
                        )
                    }
                    constrain_types(&mut *sg_5v1_node_49v1_persistvec, op_24v1)
                };
                let op_49v1 = {
                    #[inline(always)]
                    pub fn check_op_49v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_49v1(op_49v1)
                };
                let op_48v1 = hydroflow::pusherator::map::Map::new(
                    |row: (_,)| (row.0,),
                    op_49v1,
                );
                let op_48v1 = {
                    #[inline(always)]
                    pub fn check_op_48v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_48v1(op_48v1)
                };
                let op_4v1 = hydroflow::pusherator::tee::Tee::new(
                    hoff_13v3_send,
                    hydroflow::pusherator::tee::Tee::new(
                        hoff_20v3_send,
                        hydroflow::pusherator::tee::Tee::new(op_48v1, hoff_22v3_send),
                    ),
                );
                let op_4v1 = {
                    #[inline(always)]
                    pub fn check_op_4v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_4v1(op_4v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_3v1, op_4v1);
                context.schedule_subgraph(context.current_subgraph(), false);
            },
        );
        let sg_6v1_node_7v1_uniquedata = df
            .add_state(
                ::std::cell::RefCell::new(
                    hydroflow::lang::monotonic_map::MonotonicMap::<
                        _,
                        hydroflow::rustc_hash::FxHashSet<_>,
                    >::default(),
                ),
            );
        let sg_6v1_node_8v1_diffdata_handle = df
            .add_state(
                ::std::cell::RefCell::new(hydroflow::rustc_hash::FxHashSet::default()),
            );
        let sg_6v1_node_45v1_persistdata = df
            .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
        df.add_subgraph_stratified(
            "Subgraph GraphSubgraphId(6v1)",
            1,
            var_expr!(hoff_11v3_recv, hoff_19v3_recv),
            var_expr!(hoff_16v3_send, hoff_17v3_send, hoff_23v3_send),
            move |
                context,
                var_args!(hoff_11v3_recv, hoff_19v3_recv),
                var_args!(hoff_16v3_send, hoff_17v3_send, hoff_23v3_send)|
            {
                let mut hoff_11v3_recv = hoff_11v3_recv.borrow_mut_swap();
                let hoff_11v3_recv = hoff_11v3_recv.drain(..);
                let mut hoff_19v3_recv = hoff_19v3_recv.borrow_mut_swap();
                let hoff_19v3_recv = hoff_19v3_recv.drain(..);
                let hoff_16v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_16v3_send.give(Some(v));
                });
                let hoff_17v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_17v3_send.give(Some(v));
                });
                let hoff_23v3_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                    hoff_23v3_send.give(Some(v));
                });
                let op_7v1 = hoff_11v3_recv
                    .filter(|item| {
                        let mut borrow = context
                            .state_ref(sg_6v1_node_7v1_uniquedata)
                            .borrow_mut();
                        let set = borrow
                            .try_insert_with(
                                (context.current_tick(), context.current_stratum()),
                                hydroflow::rustc_hash::FxHashSet::default,
                            );
                        if !set.contains(item) {
                            set.insert(::std::clone::Clone::clone(item));
                            true
                        } else {
                            false
                        }
                    });
                let op_7v1 = {
                    #[inline(always)]
                    pub fn check_op_7v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_7v1(op_7v1)
                };
                let mut sg_6v1_node_8v1_negset = context
                    .state_ref(sg_6v1_node_8v1_diffdata_handle)
                    .borrow_mut();
                sg_6v1_node_8v1_negset.extend(hoff_19v3_recv);
                let op_8v1 = op_7v1.filter(move |x| !sg_6v1_node_8v1_negset.contains(x));
                let op_8v1 = {
                    #[inline(always)]
                    pub fn check_op_8v1<Input: ::std::iter::Iterator<Item = Item>, Item>(
                        input: Input,
                    ) -> impl ::std::iter::Iterator<Item = Item> {
                        input
                    }
                    check_op_8v1(op_8v1)
                };
                let op_46v1 = hydroflow::pusherator::map::Map::new(
                    |_v: (_,)| (_v.0,),
                    hoff_17v3_send,
                );
                let op_46v1 = {
                    #[inline(always)]
                    pub fn check_op_46v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_46v1(op_46v1)
                };
                let mut sg_6v1_node_45v1_persistvec = context
                    .state_ref(sg_6v1_node_45v1_persistdata)
                    .borrow_mut();
                let op_45v1 = {
                    fn constrain_types<'ctx, Push, Item>(
                        vec: &'ctx mut Vec<Item>,
                        mut output: Push,
                    ) -> impl 'ctx + hydroflow::pusherator::Pusherator<Item = Item>
                    where
                        Push: 'ctx + hydroflow::pusherator::Pusherator<Item = Item>,
                        Item: ::std::clone::Clone,
                    {
                        vec.iter()
                            .cloned()
                            .for_each(|item| {
                                hydroflow::pusherator::Pusherator::give(&mut output, item);
                            });
                        hydroflow::pusherator::map::Map::new(
                            |item| {
                                vec.push(item);
                                vec.last().unwrap().clone()
                            },
                            output,
                        )
                    }
                    constrain_types(&mut *sg_6v1_node_45v1_persistvec, op_46v1)
                };
                let op_45v1 = {
                    #[inline(always)]
                    pub fn check_op_45v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_45v1(op_45v1)
                };
                let op_9v1 = hydroflow::pusherator::tee::Tee::new(
                    hoff_23v3_send,
                    hydroflow::pusherator::tee::Tee::new(op_45v1, hoff_16v3_send),
                );
                let op_9v1 = {
                    #[inline(always)]
                    pub fn check_op_9v1<
                        Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(
                        input: Input,
                    ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                        input
                    }
                    check_op_9v1(op_9v1)
                };
                #[inline(always)]
                fn check_pivot_run<
                    Pull: ::std::iter::Iterator<Item = Item>,
                    Push: hydroflow::pusherator::Pusherator<Item = Item>,
                    Item,
                >(pull: Pull, push: Push) {
                    hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                }
                check_pivot_run(op_8v1, op_9v1);
                context.schedule_subgraph(context.current_subgraph(), false);
            },
        );
        df
    }
}


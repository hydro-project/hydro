---
source: hydroflow_plus_test/src/cluster/paxos.rs
expression: built.ir()
---
[
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; | ballot : Ballot | println ! ("Client notified that leader was elected: {:?}" , ballot) },
        input: Tee {
            inner: RefCell {
                value: CycleSource {
                    ident: Ident {
                        sym: cycle_1,
                    },
                    location_kind: Cluster(
                        2,
                    ),
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_2,
        },
        location_kind: Cluster(
            2,
        ),
        input: DeferTick(
            AntiJoin(
                Tee {
                    inner: RefCell {
                        value: Union(
                            Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                input: CycleSource {
                                    ident: Ident {
                                        sym: cycle_0,
                                    },
                                    location_kind: Cluster(
                                        2,
                                    ),
                                },
                            },
                            CycleSource {
                                ident: Ident {
                                    sym: cycle_2,
                                },
                                location_kind: Cluster(
                                    2,
                                ),
                            },
                        ),
                    },
                },
                Tee {
                    inner: RefCell {
                        value: FilterMap {
                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                            input: FoldKeyed {
                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                input: Tee {
                                    inner: RefCell {
                                        value: Union(
                                            Map {
                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                input: CycleSource {
                                                    ident: Ident {
                                                        sym: cycle_0,
                                                    },
                                                    location_kind: Cluster(
                                                        2,
                                                    ),
                                                },
                                            },
                                            CycleSource {
                                                ident: Ident {
                                                    sym: cycle_2,
                                                },
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                            },
                                        ),
                                    },
                                },
                            },
                        },
                    },
                },
            ),
        ),
    },
    CycleSink {
        ident: Ident {
            sym: cycle_3,
        },
        location_kind: Cluster(
            2,
        ),
        input: DeferTick(
            ReduceKeyed {
                f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_time : & mut SystemTime , new_time : SystemTime | { if new_time > * curr_time { * curr_time = new_time ; } } },
                input: Union(
                    Union(
                        Tee {
                            inner: RefCell {
                                value: CycleSource {
                                    ident: Ident {
                                        sym: cycle_3,
                                    },
                                    location_kind: Cluster(
                                        2,
                                    ),
                                },
                            },
                        },
                        FlatMap {
                            f: { use crate :: __staged :: cluster :: paxos :: * ; let num_clients_per_node = 1usize ; move | now : SystemTime | (0 .. num_clients_per_node) . map (move | virtual_id | (virtual_id , now)) },
                            input: Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; | _ : Ballot | SystemTime :: now () },
                                input: Tee {
                                    inner: RefCell {
                                        value: Delta(
                                            Tee {
                                                inner: RefCell {
                                                    value: Reduce {
                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                        input: Persist(
                                                            Tee {
                                                                inner: RefCell {
                                                                    value: CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_1,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            2,
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                        ),
                                                    },
                                                },
                                            },
                                        ),
                                    },
                                },
                            },
                        },
                    ),
                    Tee {
                        inner: RefCell {
                            value: Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; | key : u32 | (key as usize , SystemTime :: now ()) },
                                input: Tee {
                                    inner: RefCell {
                                        value: FilterMap {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                            input: FoldKeyed {
                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                input: Tee {
                                                    inner: RefCell {
                                                        value: Union(
                                                            Map {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                input: CycleSource {
                                                                    ident: Ident {
                                                                        sym: cycle_0,
                                                                    },
                                                                    location_kind: Cluster(
                                                                        2,
                                                                    ),
                                                                },
                                                            },
                                                            CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_2,
                                                                },
                                                                location_kind: Cluster(
                                                                    2,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                ),
            },
        ),
    },
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; let median_latency_window_size = 1usize ; move | ((_ , (latencies , _write_index , has_any_value)) , (throughput , num_ticks) ,) : ((() , (Rc < RefCell < Vec < u128 > > > , usize , bool)) , (u32 , u32)) | { let mut latencies_mut = latencies . borrow_mut () ; let median_latency = if has_any_value { let out = latencies_mut . select_nth_unstable (median_latency_window_size / 2) ; * out . 1 } else { 0 } ; println ! ("Median latency: {}ms" , median_latency as f64 / 1000.0) ; println ! ("Throughput: {} requests/s" , throughput) ; println ! ("Num ticks per second: {}" , num_ticks) ; } },
        input: CrossSingleton(
            CrossSingleton(
                Tee {
                    inner: RefCell {
                        value: Source {
                            source: Interval(
                                { use crate :: __staged :: cluster :: paxos :: * ; Duration :: from_secs (1) },
                            ),
                            location_kind: Cluster(
                                2,
                            ),
                        },
                    },
                },
                Fold {
                    init: { use crate :: __staged :: cluster :: paxos :: * ; let median_latency_window_size = 1usize ; move | | (Rc :: new (RefCell :: new (Vec :: < u128 > :: with_capacity (median_latency_window_size))) , 0usize , false) },
                    acc: { use crate :: __staged :: cluster :: paxos :: * ; let median_latency_window_size = 1usize ; move | (latencies , write_index , has_any_value) : & mut (Rc < RefCell < Vec < u128 > > > , usize , bool) , latency : Option < u128 > | { let mut latencies_mut = latencies . borrow_mut () ; if let Some (latency) = latency { if let Some (prev_latency) = latencies_mut . get_mut (* write_index) { * prev_latency = latency ; } else { latencies_mut . push (latency) ; } * has_any_value = true ; * write_index += 1 ; if * write_index == median_latency_window_size { * write_index = 0 ; } } else { latencies_mut . clear () ; * write_index = 0 ; * has_any_value = false ; } } },
                    input: Persist(
                        Union(
                            Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_virtual_id , (prev_time , curr_time)) : (usize , (SystemTime , SystemTime)) | Some (curr_time . duration_since (prev_time) . unwrap () . as_micros ()) },
                                input: Join(
                                    Tee {
                                        inner: RefCell {
                                            value: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_3,
                                                },
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                            },
                                        },
                                    },
                                    Tee {
                                        inner: RefCell {
                                            value: Map {
                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | key : u32 | (key as usize , SystemTime :: now ()) },
                                                input: Tee {
                                                    inner: RefCell {
                                                        value: FilterMap {
                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                            input: FoldKeyed {
                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                input: Tee {
                                                                    inner: RefCell {
                                                                        value: Union(
                                                                            Map {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                input: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_0,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        2,
                                                                                    ),
                                                                                },
                                                                            },
                                                                            CycleSource {
                                                                                ident: Ident {
                                                                                    sym: cycle_2,
                                                                                },
                                                                                location_kind: Cluster(
                                                                                    2,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                ),
                            },
                            DeferTick(
                                Map {
                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | _ : () | None },
                                    input: Tee {
                                        inner: RefCell {
                                            value: Source {
                                                source: Interval(
                                                    { use crate :: __staged :: cluster :: paxos :: * ; Duration :: from_secs (1) },
                                                ),
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                            },
                                        },
                                    },
                                },
                            ),
                        ),
                    ),
                },
            ),
            Fold {
                init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , 0) },
                acc: { use crate :: __staged :: cluster :: paxos :: * ; | (total , num_ticks) : & mut (u32 , u32) , (batch_size , reset) : (usize , bool) | { if reset { * total = 0 ; * num_ticks = 0 ; } else { * total += batch_size as u32 ; * num_ticks += 1 ; } } },
                input: Persist(
                    Union(
                        Map {
                            f: { use crate :: __staged :: cluster :: paxos :: * ; | batch_size : usize | (batch_size , false) },
                            input: Map {
                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                input: CrossSingleton(
                                    Fold {
                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                        input: Tee {
                                            inner: RefCell {
                                                value: FilterMap {
                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                    input: FoldKeyed {
                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                        input: Tee {
                                                            inner: RefCell {
                                                                value: Union(
                                                                    Map {
                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                        input: CycleSource {
                                                                            ident: Ident {
                                                                                sym: cycle_0,
                                                                            },
                                                                            location_kind: Cluster(
                                                                                2,
                                                                            ),
                                                                        },
                                                                    },
                                                                    CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_2,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            2,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    Map {
                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                        input: Filter {
                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                            input: Fold {
                                                init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                input: Tee {
                                                    inner: RefCell {
                                                        value: Source {
                                                            source: Interval(
                                                                { use crate :: __staged :: cluster :: paxos :: * ; Duration :: from_secs (1) },
                                                            ),
                                                            location_kind: Cluster(
                                                                2,
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                ),
                            },
                        },
                        DeferTick(
                            Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; | _ : () | (0 , true) },
                                input: Tee {
                                    inner: RefCell {
                                        value: Source {
                                            source: Interval(
                                                { use crate :: __staged :: cluster :: paxos :: * ; Duration :: from_secs (1) },
                                            ),
                                            location_kind: Cluster(
                                                2,
                                            ),
                                        },
                                    },
                                },
                            },
                        ),
                    ),
                ),
            },
        ),
    },
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; | s | println ! ("{}" , s) },
        input: Source {
            source: Iter(
                { use crate :: __staged :: cluster :: paxos :: * ; ["Proposers say hello"] },
            ),
            location_kind: Cluster(
                0,
            ),
        },
    },
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; | (_ , p1b) : (u32 , P1b) | println ! ("Proposer received P1b: {:?}" , p1b) },
        input: Tee {
            inner: RefCell {
                value: CycleSource {
                    ident: Ident {
                        sym: cycle_2,
                    },
                    location_kind: Cluster(
                        0,
                    ),
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_4,
        },
        location_kind: Cluster(
            0,
        ),
        input: Union(
            Source {
                source: Iter(
                    { use crate :: __staged :: cluster :: paxos :: * ; [0] },
                ),
                location_kind: Cluster(
                    0,
                ),
            },
            DeferTick(
                Map {
                    f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (received_max_ballot , ballot_num) : (Ballot , u32) | { if received_max_ballot > (Ballot { num : ballot_num , id : p_id , }) { received_max_ballot . num + 1 } else { ballot_num } } },
                    input: CrossSingleton(
                        Tee {
                            inner: RefCell {
                                value: Fold {
                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | Ballot { num : 0 , id : 0 } },
                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                    input: Persist(
                                        Union(
                                            Union(
                                                Map {
                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (_ , p1b) : (_ , P1b) | p1b . max_ballot },
                                                    input: Tee {
                                                        inner: RefCell {
                                                            value: CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_2,
                                                                },
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                                Map {
                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (_ , p2b) : (_ , P2b) | p2b . max_ballot },
                                                    input: Tee {
                                                        inner: RefCell {
                                                            value: CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_3,
                                                                },
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                            ),
                                            Tee {
                                                inner: RefCell {
                                                    value: CycleSource {
                                                        ident: Ident {
                                                            sym: cycle_1,
                                                        },
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                },
                            },
                        },
                        Tee {
                            inner: RefCell {
                                value: CycleSource {
                                    ident: Ident {
                                        sym: cycle_4,
                                    },
                                    location_kind: Cluster(
                                        0,
                                    ),
                                },
                            },
                        },
                    ),
                },
            ),
        ),
    },
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; | _ | println ! ("Proposer leader expired") },
        input: Tee {
            inner: RefCell {
                value: Filter {
                    f: { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; move | (_ , latest_received_i_am_leader) : & (_ , Option < Instant >) | { if let Some (latest_received_i_am_leader) = latest_received_i_am_leader { (Instant :: now () . duration_since (* latest_received_i_am_leader)) > Duration :: from_secs (i_am_leader_check_timeout) } else { true } } },
                    input: Map {
                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                        input: CrossSingleton(
                            CrossSingleton(
                                Source {
                                    source: Stream(
                                        { use hydroflow_plus :: __staged :: builder :: * ; let delay = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout_delay_multiplier = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; Duration :: from_secs ((p_id * i_am_leader_check_timeout_delay_multiplier as u32) . into ()) } ; let interval = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay , interval)) },
                                    ),
                                    location_kind: Cluster(
                                        0,
                                    ),
                                },
                                Tee {
                                    inner: RefCell {
                                        value: Fold {
                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | None },
                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | latest : & mut Option < Instant > , _ : Ballot | { * latest = Some (Instant :: now ()) ; } },
                                            input: Persist(
                                                Tee {
                                                    inner: RefCell {
                                                        value: CycleSource {
                                                            ident: Ident {
                                                                sym: cycle_1,
                                                            },
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                        },
                                                    },
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            Map {
                                f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                input: Filter {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                    input: Fold {
                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                        input: Tee {
                                            inner: RefCell {
                                                value: CycleSource {
                                                    ident: Ident {
                                                        sym: cycle_0,
                                                    },
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        ),
                    },
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Cluster(
            0,
        ),
        input: Map {
            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
            input: Network {
                from_location: Cluster(
                    0,
                ),
                to_location: Cluster(
                    0,
                ),
                serialize_pipeline: Some(
                    Operator(
                        Operator {
                            path: "map",
                            args: [
                                "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: Ballot > (& data) . unwrap () . into ()) }",
                            ],
                        },
                    ),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_pipeline: Some(
                    Operator(
                        Operator {
                            path: "map",
                            args: [
                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: Ballot > (& b) . unwrap ()) }",
                            ],
                        },
                    ),
                ),
                input: FlatMap {
                    f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_0 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                    input: Map {
                        f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ballot_num : u32 | Ballot { num : ballot_num , id : p_id } },
                        input: Map {
                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                            input: CrossSingleton(
                                Map {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                    input: CrossSingleton(
                                        Tee {
                                            inner: RefCell {
                                                value: CycleSource {
                                                    ident: Ident {
                                                        sym: cycle_4,
                                                    },
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                },
                                            },
                                        },
                                        Map {
                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                            input: Source {
                                                source: Interval(
                                                    { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_send_timeout = 1u64 ; Duration :: from_secs (i_am_leader_send_timeout) },
                                                ),
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        },
                                    ),
                                },
                                Map {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                    input: Tee {
                                        inner: RefCell {
                                            value: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_0,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        },
                                    },
                                },
                            ),
                        },
                    },
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            0,
        ),
        input: Map {
            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
            input: CrossSingleton(
                FilterMap {
                    f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | num_received : usize | if num_received > f { Some (true) } else { None } },
                    input: Fold {
                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                        input: Unique(
                            Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; | ((sender , _p1b) , _ballot_num) : ((u32 , P1b) , u32) | { sender } },
                                input: Tee {
                                    inner: RefCell {
                                        value: Filter {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                            input: CrossSingleton(
                                                Persist(
                                                    Tee {
                                                        inner: RefCell {
                                                            value: CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_2,
                                                                },
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                            },
                                                        },
                                                    },
                                                ),
                                                Tee {
                                                    inner: RefCell {
                                                        value: CycleSource {
                                                            ident: Ident {
                                                                sym: cycle_4,
                                                            },
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                        },
                                                    },
                                                },
                                            ),
                                        },
                                    },
                                },
                            },
                        ),
                    },
                },
                Map {
                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                    input: Tee {
                        inner: RefCell {
                            value: Filter {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (received_max_ballot , ballot_num) : & (Ballot , u32) | * received_max_ballot <= Ballot { num : * ballot_num , id : p_id } },
                                input: CrossSingleton(
                                    Tee {
                                        inner: RefCell {
                                            value: Fold {
                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | Ballot { num : 0 , id : 0 } },
                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                input: Persist(
                                                    Union(
                                                        Union(
                                                            Map {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_ , p1b) : (_ , P1b) | p1b . max_ballot },
                                                                input: Tee {
                                                                    inner: RefCell {
                                                                        value: CycleSource {
                                                                            ident: Ident {
                                                                                sym: cycle_2,
                                                                            },
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                            Map {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_ , p2b) : (_ , P2b) | p2b . max_ballot },
                                                                input: Tee {
                                                                    inner: RefCell {
                                                                        value: CycleSource {
                                                                            ident: Ident {
                                                                                sym: cycle_3,
                                                                            },
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        ),
                                                        Tee {
                                                            inner: RefCell {
                                                                value: CycleSource {
                                                                    ident: Ident {
                                                                        sym: cycle_1,
                                                                    },
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                },
                                                            },
                                                        },
                                                    ),
                                                ),
                                            },
                                        },
                                    },
                                    Tee {
                                        inner: RefCell {
                                            value: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_4,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        },
                                    },
                                ),
                            },
                        },
                    },
                },
            ),
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_5,
        },
        location_kind: Cluster(
            0,
        ),
        input: DeferTick(
            Union(
                Tee {
                    inner: RefCell {
                        value: Map {
                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                            input: CrossSingleton(
                                Union(
                                    Union(
                                        Map {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : i32 | max_slot + 1 },
                                            input: Map {
                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                input: CrossSingleton(
                                                    Tee {
                                                        inner: RefCell {
                                                            value: Fold {
                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : & mut i32 , (slot , (_count , _entry)) : (i32 , (u32 , LogValue)) | { if slot > * max_slot { * max_slot = slot ; } } },
                                                                input: Tee {
                                                                    inner: RefCell {
                                                                        value: FoldKeyed {
                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                            input: FlatMap {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: Filter {
                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                            input: CrossSingleton(
                                                                                                Persist(
                                                                                                    Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: CycleSource {
                                                                                                                ident: Ident {
                                                                                                                    sym: cycle_2,
                                                                                                                },
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: CycleSource {
                                                                                                            ident: Ident {
                                                                                                                sym: cycle_4,
                                                                                                            },
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                    Map {
                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                        input: Filter {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                            input: Fold {
                                                                init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                input: Tee {
                                                                    inner: RefCell {
                                                                        value: CycleSource {
                                                                            ident: Ident {
                                                                                sym: cycle_5,
                                                                            },
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                ),
                                            },
                                        },
                                        Map {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (num_payloads , next_slot) : (usize , i32) | next_slot + num_payloads as i32 },
                                            input: CrossSingleton(
                                                Tee {
                                                    inner: RefCell {
                                                        value: Map {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                            input: CrossSingleton(
                                                                Tee {
                                                                    inner: RefCell {
                                                                        value: Fold {
                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                            input: Tee {
                                                                                inner: RefCell {
                                                                                    value: Map {
                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                        input: Network {
                                                                                            from_location: Cluster(
                                                                                                2,
                                                                                            ),
                                                                                            to_location: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            serialize_pipeline: Some(
                                                                                                Operator(
                                                                                                    Operator {
                                                                                                        path: "map",
                                                                                                        args: [
                                                                                                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                            instantiate_fn: <network instantiate>,
                                                                                            deserialize_pipeline: Some(
                                                                                                Operator(
                                                                                                    Operator {
                                                                                                        path: "map",
                                                                                                        args: [
                                                                                                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                            input: Union(
                                                                                                FlatMap {
                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                    input: Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: Delta(
                                                                                                                Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: Reduce {
                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                            input: Persist(
                                                                                                                                Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: CycleSource {
                                                                                                                                            ident: Ident {
                                                                                                                                                sym: cycle_1,
                                                                                                                                            },
                                                                                                                                            location_kind: Cluster(
                                                                                                                                                2,
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                Map {
                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                    input: CrossSingleton(
                                                                                                        Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: FilterMap {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                    input: FoldKeyed {
                                                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                        input: Tee {
                                                                                                                            inner: RefCell {
                                                                                                                                value: Union(
                                                                                                                                    Map {
                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                        input: CycleSource {
                                                                                                                                            ident: Ident {
                                                                                                                                                sym: cycle_0,
                                                                                                                                            },
                                                                                                                                            location_kind: Cluster(
                                                                                                                                                2,
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                    CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_2,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            2,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                        Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Reduce {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                    input: Persist(
                                                                                                                        Tee {
                                                                                                                            inner: RefCell {
                                                                                                                                value: CycleSource {
                                                                                                                                    ident: Ident {
                                                                                                                                        sym: cycle_1,
                                                                                                                                    },
                                                                                                                                    location_kind: Cluster(
                                                                                                                                        2,
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                                Map {
                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                    input: Tee {
                                                                        inner: RefCell {
                                                                            value: Filter {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | num_payloads : & usize | * num_payloads > 0 },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: Fold {
                                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: Map {
                                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                        input: Network {
                                                                                                            from_location: Cluster(
                                                                                                                2,
                                                                                                            ),
                                                                                                            to_location: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            serialize_pipeline: Some(
                                                                                                                Operator(
                                                                                                                    Operator {
                                                                                                                        path: "map",
                                                                                                                        args: [
                                                                                                                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                            ),
                                                                                                            instantiate_fn: <network instantiate>,
                                                                                                            deserialize_pipeline: Some(
                                                                                                                Operator(
                                                                                                                    Operator {
                                                                                                                        path: "map",
                                                                                                                        args: [
                                                                                                                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                            ),
                                                                                                            input: Union(
                                                                                                                FlatMap {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                                    input: Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Delta(
                                                                                                                                Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: Reduce {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                            input: Persist(
                                                                                                                                                Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: CycleSource {
                                                                                                                                                            ident: Ident {
                                                                                                                                                                sym: cycle_1,
                                                                                                                                                            },
                                                                                                                                                            location_kind: Cluster(
                                                                                                                                                                2,
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                                Map {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                                    input: CrossSingleton(
                                                                                                                        Tee {
                                                                                                                            inner: RefCell {
                                                                                                                                value: FilterMap {
                                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                                    input: FoldKeyed {
                                                                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                                        input: Tee {
                                                                                                                                            inner: RefCell {
                                                                                                                                                value: Union(
                                                                                                                                                    Map {
                                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                                        input: CycleSource {
                                                                                                                                                            ident: Ident {
                                                                                                                                                                sym: cycle_0,
                                                                                                                                                            },
                                                                                                                                                            location_kind: Cluster(
                                                                                                                                                                2,
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                    CycleSource {
                                                                                                                                                        ident: Ident {
                                                                                                                                                            sym: cycle_2,
                                                                                                                                                        },
                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                            2,
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                        Tee {
                                                                                                                            inner: RefCell {
                                                                                                                                value: Reduce {
                                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                    input: Persist(
                                                                                                                                        Tee {
                                                                                                                                            inner: RefCell {
                                                                                                                                                value: CycleSource {
                                                                                                                                                    ident: Ident {
                                                                                                                                                        sym: cycle_1,
                                                                                                                                                    },
                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                        2,
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    },
                                                },
                                                Tee {
                                                    inner: RefCell {
                                                        value: CycleSource {
                                                            ident: Ident {
                                                                sym: cycle_5,
                                                            },
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                        },
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                    Map {
                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                        input: CrossSingleton(
                                            Tee {
                                                inner: RefCell {
                                                    value: CycleSource {
                                                        ident: Ident {
                                                            sym: cycle_5,
                                                        },
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                    },
                                                },
                                            },
                                            Map {
                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                input: Filter {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                    input: Fold {
                                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                        input: Tee {
                                                            inner: RefCell {
                                                                value: Filter {
                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | num_payloads : & usize | * num_payloads > 0 },
                                                                    input: Tee {
                                                                        inner: RefCell {
                                                                            value: Fold {
                                                                                init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: Map {
                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                            input: Network {
                                                                                                from_location: Cluster(
                                                                                                    2,
                                                                                                ),
                                                                                                to_location: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                serialize_pipeline: Some(
                                                                                                    Operator(
                                                                                                        Operator {
                                                                                                            path: "map",
                                                                                                            args: [
                                                                                                                "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ),
                                                                                                instantiate_fn: <network instantiate>,
                                                                                                deserialize_pipeline: Some(
                                                                                                    Operator(
                                                                                                        Operator {
                                                                                                            path: "map",
                                                                                                            args: [
                                                                                                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ),
                                                                                                input: Union(
                                                                                                    FlatMap {
                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                        input: Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Delta(
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Reduce {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                input: Persist(
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: CycleSource {
                                                                                                                                                ident: Ident {
                                                                                                                                                    sym: cycle_1,
                                                                                                                                                },
                                                                                                                                                location_kind: Cluster(
                                                                                                                                                    2,
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                    Map {
                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                        input: CrossSingleton(
                                                                                                            Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: FilterMap {
                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                        input: FoldKeyed {
                                                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                            input: Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: Union(
                                                                                                                                        Map {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                            input: CycleSource {
                                                                                                                                                ident: Ident {
                                                                                                                                                    sym: cycle_0,
                                                                                                                                                },
                                                                                                                                                location_kind: Cluster(
                                                                                                                                                    2,
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                        CycleSource {
                                                                                                                                            ident: Ident {
                                                                                                                                                sym: cycle_2,
                                                                                                                                            },
                                                                                                                                            location_kind: Cluster(
                                                                                                                                                2,
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                            Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: Reduce {
                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                        input: Persist(
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_1,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            2,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        ),
                                    },
                                ),
                                Map {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                    input: Tee {
                                        inner: RefCell {
                                            value: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_0,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        },
                                    },
                                },
                            ),
                        },
                    },
                },
                Map {
                    f: { use crate :: __staged :: cluster :: paxos :: * ; | _ : bool | 0 },
                    input: Map {
                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                        input: CrossSingleton(
                            Tee {
                                inner: RefCell {
                                    value: CycleSource {
                                        ident: Ident {
                                            sym: cycle_0,
                                        },
                                        location_kind: Cluster(
                                            0,
                                        ),
                                    },
                                },
                            },
                            Map {
                                f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                input: Filter {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                    input: Fold {
                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                        input: Tee {
                                            inner: RefCell {
                                                value: Map {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                    input: CrossSingleton(
                                                        Union(
                                                            Union(
                                                                Map {
                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : i32 | max_slot + 1 },
                                                                    input: Map {
                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                        input: CrossSingleton(
                                                                            Tee {
                                                                                inner: RefCell {
                                                                                    value: Fold {
                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : & mut i32 , (slot , (_count , _entry)) : (i32 , (u32 , LogValue)) | { if slot > * max_slot { * max_slot = slot ; } } },
                                                                                        input: Tee {
                                                                                            inner: RefCell {
                                                                                                value: FoldKeyed {
                                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                                    input: FlatMap {
                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                                        input: Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Filter {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                                    input: CrossSingleton(
                                                                                                                        Persist(
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_2,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            0,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ),
                                                                                                                        Tee {
                                                                                                                            inner: RefCell {
                                                                                                                                value: CycleSource {
                                                                                                                                    ident: Ident {
                                                                                                                                        sym: cycle_4,
                                                                                                                                    },
                                                                                                                                    location_kind: Cluster(
                                                                                                                                        0,
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                            Map {
                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                input: Filter {
                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                                    input: Fold {
                                                                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                        input: Tee {
                                                                                            inner: RefCell {
                                                                                                value: CycleSource {
                                                                                                    ident: Ident {
                                                                                                        sym: cycle_5,
                                                                                                    },
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        ),
                                                                    },
                                                                },
                                                                Map {
                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (num_payloads , next_slot) : (usize , i32) | next_slot + num_payloads as i32 },
                                                                    input: CrossSingleton(
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: Map {
                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                                    input: CrossSingleton(
                                                                                        Tee {
                                                                                            inner: RefCell {
                                                                                                value: Fold {
                                                                                                    init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                                    acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                                    input: Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: Map {
                                                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                                input: Network {
                                                                                                                    from_location: Cluster(
                                                                                                                        2,
                                                                                                                    ),
                                                                                                                    to_location: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                    serialize_pipeline: Some(
                                                                                                                        Operator(
                                                                                                                            Operator {
                                                                                                                                path: "map",
                                                                                                                                args: [
                                                                                                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                                                ],
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    instantiate_fn: <network instantiate>,
                                                                                                                    deserialize_pipeline: Some(
                                                                                                                        Operator(
                                                                                                                            Operator {
                                                                                                                                path: "map",
                                                                                                                                args: [
                                                                                                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                                                ],
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                    input: Union(
                                                                                                                        FlatMap {
                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                                            input: Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: Delta(
                                                                                                                                        Tee {
                                                                                                                                            inner: RefCell {
                                                                                                                                                value: Reduce {
                                                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                                    input: Persist(
                                                                                                                                                        Tee {
                                                                                                                                                            inner: RefCell {
                                                                                                                                                                value: CycleSource {
                                                                                                                                                                    ident: Ident {
                                                                                                                                                                        sym: cycle_1,
                                                                                                                                                                    },
                                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                                        2,
                                                                                                                                                                    ),
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                        Map {
                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                                            input: CrossSingleton(
                                                                                                                                Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: FilterMap {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                                            input: FoldKeyed {
                                                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                                                input: Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: Union(
                                                                                                                                                            Map {
                                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                                                input: CycleSource {
                                                                                                                                                                    ident: Ident {
                                                                                                                                                                        sym: cycle_0,
                                                                                                                                                                    },
                                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                                        2,
                                                                                                                                                                    ),
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                            CycleSource {
                                                                                                                                                                ident: Ident {
                                                                                                                                                                    sym: cycle_2,
                                                                                                                                                                },
                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                    2,
                                                                                                                                                                ),
                                                                                                                                                            },
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                                Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: Reduce {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                            input: Persist(
                                                                                                                                                Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: CycleSource {
                                                                                                                                                            ident: Ident {
                                                                                                                                                                sym: cycle_1,
                                                                                                                                                            },
                                                                                                                                                            location_kind: Cluster(
                                                                                                                                                                2,
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        Map {
                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: Filter {
                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | num_payloads : & usize | * num_payloads > 0 },
                                                                                                        input: Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Fold {
                                                                                                                    init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                                                    acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                                                    input: Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Map {
                                                                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                                                input: Network {
                                                                                                                                    from_location: Cluster(
                                                                                                                                        2,
                                                                                                                                    ),
                                                                                                                                    to_location: Cluster(
                                                                                                                                        0,
                                                                                                                                    ),
                                                                                                                                    serialize_pipeline: Some(
                                                                                                                                        Operator(
                                                                                                                                            Operator {
                                                                                                                                                path: "map",
                                                                                                                                                args: [
                                                                                                                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    ),
                                                                                                                                    instantiate_fn: <network instantiate>,
                                                                                                                                    deserialize_pipeline: Some(
                                                                                                                                        Operator(
                                                                                                                                            Operator {
                                                                                                                                                path: "map",
                                                                                                                                                args: [
                                                                                                                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    ),
                                                                                                                                    input: Union(
                                                                                                                                        FlatMap {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                                                            input: Tee {
                                                                                                                                                inner: RefCell {
                                                                                                                                                    value: Delta(
                                                                                                                                                        Tee {
                                                                                                                                                            inner: RefCell {
                                                                                                                                                                value: Reduce {
                                                                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                                                    input: Persist(
                                                                                                                                                                        Tee {
                                                                                                                                                                            inner: RefCell {
                                                                                                                                                                                value: CycleSource {
                                                                                                                                                                                    ident: Ident {
                                                                                                                                                                                        sym: cycle_1,
                                                                                                                                                                                    },
                                                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                                                        2,
                                                                                                                                                                                    ),
                                                                                                                                                                                },
                                                                                                                                                                            },
                                                                                                                                                                        },
                                                                                                                                                                    ),
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                        Map {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                                                            input: CrossSingleton(
                                                                                                                                                Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: FilterMap {
                                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                                                            input: FoldKeyed {
                                                                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                                                                input: Tee {
                                                                                                                                                                    inner: RefCell {
                                                                                                                                                                        value: Union(
                                                                                                                                                                            Map {
                                                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                                                                input: CycleSource {
                                                                                                                                                                                    ident: Ident {
                                                                                                                                                                                        sym: cycle_0,
                                                                                                                                                                                    },
                                                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                                                        2,
                                                                                                                                                                                    ),
                                                                                                                                                                                },
                                                                                                                                                                            },
                                                                                                                                                                            CycleSource {
                                                                                                                                                                                ident: Ident {
                                                                                                                                                                                    sym: cycle_2,
                                                                                                                                                                                },
                                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                                    2,
                                                                                                                                                                                ),
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                                Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: Reduce {
                                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                                            input: Persist(
                                                                                                                                                                Tee {
                                                                                                                                                                    inner: RefCell {
                                                                                                                                                                        value: CycleSource {
                                                                                                                                                                            ident: Ident {
                                                                                                                                                                                sym: cycle_1,
                                                                                                                                                                            },
                                                                                                                                                                            location_kind: Cluster(
                                                                                                                                                                                2,
                                                                                                                                                                            ),
                                                                                                                                                                        },
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_5,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            Map {
                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                input: CrossSingleton(
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: CycleSource {
                                                                                ident: Ident {
                                                                                    sym: cycle_5,
                                                                                },
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                            },
                                                                        },
                                                                    },
                                                                    Map {
                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                        input: Filter {
                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                            input: Fold {
                                                                                init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: Filter {
                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | num_payloads : & usize | * num_payloads > 0 },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: Fold {
                                                                                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                                        input: Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Map {
                                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                                    input: Network {
                                                                                                                        from_location: Cluster(
                                                                                                                            2,
                                                                                                                        ),
                                                                                                                        to_location: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                        serialize_pipeline: Some(
                                                                                                                            Operator(
                                                                                                                                Operator {
                                                                                                                                    path: "map",
                                                                                                                                    args: [
                                                                                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                        instantiate_fn: <network instantiate>,
                                                                                                                        deserialize_pipeline: Some(
                                                                                                                            Operator(
                                                                                                                                Operator {
                                                                                                                                    path: "map",
                                                                                                                                    args: [
                                                                                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                        input: Union(
                                                                                                                            FlatMap {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                                                input: Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: Delta(
                                                                                                                                            Tee {
                                                                                                                                                inner: RefCell {
                                                                                                                                                    value: Reduce {
                                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                                        input: Persist(
                                                                                                                                                            Tee {
                                                                                                                                                                inner: RefCell {
                                                                                                                                                                    value: CycleSource {
                                                                                                                                                                        ident: Ident {
                                                                                                                                                                            sym: cycle_1,
                                                                                                                                                                        },
                                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                                            2,
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                            Map {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                                                input: CrossSingleton(
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: FilterMap {
                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                                                input: FoldKeyed {
                                                                                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                                                    input: Tee {
                                                                                                                                                        inner: RefCell {
                                                                                                                                                            value: Union(
                                                                                                                                                                Map {
                                                                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                                                    input: CycleSource {
                                                                                                                                                                        ident: Ident {
                                                                                                                                                                            sym: cycle_0,
                                                                                                                                                                        },
                                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                                            2,
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                                CycleSource {
                                                                                                                                                                    ident: Ident {
                                                                                                                                                                        sym: cycle_2,
                                                                                                                                                                    },
                                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                                        2,
                                                                                                                                                                    ),
                                                                                                                                                                },
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: Reduce {
                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                                input: Persist(
                                                                                                                                                    Tee {
                                                                                                                                                        inner: RefCell {
                                                                                                                                                            value: CycleSource {
                                                                                                                                                                ident: Ident {
                                                                                                                                                                    sym: cycle_1,
                                                                                                                                                                },
                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                    2,
                                                                                                                                                                ),
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Map {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                            input: Tee {
                                                                inner: RefCell {
                                                                    value: CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_0,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        ),
                    },
                },
            ),
        ),
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Cluster(
            2,
        ),
        input: Map {
            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
            input: Network {
                from_location: Cluster(
                    0,
                ),
                to_location: Cluster(
                    2,
                ),
                serialize_pipeline: Some(
                    Operator(
                        Operator {
                            path: "map",
                            args: [
                                "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: Ballot > (& data) . unwrap () . into ()) }",
                            ],
                        },
                    ),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_pipeline: Some(
                    Operator(
                        Operator {
                            path: "map",
                            args: [
                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: Ballot > (& b) . unwrap ()) }",
                            ],
                        },
                    ),
                ),
                input: FlatMap {
                    f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_2 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                    input: Map {
                        f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (_is_leader , ballot_num) : (bool , u32) | Ballot { num : ballot_num , id : p_id } },
                        input: CrossSingleton(
                            Map {
                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                input: CrossSingleton(
                                    Tee {
                                        inner: RefCell {
                                            value: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_0,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        },
                                    },
                                    Map {
                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                        input: Filter {
                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                            input: Fold {
                                                init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                input: Tee {
                                                    inner: RefCell {
                                                        value: CycleSource {
                                                            ident: Ident {
                                                                sym: cycle_5,
                                                            },
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                ),
                            },
                            Tee {
                                inner: RefCell {
                                    value: CycleSource {
                                        ident: Ident {
                                            sym: cycle_4,
                                        },
                                        location_kind: Cluster(
                                            0,
                                        ),
                                    },
                                },
                            },
                        ),
                    },
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_6,
        },
        location_kind: Cluster(
            0,
        ),
        input: DeferTick(
            Difference(
                Map {
                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (slot , (_count , _p2b)) : (i32 , (usize , P2b)) | slot },
                    input: Tee {
                        inner: RefCell {
                            value: Filter {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                input: Tee {
                                    inner: RefCell {
                                        value: FoldKeyed {
                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                            input: FilterMap {
                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                input: Tee {
                                                    inner: RefCell {
                                                        value: Union(
                                                            Tee {
                                                                inner: RefCell {
                                                                    value: CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_3,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                            CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_7,
                                                                },
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                Tee {
                    inner: RefCell {
                        value: FilterMap {
                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (slot , (count , _p2b)) : (i32 , (usize , P2b)) | if count == 2 * f + 1 { Some (slot) } else { None } },
                            input: Tee {
                                inner: RefCell {
                                    value: FoldKeyed {
                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                        input: FilterMap {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                            input: Tee {
                                                inner: RefCell {
                                                    value: Union(
                                                        Tee {
                                                            inner: RefCell {
                                                                value: CycleSource {
                                                                    ident: Ident {
                                                                        sym: cycle_3,
                                                                    },
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                },
                                                            },
                                                        },
                                                        CycleSource {
                                                            ident: Ident {
                                                                sym: cycle_7,
                                                            },
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ),
        ),
    },
    CycleSink {
        ident: Ident {
            sym: cycle_7,
        },
        location_kind: Cluster(
            0,
        ),
        input: DeferTick(
            Map {
                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (sender , p2b)) : (i32 , (u32 , P2b)) | (sender , p2b) },
                input: AntiJoin(
                    Map {
                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | (p2b . slot , (sender , p2b)) },
                        input: Tee {
                            inner: RefCell {
                                value: Union(
                                    Tee {
                                        inner: RefCell {
                                            value: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_3,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        },
                                    },
                                    CycleSource {
                                        ident: Ident {
                                            sym: cycle_7,
                                        },
                                        location_kind: Cluster(
                                            0,
                                        ),
                                    },
                                ),
                            },
                        },
                    },
                    Tee {
                        inner: RefCell {
                            value: FilterMap {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (slot , (count , _p2b)) : (i32 , (usize , P2b)) | if count == 2 * f + 1 { Some (slot) } else { None } },
                                input: Tee {
                                    inner: RefCell {
                                        value: FoldKeyed {
                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                            input: FilterMap {
                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                input: Tee {
                                                    inner: RefCell {
                                                        value: Union(
                                                            Tee {
                                                                inner: RefCell {
                                                                    value: CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_3,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                            CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_7,
                                                                },
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                ),
            },
        ),
    },
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; | s | println ! ("{}" , s) },
        input: Source {
            source: Iter(
                { use crate :: __staged :: cluster :: paxos :: * ; ["Acceptors say hello"] },
            ),
            location_kind: Cluster(
                1,
            ),
        },
    },
    ForEach {
        f: { use crate :: __staged :: cluster :: paxos :: * ; | p1a : P1a | println ! ("Acceptor received P1a: {:?}" , p1a) },
        input: Tee {
            inner: RefCell {
                value: Map {
                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                    input: Network {
                        from_location: Cluster(
                            0,
                        ),
                        to_location: Cluster(
                            1,
                        ),
                        serialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& data) . unwrap () . into ()) }",
                                    ],
                                },
                            ),
                        ),
                        instantiate_fn: <network instantiate>,
                        deserialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& b) . unwrap ()) }",
                                    ],
                                },
                            ),
                        ),
                        input: FlatMap {
                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                            input: Map {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ballot_num : u32 | P1a { ballot : Ballot { num : ballot_num , id : p_id } } },
                                input: Map {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                    input: CrossSingleton(
                                        Tee {
                                            inner: RefCell {
                                                value: CycleSource {
                                                    ident: Ident {
                                                        sym: cycle_4,
                                                    },
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                },
                                            },
                                        },
                                        Map {
                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                            input: Tee {
                                                inner: RefCell {
                                                    value: Filter {
                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; move | (_ , latest_received_i_am_leader) : & (_ , Option < Instant >) | { if let Some (latest_received_i_am_leader) = latest_received_i_am_leader { (Instant :: now () . duration_since (* latest_received_i_am_leader)) > Duration :: from_secs (i_am_leader_check_timeout) } else { true } } },
                                                        input: Map {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                            input: CrossSingleton(
                                                                CrossSingleton(
                                                                    Source {
                                                                        source: Stream(
                                                                            { use hydroflow_plus :: __staged :: builder :: * ; let delay = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout_delay_multiplier = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; Duration :: from_secs ((p_id * i_am_leader_check_timeout_delay_multiplier as u32) . into ()) } ; let interval = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay , interval)) },
                                                                        ),
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                    },
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: Fold {
                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | None },
                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | latest : & mut Option < Instant > , _ : Ballot | { * latest = Some (Instant :: now ()) ; } },
                                                                                input: Persist(
                                                                                    Tee {
                                                                                        inner: RefCell {
                                                                                            value: CycleSource {
                                                                                                ident: Ident {
                                                                                                    sym: cycle_1,
                                                                                                },
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    },
                                                                ),
                                                                Map {
                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                    input: Filter {
                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                        input: Fold {
                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                            input: Tee {
                                                                                inner: RefCell {
                                                                                    value: CycleSource {
                                                                                        ident: Ident {
                                                                                            sym: cycle_0,
                                                                                        },
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    ),
                                },
                            },
                        },
                    },
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_2,
        },
        location_kind: Cluster(
            0,
        ),
        input: Network {
            from_location: Cluster(
                1,
            ),
            to_location: Cluster(
                0,
            ),
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P1b > (& data) . unwrap () . into ()) }",
                        ],
                    },
                ),
            ),
            instantiate_fn: <network instantiate>,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P1b > (& b) . unwrap ()) }",
                        ],
                    },
                ),
            ),
            input: Map {
                f: { use crate :: __staged :: cluster :: paxos :: * ; | ((p1a , max_ballot) , (_prev_checkpoint , log)) : ((P1a , Ballot) , (i32 , HashMap :: < i32 , LogValue >)) | (p1a . ballot . id , P1b { ballot : p1a . ballot , max_ballot , accepted : log }) },
                input: CrossSingleton(
                    CrossSingleton(
                        Tee {
                            inner: RefCell {
                                value: Map {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                    input: Network {
                                        from_location: Cluster(
                                            0,
                                        ),
                                        to_location: Cluster(
                                            1,
                                        ),
                                        serialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& data) . unwrap () . into ()) }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        instantiate_fn: <network instantiate>,
                                        deserialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& b) . unwrap ()) }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        input: FlatMap {
                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                            input: Map {
                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ballot_num : u32 | P1a { ballot : Ballot { num : ballot_num , id : p_id } } },
                                                input: Map {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                    input: CrossSingleton(
                                                        Tee {
                                                            inner: RefCell {
                                                                value: CycleSource {
                                                                    ident: Ident {
                                                                        sym: cycle_4,
                                                                    },
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                },
                                                            },
                                                        },
                                                        Map {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                            input: Tee {
                                                                inner: RefCell {
                                                                    value: Filter {
                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; move | (_ , latest_received_i_am_leader) : & (_ , Option < Instant >) | { if let Some (latest_received_i_am_leader) = latest_received_i_am_leader { (Instant :: now () . duration_since (* latest_received_i_am_leader)) > Duration :: from_secs (i_am_leader_check_timeout) } else { true } } },
                                                                        input: Map {
                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                            input: CrossSingleton(
                                                                                CrossSingleton(
                                                                                    Source {
                                                                                        source: Stream(
                                                                                            { use hydroflow_plus :: __staged :: builder :: * ; let delay = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout_delay_multiplier = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; Duration :: from_secs ((p_id * i_am_leader_check_timeout_delay_multiplier as u32) . into ()) } ; let interval = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay , interval)) },
                                                                                        ),
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                    },
                                                                                    Tee {
                                                                                        inner: RefCell {
                                                                                            value: Fold {
                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | None },
                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | latest : & mut Option < Instant > , _ : Ballot | { * latest = Some (Instant :: now ()) ; } },
                                                                                                input: Persist(
                                                                                                    Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: CycleSource {
                                                                                                                ident: Ident {
                                                                                                                    sym: cycle_1,
                                                                                                                },
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                Map {
                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                    input: Filter {
                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                                        input: Fold {
                                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: CycleSource {
                                                                                                        ident: Ident {
                                                                                                            sym: cycle_0,
                                                                                                        },
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        Tee {
                            inner: RefCell {
                                value: Fold {
                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | Ballot { num : 0 , id : 0 } },
                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_ballot : & mut Ballot , p1a : P1a | { if p1a . ballot > * max_ballot { * max_ballot = p1a . ballot ; } } },
                                    input: Persist(
                                        Tee {
                                            inner: RefCell {
                                                value: Map {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                    input: Network {
                                                        from_location: Cluster(
                                                            0,
                                                        ),
                                                        to_location: Cluster(
                                                            1,
                                                        ),
                                                        serialize_pipeline: Some(
                                                            Operator(
                                                                Operator {
                                                                    path: "map",
                                                                    args: [
                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& data) . unwrap () . into ()) }",
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        instantiate_fn: <network instantiate>,
                                                        deserialize_pipeline: Some(
                                                            Operator(
                                                                Operator {
                                                                    path: "map",
                                                                    args: [
                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& b) . unwrap ()) }",
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        input: FlatMap {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                            input: Map {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ballot_num : u32 | P1a { ballot : Ballot { num : ballot_num , id : p_id } } },
                                                                input: Map {
                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                    input: CrossSingleton(
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_4,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                        Map {
                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                            input: Tee {
                                                                                inner: RefCell {
                                                                                    value: Filter {
                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; move | (_ , latest_received_i_am_leader) : & (_ , Option < Instant >) | { if let Some (latest_received_i_am_leader) = latest_received_i_am_leader { (Instant :: now () . duration_since (* latest_received_i_am_leader)) > Duration :: from_secs (i_am_leader_check_timeout) } else { true } } },
                                                                                        input: Map {
                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                                            input: CrossSingleton(
                                                                                                CrossSingleton(
                                                                                                    Source {
                                                                                                        source: Stream(
                                                                                                            { use hydroflow_plus :: __staged :: builder :: * ; let delay = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout_delay_multiplier = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; Duration :: from_secs ((p_id * i_am_leader_check_timeout_delay_multiplier as u32) . into ()) } ; let interval = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay , interval)) },
                                                                                                        ),
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                    },
                                                                                                    Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: Fold {
                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | None },
                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | latest : & mut Option < Instant > , _ : Ballot | { * latest = Some (Instant :: now ()) ; } },
                                                                                                                input: Persist(
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: CycleSource {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cycle_1,
                                                                                                                                },
                                                                                                                                location_kind: Cluster(
                                                                                                                                    0,
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                Map {
                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                                    input: Filter {
                                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                                                        input: Fold {
                                                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                                            input: Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: CycleSource {
                                                                                                                        ident: Ident {
                                                                                                                            sym: cycle_0,
                                                                                                                        },
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    ),
                                },
                            },
                        },
                    ),
                    Fold {
                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (- 1 , HashMap :: < i32 , LogValue > :: new ()) },
                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | (prev_checkpoint , log) : & mut (i32 , HashMap :: < i32 , LogValue >) , (new_checkpoint , p2a) : (i32 , P2a) | { if new_checkpoint != - 1 { for slot in * prev_checkpoint .. new_checkpoint { log . remove (& slot) ; } * prev_checkpoint = new_checkpoint ; } else { if p2a . slot > * prev_checkpoint { match log . get (& p2a . slot) { None => { log . insert (p2a . slot , LogValue { ballot : p2a . ballot , value : p2a . value , } ,) ; } Some (prev_p2a) => { if p2a . ballot > prev_p2a . ballot { log . insert (p2a . slot , LogValue { ballot : p2a . ballot , value : p2a . value , } ,) ; } } } ; } } } },
                        input: Persist(
                            Union(
                                FilterMap {
                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (p2a , max_ballot) : (P2a , Ballot) | if p2a . ballot >= max_ballot { Some ((- 1 , p2a)) } else { None } },
                                    input: CrossSingleton(
                                        Tee {
                                            inner: RefCell {
                                                value: Map {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                    input: Network {
                                                        from_location: Cluster(
                                                            0,
                                                        ),
                                                        to_location: Cluster(
                                                            1,
                                                        ),
                                                        serialize_pipeline: Some(
                                                            Operator(
                                                                Operator {
                                                                    path: "map",
                                                                    args: [
                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P2a > (& data) . unwrap () . into ()) }",
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        instantiate_fn: <network instantiate>,
                                                        deserialize_pipeline: Some(
                                                            Operator(
                                                                Operator {
                                                                    path: "map",
                                                                    args: [
                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P2a > (& b) . unwrap ()) }",
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        input: FlatMap {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                            input: Map {
                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                input: CrossSingleton(
                                                                    Union(
                                                                        Map {
                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                            input: CrossSingleton(
                                                                                Union(
                                                                                    FilterMap {
                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((slot , (count , entry)) , ballot_num) : ((i32 , (u32 , LogValue)) , u32) | if count <= f as u32 { Some (P2a { ballot : Ballot { num : ballot_num , id : p_id , } , slot , value : entry . value , }) } else { None } },
                                                                                        input: CrossSingleton(
                                                                                            Tee {
                                                                                                inner: RefCell {
                                                                                                    value: FoldKeyed {
                                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                                        input: FlatMap {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                                            input: Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: Filter {
                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                                        input: CrossSingleton(
                                                                                                                            Persist(
                                                                                                                                Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: CycleSource {
                                                                                                                                            ident: Ident {
                                                                                                                                                sym: cycle_2,
                                                                                                                                            },
                                                                                                                                            location_kind: Cluster(
                                                                                                                                                0,
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            ),
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_4,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            0,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            Tee {
                                                                                                inner: RefCell {
                                                                                                    value: CycleSource {
                                                                                                        ident: Ident {
                                                                                                            sym: cycle_4,
                                                                                                        },
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                    Map {
                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (slot , ballot_num) : (i32 , u32) | P2a { ballot : Ballot { num : ballot_num , id : p_id } , slot , value : ClientPayload { key : 0 , value : "0" . to_string () } } },
                                                                                        input: CrossSingleton(
                                                                                            Difference(
                                                                                                FlatMap {
                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : i32 | 0 .. max_slot },
                                                                                                    input: Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: Fold {
                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : & mut i32 , (slot , (_count , _entry)) : (i32 , (u32 , LogValue)) | { if slot > * max_slot { * max_slot = slot ; } } },
                                                                                                                input: Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: FoldKeyed {
                                                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                                                            input: FlatMap {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                                                                input: Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: Filter {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                                                            input: CrossSingleton(
                                                                                                                                                Persist(
                                                                                                                                                    Tee {
                                                                                                                                                        inner: RefCell {
                                                                                                                                                            value: CycleSource {
                                                                                                                                                                ident: Ident {
                                                                                                                                                                    sym: cycle_2,
                                                                                                                                                                },
                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                    0,
                                                                                                                                                                ),
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                ),
                                                                                                                                                Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: CycleSource {
                                                                                                                                                            ident: Ident {
                                                                                                                                                                sym: cycle_4,
                                                                                                                                                            },
                                                                                                                                                            location_kind: Cluster(
                                                                                                                                                                0,
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                Map {
                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (slot , _) : (i32 , (u32 , LogValue)) | slot },
                                                                                                    input: Tee {
                                                                                                        inner: RefCell {
                                                                                                            value: FoldKeyed {
                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                                                input: FlatMap {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                                                    input: Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Filter {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                                                input: CrossSingleton(
                                                                                                                                    Persist(
                                                                                                                                        Tee {
                                                                                                                                            inner: RefCell {
                                                                                                                                                value: CycleSource {
                                                                                                                                                    ident: Ident {
                                                                                                                                                        sym: cycle_2,
                                                                                                                                                    },
                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                        0,
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: CycleSource {
                                                                                                                                                ident: Ident {
                                                                                                                                                    sym: cycle_4,
                                                                                                                                                },
                                                                                                                                                location_kind: Cluster(
                                                                                                                                                    0,
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            Tee {
                                                                                                inner: RefCell {
                                                                                                    value: CycleSource {
                                                                                                        ident: Ident {
                                                                                                            sym: cycle_4,
                                                                                                        },
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                Map {
                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                    input: Filter {
                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                                        input: Fold {
                                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: CycleSource {
                                                                                                        ident: Ident {
                                                                                                            sym: cycle_5,
                                                                                                        },
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                        Map {
                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (((index , payload) , next_slot) , ballot_num) : (((usize , ClientPayload) , i32) , u32) | P2a { ballot : Ballot { num : ballot_num , id : p_id } , slot : next_slot + index as i32 , value : payload } },
                                                                            input: CrossSingleton(
                                                                                CrossSingleton(
                                                                                    Enumerate(
                                                                                        Tee {
                                                                                            inner: RefCell {
                                                                                                value: Map {
                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                    input: Network {
                                                                                                        from_location: Cluster(
                                                                                                            2,
                                                                                                        ),
                                                                                                        to_location: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        serialize_pipeline: Some(
                                                                                                            Operator(
                                                                                                                Operator {
                                                                                                                    path: "map",
                                                                                                                    args: [
                                                                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ),
                                                                                                        instantiate_fn: <network instantiate>,
                                                                                                        deserialize_pipeline: Some(
                                                                                                            Operator(
                                                                                                                Operator {
                                                                                                                    path: "map",
                                                                                                                    args: [
                                                                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ),
                                                                                                        input: Union(
                                                                                                            FlatMap {
                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                                                input: Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: Delta(
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: Reduce {
                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                        input: Persist(
                                                                                                                                            Tee {
                                                                                                                                                inner: RefCell {
                                                                                                                                                    value: CycleSource {
                                                                                                                                                        ident: Ident {
                                                                                                                                                            sym: cycle_1,
                                                                                                                                                        },
                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                            2,
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                            Map {
                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                                                input: CrossSingleton(
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: FilterMap {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                                                input: FoldKeyed {
                                                                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                                    input: Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: Union(
                                                                                                                                                Map {
                                                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                                    input: CycleSource {
                                                                                                                                                        ident: Ident {
                                                                                                                                                            sym: cycle_0,
                                                                                                                                                        },
                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                            2,
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                                CycleSource {
                                                                                                                                                    ident: Ident {
                                                                                                                                                        sym: cycle_2,
                                                                                                                                                    },
                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                        2,
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Reduce {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                                input: Persist(
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: CycleSource {
                                                                                                                                                ident: Ident {
                                                                                                                                                    sym: cycle_1,
                                                                                                                                                },
                                                                                                                                                location_kind: Cluster(
                                                                                                                                                    2,
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    Tee {
                                                                                        inner: RefCell {
                                                                                            value: CycleSource {
                                                                                                ident: Ident {
                                                                                                    sym: cycle_5,
                                                                                                },
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                Tee {
                                                                                    inner: RefCell {
                                                                                        value: CycleSource {
                                                                                            ident: Ident {
                                                                                                sym: cycle_4,
                                                                                            },
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    Map {
                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                        input: Tee {
                                                                            inner: RefCell {
                                                                                value: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_0,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                        Tee {
                                            inner: RefCell {
                                                value: Fold {
                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | Ballot { num : 0 , id : 0 } },
                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_ballot : & mut Ballot , p1a : P1a | { if p1a . ballot > * max_ballot { * max_ballot = p1a . ballot ; } } },
                                                    input: Persist(
                                                        Tee {
                                                            inner: RefCell {
                                                                value: Map {
                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                    input: Network {
                                                                        from_location: Cluster(
                                                                            0,
                                                                        ),
                                                                        to_location: Cluster(
                                                                            1,
                                                                        ),
                                                                        serialize_pipeline: Some(
                                                                            Operator(
                                                                                Operator {
                                                                                    path: "map",
                                                                                    args: [
                                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& data) . unwrap () . into ()) }",
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        instantiate_fn: <network instantiate>,
                                                                        deserialize_pipeline: Some(
                                                                            Operator(
                                                                                Operator {
                                                                                    path: "map",
                                                                                    args: [
                                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& b) . unwrap ()) }",
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        input: FlatMap {
                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                            input: Map {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ballot_num : u32 | P1a { ballot : Ballot { num : ballot_num , id : p_id } } },
                                                                                input: Map {
                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                                    input: CrossSingleton(
                                                                                        Tee {
                                                                                            inner: RefCell {
                                                                                                value: CycleSource {
                                                                                                    ident: Ident {
                                                                                                        sym: cycle_4,
                                                                                                    },
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        Map {
                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: Filter {
                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; move | (_ , latest_received_i_am_leader) : & (_ , Option < Instant >) | { if let Some (latest_received_i_am_leader) = latest_received_i_am_leader { (Instant :: now () . duration_since (* latest_received_i_am_leader)) > Duration :: from_secs (i_am_leader_check_timeout) } else { true } } },
                                                                                                        input: Map {
                                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                                                            input: CrossSingleton(
                                                                                                                CrossSingleton(
                                                                                                                    Source {
                                                                                                                        source: Stream(
                                                                                                                            { use hydroflow_plus :: __staged :: builder :: * ; let delay = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout_delay_multiplier = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; Duration :: from_secs ((p_id * i_am_leader_check_timeout_delay_multiplier as u32) . into ()) } ; let interval = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay , interval)) },
                                                                                                                        ),
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Fold {
                                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | None },
                                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | latest : & mut Option < Instant > , _ : Ballot | { * latest = Some (Instant :: now ()) ; } },
                                                                                                                                input: Persist(
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: CycleSource {
                                                                                                                                                ident: Ident {
                                                                                                                                                    sym: cycle_1,
                                                                                                                                                },
                                                                                                                                                location_kind: Cluster(
                                                                                                                                                    0,
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                Map {
                                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                                                    input: Filter {
                                                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                                                                        input: Fold {
                                                                                                                            init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                                                            acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                                                            input: Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_0,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            0,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        },
                                    ),
                                },
                                Map {
                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | min_seq : i32 | (min_seq , P2a { ballot : Ballot { num : 0 , id : 0 } , slot : - 1 , value : ClientPayload { key : 0 , value : "" . to_string () , } }) },
                                    input: Delta(
                                        Fold {
                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | min_seq : & mut i32 , (_sender , seq) : (u32 , i32) | { if * min_seq == - 1 || seq < * min_seq { * min_seq = seq ; } } },
                                            input: Map {
                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                input: CrossSingleton(
                                                    Tee {
                                                        inner: RefCell {
                                                            value: ReduceKeyed {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_seq : & mut i32 , seq : i32 | { if seq > * curr_seq { * curr_seq = seq ; } } },
                                                                input: Persist(
                                                                    CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_0,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            1,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    },
                                                    Map {
                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                        input: FilterMap {
                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | num_received : usize | if num_received == f + 1 { Some (true) } else { None } },
                                                            input: Fold {
                                                                init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                input: Tee {
                                                                    inner: RefCell {
                                                                        value: ReduceKeyed {
                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_seq : & mut i32 , seq : i32 | { if seq > * curr_seq { * curr_seq = seq ; } } },
                                                                            input: Persist(
                                                                                CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_0,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        1,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_3,
        },
        location_kind: Cluster(
            0,
        ),
        input: Network {
            from_location: Cluster(
                1,
            ),
            to_location: Cluster(
                0,
            ),
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P2b > (& data) . unwrap () . into ()) }",
                        ],
                    },
                ),
            ),
            instantiate_fn: <network instantiate>,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P2b > (& b) . unwrap ()) }",
                        ],
                    },
                ),
            ),
            input: Map {
                f: { use crate :: __staged :: cluster :: paxos :: * ; | (p2a , max_ballot) : (P2a , Ballot) | (p2a . ballot . id , P2b { ballot : p2a . ballot , max_ballot , slot : p2a . slot , value : p2a . value }) },
                input: CrossSingleton(
                    Tee {
                        inner: RefCell {
                            value: Map {
                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                input: Network {
                                    from_location: Cluster(
                                        0,
                                    ),
                                    to_location: Cluster(
                                        1,
                                    ),
                                    serialize_pipeline: Some(
                                        Operator(
                                            Operator {
                                                path: "map",
                                                args: [
                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P2a > (& data) . unwrap () . into ()) }",
                                                ],
                                            },
                                        ),
                                    ),
                                    instantiate_fn: <network instantiate>,
                                    deserialize_pipeline: Some(
                                        Operator(
                                            Operator {
                                                path: "map",
                                                args: [
                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P2a > (& b) . unwrap ()) }",
                                                ],
                                            },
                                        ),
                                    ),
                                    input: FlatMap {
                                        f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                        input: Map {
                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                            input: CrossSingleton(
                                                Union(
                                                    Map {
                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                        input: CrossSingleton(
                                                            Union(
                                                                FilterMap {
                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((slot , (count , entry)) , ballot_num) : ((i32 , (u32 , LogValue)) , u32) | if count <= f as u32 { Some (P2a { ballot : Ballot { num : ballot_num , id : p_id , } , slot , value : entry . value , }) } else { None } },
                                                                    input: CrossSingleton(
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: FoldKeyed {
                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                    input: FlatMap {
                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                        input: Tee {
                                                                                            inner: RefCell {
                                                                                                value: Filter {
                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                    input: CrossSingleton(
                                                                                                        Persist(
                                                                                                            Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: CycleSource {
                                                                                                                        ident: Ident {
                                                                                                                            sym: cycle_2,
                                                                                                                        },
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: CycleSource {
                                                                                                                    ident: Ident {
                                                                                                                        sym: cycle_4,
                                                                                                                    },
                                                                                                                    location_kind: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_4,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                                Map {
                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (slot , ballot_num) : (i32 , u32) | P2a { ballot : Ballot { num : ballot_num , id : p_id } , slot , value : ClientPayload { key : 0 , value : "0" . to_string () } } },
                                                                    input: CrossSingleton(
                                                                        Difference(
                                                                            FlatMap {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : i32 | 0 .. max_slot },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: Fold {
                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_slot : & mut i32 , (slot , (_count , _entry)) : (i32 , (u32 , LogValue)) | { if slot > * max_slot { * max_slot = slot ; } } },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: FoldKeyed {
                                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                                        input: FlatMap {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                                            input: Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: Filter {
                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                                        input: CrossSingleton(
                                                                                                                            Persist(
                                                                                                                                Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: CycleSource {
                                                                                                                                            ident: Ident {
                                                                                                                                                sym: cycle_2,
                                                                                                                                            },
                                                                                                                                            location_kind: Cluster(
                                                                                                                                                0,
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            ),
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_4,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            0,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                            Map {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (slot , _) : (i32 , (u32 , LogValue)) | slot },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: FoldKeyed {
                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , LogValue { ballot : Ballot { num : 0 , id : 0 } , value : ClientPayload { key : 0 , value : "" . to_string () } }) },
                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_entry : & mut (u32 , LogValue) , new_entry : LogValue | { let same_values = new_entry . value == curr_entry . 1 . value ; let higher_ballot = new_entry . ballot > curr_entry . 1 . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry . 1 . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry . 1 . value = new_entry . value ; } } } },
                                                                                            input: FlatMap {
                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | ((_ , p1b) , _) : ((u32 , P1b) , u32) | p1b . accepted . into_iter () },
                                                                                                input: Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Filter {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ((_sender , p1b) , ballot_num) : & ((u32 , P1b) , u32) | p1b . ballot == Ballot { num : * ballot_num , id : p_id } },
                                                                                                            input: CrossSingleton(
                                                                                                                Persist(
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: CycleSource {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cycle_2,
                                                                                                                                },
                                                                                                                                location_kind: Cluster(
                                                                                                                                    0,
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: CycleSource {
                                                                                                                            ident: Ident {
                                                                                                                                sym: cycle_4,
                                                                                                                            },
                                                                                                                            location_kind: Cluster(
                                                                                                                                0,
                                                                                                                            ),
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        ),
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_4,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            Map {
                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                input: Filter {
                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                    input: Fold {
                                                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                        input: Tee {
                                                                            inner: RefCell {
                                                                                value: CycleSource {
                                                                                    ident: Ident {
                                                                                        sym: cycle_5,
                                                                                    },
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        ),
                                                    },
                                                    Map {
                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | (((index , payload) , next_slot) , ballot_num) : (((usize , ClientPayload) , i32) , u32) | P2a { ballot : Ballot { num : ballot_num , id : p_id } , slot : next_slot + index as i32 , value : payload } },
                                                        input: CrossSingleton(
                                                            CrossSingleton(
                                                                Enumerate(
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: Map {
                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                input: Network {
                                                                                    from_location: Cluster(
                                                                                        2,
                                                                                    ),
                                                                                    to_location: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    serialize_pipeline: Some(
                                                                                        Operator(
                                                                                            Operator {
                                                                                                path: "map",
                                                                                                args: [
                                                                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& data) . unwrap () . into ()) }",
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    instantiate_fn: <network instantiate>,
                                                                                    deserialize_pipeline: Some(
                                                                                        Operator(
                                                                                            Operator {
                                                                                                path: "map",
                                                                                                args: [
                                                                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ClientPayload > (& b) . unwrap ()) }",
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    input: Union(
                                                                                        FlatMap {
                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; let num_clients_per_node = 1usize ; move | leader_ballot : Ballot | (0 .. num_clients_per_node) . map (move | i | (leader_ballot . get_id () , ClientPayload { key : i as u32 , value : c_id . to_string () })) },
                                                                                            input: Tee {
                                                                                                inner: RefCell {
                                                                                                    value: Delta(
                                                                                                        Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Reduce {
                                                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                                    input: Persist(
                                                                                                                        Tee {
                                                                                                                            inner: RefCell {
                                                                                                                                value: CycleSource {
                                                                                                                                    ident: Ident {
                                                                                                                                        sym: cycle_1,
                                                                                                                                    },
                                                                                                                                    location_kind: Cluster(
                                                                                                                                        2,
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        Map {
                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let c_id = __hydroflow_plus_cluster_self_id_2 ; move | (key , leader_ballot) : (u32 , Ballot) | (leader_ballot . get_id () , ClientPayload { key , value : c_id . to_string () }) },
                                                                                            input: CrossSingleton(
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: FilterMap {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (key , count) : (u32 , usize) | { if count == f + 1 { Some (key) } else { None } } },
                                                                                                            input: FoldKeyed {
                                                                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | 0 },
                                                                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | curr_count : & mut usize , _sender : u32 | { * curr_count += 1 ; } },
                                                                                                                input: Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: Union(
                                                                                                                            Map {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , replica_payload) : (u32 , ReplicaPayload) | (replica_payload . key , sender) },
                                                                                                                                input: CycleSource {
                                                                                                                                    ident: Ident {
                                                                                                                                        sym: cycle_0,
                                                                                                                                    },
                                                                                                                                    location_kind: Cluster(
                                                                                                                                        2,
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                            CycleSource {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cycle_2,
                                                                                                                                },
                                                                                                                                location_kind: Cluster(
                                                                                                                                    2,
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Reduce {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | curr_max_ballot : & mut Ballot , new_ballot : Ballot | { if new_ballot > * curr_max_ballot { * curr_max_ballot = new_ballot ; } } },
                                                                                                            input: Persist(
                                                                                                                Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: CycleSource {
                                                                                                                            ident: Ident {
                                                                                                                                sym: cycle_1,
                                                                                                                            },
                                                                                                                            location_kind: Cluster(
                                                                                                                                2,
                                                                                                                            ),
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                ),
                                                                Tee {
                                                                    inner: RefCell {
                                                                        value: CycleSource {
                                                                            ident: Ident {
                                                                                sym: cycle_5,
                                                                            },
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            ),
                                                            Tee {
                                                                inner: RefCell {
                                                                    value: CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_4,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                                Map {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                    input: Tee {
                                                        inner: RefCell {
                                                            value: CycleSource {
                                                                ident: Ident {
                                                                    sym: cycle_0,
                                                                },
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                            ),
                                        },
                                    },
                                },
                            },
                        },
                    },
                    Tee {
                        inner: RefCell {
                            value: Fold {
                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | Ballot { num : 0 , id : 0 } },
                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_ballot : & mut Ballot , p1a : P1a | { if p1a . ballot > * max_ballot { * max_ballot = p1a . ballot ; } } },
                                input: Persist(
                                    Tee {
                                        inner: RefCell {
                                            value: Map {
                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                input: Network {
                                                    from_location: Cluster(
                                                        0,
                                                    ),
                                                    to_location: Cluster(
                                                        1,
                                                    ),
                                                    serialize_pipeline: Some(
                                                        Operator(
                                                            Operator {
                                                                path: "map",
                                                                args: [
                                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& data) . unwrap () . into ()) }",
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    instantiate_fn: <network instantiate>,
                                                    deserialize_pipeline: Some(
                                                        Operator(
                                                            Operator {
                                                                path: "map",
                                                                args: [
                                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: P1a > (& b) . unwrap ()) }",
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    input: FlatMap {
                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                        input: Map {
                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let p_id = __hydroflow_plus_cluster_self_id_0 ; move | ballot_num : u32 | P1a { ballot : Ballot { num : ballot_num , id : p_id } } },
                                                            input: Map {
                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                input: CrossSingleton(
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: CycleSource {
                                                                                ident: Ident {
                                                                                    sym: cycle_4,
                                                                                },
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                            },
                                                                        },
                                                                    },
                                                                    Map {
                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                        input: Tee {
                                                                            inner: RefCell {
                                                                                value: Filter {
                                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; move | (_ , latest_received_i_am_leader) : & (_ , Option < Instant >) | { if let Some (latest_received_i_am_leader) = latest_received_i_am_leader { (Instant :: now () . duration_since (* latest_received_i_am_leader)) > Duration :: from_secs (i_am_leader_check_timeout) } else { true } } },
                                                                                    input: Map {
                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; | (d , _signal) | d },
                                                                                        input: CrossSingleton(
                                                                                            CrossSingleton(
                                                                                                Source {
                                                                                                    source: Stream(
                                                                                                        { use hydroflow_plus :: __staged :: builder :: * ; let delay = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout_delay_multiplier = 1usize ; let p_id = __hydroflow_plus_cluster_self_id_0 ; Duration :: from_secs ((p_id * i_am_leader_check_timeout_delay_multiplier as u32) . into ()) } ; let interval = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay , interval)) },
                                                                                                    ),
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                },
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Fold {
                                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | None },
                                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | latest : & mut Option < Instant > , _ : Ballot | { * latest = Some (Instant :: now ()) ; } },
                                                                                                            input: Persist(
                                                                                                                Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: CycleSource {
                                                                                                                            ident: Ident {
                                                                                                                                sym: cycle_1,
                                                                                                                            },
                                                                                                                            location_kind: Cluster(
                                                                                                                                0,
                                                                                                                            ),
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            Map {
                                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | _u | () },
                                                                                                input: Filter {
                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | c | * c == 0 },
                                                                                                    input: Fold {
                                                                                                        init: { use hydroflow_plus :: __staged :: stream :: * ; | | 0usize },
                                                                                                        acc: { use hydroflow_plus :: __staged :: stream :: * ; | count , _ | * count += 1 },
                                                                                                        input: Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: CycleSource {
                                                                                                                    ident: Ident {
                                                                                                                        sym: cycle_0,
                                                                                                                    },
                                                                                                                    location_kind: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                ),
                            },
                        },
                    },
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            3,
        ),
        input: DeferTick(
            Map {
                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , _) : (ReplicaPayload , i32) | { sorted_payload } },
                input: Filter {
                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , highest_seq) : & (ReplicaPayload , i32) | sorted_payload . seq > * highest_seq },
                    input: CrossSingleton(
                        Tee {
                            inner: RefCell {
                                value: Sort(
                                    Union(
                                        Tee {
                                            inner: RefCell {
                                                value: Map {
                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                    input: Network {
                                                        from_location: Cluster(
                                                            0,
                                                        ),
                                                        to_location: Cluster(
                                                            3,
                                                        ),
                                                        serialize_pipeline: Some(
                                                            Operator(
                                                                Operator {
                                                                    path: "map",
                                                                    args: [
                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        instantiate_fn: <network instantiate>,
                                                        deserialize_pipeline: Some(
                                                            Operator(
                                                                Operator {
                                                                    path: "map",
                                                                    args: [
                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        input: FlatMap {
                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                            input: Map {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                input: AntiJoin(
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: Filter {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                input: Tee {
                                                                                    inner: RefCell {
                                                                                        value: FoldKeyed {
                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                            input: FilterMap {
                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                input: Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Union(
                                                                                                            Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: CycleSource {
                                                                                                                        ident: Ident {
                                                                                                                            sym: cycle_3,
                                                                                                                        },
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                            CycleSource {
                                                                                                                ident: Ident {
                                                                                                                    sym: cycle_7,
                                                                                                                },
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                    CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_6,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                        CycleSource {
                                            ident: Ident {
                                                sym: cycle_0,
                                            },
                                            location_kind: Cluster(
                                                3,
                                            ),
                                        },
                                    ),
                                ),
                            },
                        },
                        Tee {
                            inner: RefCell {
                                value: Fold {
                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | filled_slot : & mut i32 , (sorted_payload , highest_seq) : (ReplicaPayload , i32) | { let next_slot = std :: cmp :: max (* filled_slot , highest_seq) ; * filled_slot = if sorted_payload . seq == next_slot + 1 { sorted_payload . seq } else { * filled_slot } ; } },
                                    input: CrossSingleton(
                                        Tee {
                                            inner: RefCell {
                                                value: Sort(
                                                    Union(
                                                        Tee {
                                                            inner: RefCell {
                                                                value: Map {
                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                    input: Network {
                                                                        from_location: Cluster(
                                                                            0,
                                                                        ),
                                                                        to_location: Cluster(
                                                                            3,
                                                                        ),
                                                                        serialize_pipeline: Some(
                                                                            Operator(
                                                                                Operator {
                                                                                    path: "map",
                                                                                    args: [
                                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        instantiate_fn: <network instantiate>,
                                                                        deserialize_pipeline: Some(
                                                                            Operator(
                                                                                Operator {
                                                                                    path: "map",
                                                                                    args: [
                                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        input: FlatMap {
                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                            input: Map {
                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                input: AntiJoin(
                                                                                    Tee {
                                                                                        inner: RefCell {
                                                                                            value: Filter {
                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                input: Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: FoldKeyed {
                                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                            input: FilterMap {
                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                input: Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: Union(
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_3,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            0,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                            CycleSource {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cycle_7,
                                                                                                                                },
                                                                                                                                location_kind: Cluster(
                                                                                                                                    0,
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    CycleSource {
                                                                                        ident: Ident {
                                                                                            sym: cycle_6,
                                                                                        },
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                        CycleSource {
                                                            ident: Ident {
                                                                sym: cycle_0,
                                                            },
                                                            location_kind: Cluster(
                                                                3,
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        },
                                        Union(
                                            CycleSource {
                                                ident: Ident {
                                                    sym: cycle_1,
                                                },
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                            },
                                            Source {
                                                source: Iter(
                                                    { use crate :: __staged :: cluster :: paxos :: * ; [- 1] },
                                                ),
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            },
                        },
                    ),
                },
            },
        ),
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Cluster(
            3,
        ),
        input: Tee {
            inner: RefCell {
                value: DeferTick(
                    Map {
                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (_kv_store , highest_seq) : (HashMap :: < u32 , String > , i32) | highest_seq },
                        input: Fold {
                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (HashMap :: < u32 , String > :: new () , - 1) },
                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | state : & mut (HashMap :: < u32 , String > , i32) , payload : ReplicaPayload | { let kv_store = & mut state . 0 ; let last_seq = & mut state . 1 ; kv_store . insert (payload . key , payload . value) ; debug_assert ! (payload . seq == * last_seq + 1 , "Hole in log between seq {} and {}" , * last_seq , payload . seq) ; * last_seq = payload . seq ; } },
                            input: Persist(
                                Tee {
                                    inner: RefCell {
                                        value: Map {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , _) : (ReplicaPayload , i32) | { sorted_payload } },
                                            input: Filter {
                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , highest_seq) : & (ReplicaPayload , i32) | sorted_payload . seq <= * highest_seq },
                                                input: CrossSingleton(
                                                    Tee {
                                                        inner: RefCell {
                                                            value: Sort(
                                                                Union(
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: Map {
                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                input: Network {
                                                                                    from_location: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    to_location: Cluster(
                                                                                        3,
                                                                                    ),
                                                                                    serialize_pipeline: Some(
                                                                                        Operator(
                                                                                            Operator {
                                                                                                path: "map",
                                                                                                args: [
                                                                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    instantiate_fn: <network instantiate>,
                                                                                    deserialize_pipeline: Some(
                                                                                        Operator(
                                                                                            Operator {
                                                                                                path: "map",
                                                                                                args: [
                                                                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    input: FlatMap {
                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                                        input: Map {
                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                            input: AntiJoin(
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Filter {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                            input: Tee {
                                                                                                                inner: RefCell {
                                                                                                                    value: FoldKeyed {
                                                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                                        input: FilterMap {
                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                            input: Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: Union(
                                                                                                                                        Tee {
                                                                                                                                            inner: RefCell {
                                                                                                                                                value: CycleSource {
                                                                                                                                                    ident: Ident {
                                                                                                                                                        sym: cycle_3,
                                                                                                                                                    },
                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                        0,
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                        CycleSource {
                                                                                                                                            ident: Ident {
                                                                                                                                                sym: cycle_7,
                                                                                                                                            },
                                                                                                                                            location_kind: Cluster(
                                                                                                                                                0,
                                                                                                                                            ),
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                CycleSource {
                                                                                                    ident: Ident {
                                                                                                        sym: cycle_6,
                                                                                                    },
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                    },
                                                                    CycleSource {
                                                                        ident: Ident {
                                                                            sym: cycle_0,
                                                                        },
                                                                        location_kind: Cluster(
                                                                            3,
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    },
                                                    Tee {
                                                        inner: RefCell {
                                                            value: Fold {
                                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | filled_slot : & mut i32 , (sorted_payload , highest_seq) : (ReplicaPayload , i32) | { let next_slot = std :: cmp :: max (* filled_slot , highest_seq) ; * filled_slot = if sorted_payload . seq == next_slot + 1 { sorted_payload . seq } else { * filled_slot } ; } },
                                                                input: CrossSingleton(
                                                                    Tee {
                                                                        inner: RefCell {
                                                                            value: Sort(
                                                                                Union(
                                                                                    Tee {
                                                                                        inner: RefCell {
                                                                                            value: Map {
                                                                                                f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                input: Network {
                                                                                                    from_location: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    to_location: Cluster(
                                                                                                        3,
                                                                                                    ),
                                                                                                    serialize_pipeline: Some(
                                                                                                        Operator(
                                                                                                            Operator {
                                                                                                                path: "map",
                                                                                                                args: [
                                                                                                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ),
                                                                                                    instantiate_fn: <network instantiate>,
                                                                                                    deserialize_pipeline: Some(
                                                                                                        Operator(
                                                                                                            Operator {
                                                                                                                path: "map",
                                                                                                                args: [
                                                                                                                    "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ),
                                                                                                    input: FlatMap {
                                                                                                        f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                                                        input: Map {
                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                                            input: AntiJoin(
                                                                                                                Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: Filter {
                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                                            input: Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: FoldKeyed {
                                                                                                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                                                        input: FilterMap {
                                                                                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                                            input: Tee {
                                                                                                                                                inner: RefCell {
                                                                                                                                                    value: Union(
                                                                                                                                                        Tee {
                                                                                                                                                            inner: RefCell {
                                                                                                                                                                value: CycleSource {
                                                                                                                                                                    ident: Ident {
                                                                                                                                                                        sym: cycle_3,
                                                                                                                                                                    },
                                                                                                                                                                    location_kind: Cluster(
                                                                                                                                                                        0,
                                                                                                                                                                    ),
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                        CycleSource {
                                                                                                                                                            ident: Ident {
                                                                                                                                                                sym: cycle_7,
                                                                                                                                                            },
                                                                                                                                                            location_kind: Cluster(
                                                                                                                                                                0,
                                                                                                                                                            ),
                                                                                                                                                        },
                                                                                                                                                    ),
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                                CycleSource {
                                                                                                                    ident: Ident {
                                                                                                                        sym: cycle_6,
                                                                                                                    },
                                                                                                                    location_kind: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    CycleSource {
                                                                                        ident: Ident {
                                                                                            sym: cycle_0,
                                                                                        },
                                                                                        location_kind: Cluster(
                                                                                            3,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        },
                                                                    },
                                                                    Union(
                                                                        CycleSource {
                                                                            ident: Ident {
                                                                                sym: cycle_1,
                                                                            },
                                                                            location_kind: Cluster(
                                                                                3,
                                                                            ),
                                                                        },
                                                                        Source {
                                                                            source: Iter(
                                                                                { use crate :: __staged :: cluster :: paxos :: * ; [- 1] },
                                                                            ),
                                                                            location_kind: Cluster(
                                                                                3,
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        },
                                                    },
                                                ),
                                            },
                                        },
                                    },
                                },
                            ),
                        },
                    },
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_2,
        },
        location_kind: Cluster(
            3,
        ),
        input: Tee {
            inner: RefCell {
                value: DeferTick(
                    FilterMap {
                        f: { use crate :: __staged :: cluster :: paxos :: * ; let checkpoint_frequency = 1usize ; move | (max_checkpointed_seq , new_highest_seq) : (i32 , i32) | if new_highest_seq - max_checkpointed_seq >= checkpoint_frequency as i32 { Some (new_highest_seq) } else { None } },
                        input: CrossSingleton(
                            Fold {
                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_seq : & mut i32 , seq : i32 | { if seq > * max_seq { * max_seq = seq ; } } },
                                input: Persist(
                                    CycleSource {
                                        ident: Ident {
                                            sym: cycle_2,
                                        },
                                        location_kind: Cluster(
                                            3,
                                        ),
                                    },
                                ),
                            },
                            Tee {
                                inner: RefCell {
                                    value: DeferTick(
                                        Map {
                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (_kv_store , highest_seq) : (HashMap :: < u32 , String > , i32) | highest_seq },
                                            input: Fold {
                                                init: { use crate :: __staged :: cluster :: paxos :: * ; | | (HashMap :: < u32 , String > :: new () , - 1) },
                                                acc: { use crate :: __staged :: cluster :: paxos :: * ; | state : & mut (HashMap :: < u32 , String > , i32) , payload : ReplicaPayload | { let kv_store = & mut state . 0 ; let last_seq = & mut state . 1 ; kv_store . insert (payload . key , payload . value) ; debug_assert ! (payload . seq == * last_seq + 1 , "Hole in log between seq {} and {}" , * last_seq , payload . seq) ; * last_seq = payload . seq ; } },
                                                input: Persist(
                                                    Tee {
                                                        inner: RefCell {
                                                            value: Map {
                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , _) : (ReplicaPayload , i32) | { sorted_payload } },
                                                                input: Filter {
                                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , highest_seq) : & (ReplicaPayload , i32) | sorted_payload . seq <= * highest_seq },
                                                                    input: CrossSingleton(
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: Sort(
                                                                                    Union(
                                                                                        Tee {
                                                                                            inner: RefCell {
                                                                                                value: Map {
                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                    input: Network {
                                                                                                        from_location: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        to_location: Cluster(
                                                                                                            3,
                                                                                                        ),
                                                                                                        serialize_pipeline: Some(
                                                                                                            Operator(
                                                                                                                Operator {
                                                                                                                    path: "map",
                                                                                                                    args: [
                                                                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ),
                                                                                                        instantiate_fn: <network instantiate>,
                                                                                                        deserialize_pipeline: Some(
                                                                                                            Operator(
                                                                                                                Operator {
                                                                                                                    path: "map",
                                                                                                                    args: [
                                                                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ),
                                                                                                        input: FlatMap {
                                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                                                            input: Map {
                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                                                input: AntiJoin(
                                                                                                                    Tee {
                                                                                                                        inner: RefCell {
                                                                                                                            value: Filter {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                                                input: Tee {
                                                                                                                                    inner: RefCell {
                                                                                                                                        value: FoldKeyed {
                                                                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                                                            input: FilterMap {
                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                                                input: Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: Union(
                                                                                                                                                            Tee {
                                                                                                                                                                inner: RefCell {
                                                                                                                                                                    value: CycleSource {
                                                                                                                                                                        ident: Ident {
                                                                                                                                                                            sym: cycle_3,
                                                                                                                                                                        },
                                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                                            0,
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                            CycleSource {
                                                                                                                                                                ident: Ident {
                                                                                                                                                                    sym: cycle_7,
                                                                                                                                                                },
                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                    0,
                                                                                                                                                                ),
                                                                                                                                                            },
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                    CycleSource {
                                                                                                                        ident: Ident {
                                                                                                                            sym: cycle_6,
                                                                                                                        },
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        CycleSource {
                                                                                            ident: Ident {
                                                                                                sym: cycle_0,
                                                                                            },
                                                                                            location_kind: Cluster(
                                                                                                3,
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        },
                                                                        Tee {
                                                                            inner: RefCell {
                                                                                value: Fold {
                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | filled_slot : & mut i32 , (sorted_payload , highest_seq) : (ReplicaPayload , i32) | { let next_slot = std :: cmp :: max (* filled_slot , highest_seq) ; * filled_slot = if sorted_payload . seq == next_slot + 1 { sorted_payload . seq } else { * filled_slot } ; } },
                                                                                    input: CrossSingleton(
                                                                                        Tee {
                                                                                            inner: RefCell {
                                                                                                value: Sort(
                                                                                                    Union(
                                                                                                        Tee {
                                                                                                            inner: RefCell {
                                                                                                                value: Map {
                                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                                    input: Network {
                                                                                                                        from_location: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                        to_location: Cluster(
                                                                                                                            3,
                                                                                                                        ),
                                                                                                                        serialize_pipeline: Some(
                                                                                                                            Operator(
                                                                                                                                Operator {
                                                                                                                                    path: "map",
                                                                                                                                    args: [
                                                                                                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                        instantiate_fn: <network instantiate>,
                                                                                                                        deserialize_pipeline: Some(
                                                                                                                            Operator(
                                                                                                                                Operator {
                                                                                                                                    path: "map",
                                                                                                                                    args: [
                                                                                                                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                        input: FlatMap {
                                                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                                                                            input: Map {
                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                                                                input: AntiJoin(
                                                                                                                                    Tee {
                                                                                                                                        inner: RefCell {
                                                                                                                                            value: Filter {
                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                                                                input: Tee {
                                                                                                                                                    inner: RefCell {
                                                                                                                                                        value: FoldKeyed {
                                                                                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                                                                            input: FilterMap {
                                                                                                                                                                f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                                                                input: Tee {
                                                                                                                                                                    inner: RefCell {
                                                                                                                                                                        value: Union(
                                                                                                                                                                            Tee {
                                                                                                                                                                                inner: RefCell {
                                                                                                                                                                                    value: CycleSource {
                                                                                                                                                                                        ident: Ident {
                                                                                                                                                                                            sym: cycle_3,
                                                                                                                                                                                        },
                                                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                                                            0,
                                                                                                                                                                                        ),
                                                                                                                                                                                    },
                                                                                                                                                                                },
                                                                                                                                                                            },
                                                                                                                                                                            CycleSource {
                                                                                                                                                                                ident: Ident {
                                                                                                                                                                                    sym: cycle_7,
                                                                                                                                                                                },
                                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                                    0,
                                                                                                                                                                                ),
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                    CycleSource {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: cycle_6,
                                                                                                                                        },
                                                                                                                                        location_kind: Cluster(
                                                                                                                                            0,
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                        CycleSource {
                                                                                                            ident: Ident {
                                                                                                                sym: cycle_0,
                                                                                                            },
                                                                                                            location_kind: Cluster(
                                                                                                                3,
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        Union(
                                                                                            CycleSource {
                                                                                                ident: Ident {
                                                                                                    sym: cycle_1,
                                                                                                },
                                                                                                location_kind: Cluster(
                                                                                                    3,
                                                                                                ),
                                                                                            },
                                                                                            Source {
                                                                                                source: Iter(
                                                                                                    { use crate :: __staged :: cluster :: paxos :: * ; [- 1] },
                                                                                                ),
                                                                                                location_kind: Cluster(
                                                                                                    3,
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        },
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            2,
        ),
        input: Network {
            from_location: Cluster(
                3,
            ),
            to_location: Cluster(
                2,
            ),
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                        ],
                    },
                ),
            ),
            instantiate_fn: <network instantiate>,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                        ],
                    },
                ),
            ),
            input: Map {
                f: { use crate :: __staged :: cluster :: paxos :: * ; | payload : ReplicaPayload | (payload . value . parse :: < u32 > () . unwrap () , payload) },
                input: Tee {
                    inner: RefCell {
                        value: Map {
                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                            input: Network {
                                from_location: Cluster(
                                    0,
                                ),
                                to_location: Cluster(
                                    3,
                                ),
                                serialize_pipeline: Some(
                                    Operator(
                                        Operator {
                                            path: "map",
                                            args: [
                                                "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                            ],
                                        },
                                    ),
                                ),
                                instantiate_fn: <network instantiate>,
                                deserialize_pipeline: Some(
                                    Operator(
                                        Operator {
                                            path: "map",
                                            args: [
                                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                            ],
                                        },
                                    ),
                                ),
                                input: FlatMap {
                                    f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                    input: Map {
                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                        input: AntiJoin(
                                            Tee {
                                                inner: RefCell {
                                                    value: Filter {
                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                        input: Tee {
                                                            inner: RefCell {
                                                                value: FoldKeyed {
                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                    input: FilterMap {
                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                        input: Tee {
                                                                            inner: RefCell {
                                                                                value: Union(
                                                                                    Tee {
                                                                                        inner: RefCell {
                                                                                            value: CycleSource {
                                                                                                ident: Ident {
                                                                                                    sym: cycle_3,
                                                                                                },
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    CycleSource {
                                                                                        ident: Ident {
                                                                                            sym: cycle_7,
                                                                                        },
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                            CycleSource {
                                                ident: Ident {
                                                    sym: cycle_6,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                            },
                                        ),
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            1,
        ),
        input: Network {
            from_location: Cluster(
                3,
            ),
            to_location: Cluster(
                1,
            ),
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < i32 > (& data) . unwrap () . into ()) }",
                        ],
                    },
                ),
            ),
            instantiate_fn: <network instantiate>,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < i32 > (& b) . unwrap ()) }",
                        ],
                    },
                ),
            ),
            input: FlatMap {
                f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_1 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                input: Tee {
                    inner: RefCell {
                        value: DeferTick(
                            FilterMap {
                                f: { use crate :: __staged :: cluster :: paxos :: * ; let checkpoint_frequency = 1usize ; move | (max_checkpointed_seq , new_highest_seq) : (i32 , i32) | if new_highest_seq - max_checkpointed_seq >= checkpoint_frequency as i32 { Some (new_highest_seq) } else { None } },
                                input: CrossSingleton(
                                    Fold {
                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | max_seq : & mut i32 , seq : i32 | { if seq > * max_seq { * max_seq = seq ; } } },
                                        input: Persist(
                                            CycleSource {
                                                ident: Ident {
                                                    sym: cycle_2,
                                                },
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                            },
                                        ),
                                    },
                                    Tee {
                                        inner: RefCell {
                                            value: DeferTick(
                                                Map {
                                                    f: { use crate :: __staged :: cluster :: paxos :: * ; | (_kv_store , highest_seq) : (HashMap :: < u32 , String > , i32) | highest_seq },
                                                    input: Fold {
                                                        init: { use crate :: __staged :: cluster :: paxos :: * ; | | (HashMap :: < u32 , String > :: new () , - 1) },
                                                        acc: { use crate :: __staged :: cluster :: paxos :: * ; | state : & mut (HashMap :: < u32 , String > , i32) , payload : ReplicaPayload | { let kv_store = & mut state . 0 ; let last_seq = & mut state . 1 ; kv_store . insert (payload . key , payload . value) ; debug_assert ! (payload . seq == * last_seq + 1 , "Hole in log between seq {} and {}" , * last_seq , payload . seq) ; * last_seq = payload . seq ; } },
                                                        input: Persist(
                                                            Tee {
                                                                inner: RefCell {
                                                                    value: Map {
                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , _) : (ReplicaPayload , i32) | { sorted_payload } },
                                                                        input: Filter {
                                                                            f: { use crate :: __staged :: cluster :: paxos :: * ; | (sorted_payload , highest_seq) : & (ReplicaPayload , i32) | sorted_payload . seq <= * highest_seq },
                                                                            input: CrossSingleton(
                                                                                Tee {
                                                                                    inner: RefCell {
                                                                                        value: Sort(
                                                                                            Union(
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Map {
                                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                            input: Network {
                                                                                                                from_location: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                to_location: Cluster(
                                                                                                                    3,
                                                                                                                ),
                                                                                                                serialize_pipeline: Some(
                                                                                                                    Operator(
                                                                                                                        Operator {
                                                                                                                            path: "map",
                                                                                                                            args: [
                                                                                                                                "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ),
                                                                                                                instantiate_fn: <network instantiate>,
                                                                                                                deserialize_pipeline: Some(
                                                                                                                    Operator(
                                                                                                                        Operator {
                                                                                                                            path: "map",
                                                                                                                            args: [
                                                                                                                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ),
                                                                                                                input: FlatMap {
                                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                                                                    input: Map {
                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                                                        input: AntiJoin(
                                                                                                                            Tee {
                                                                                                                                inner: RefCell {
                                                                                                                                    value: Filter {
                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                                                        input: Tee {
                                                                                                                                            inner: RefCell {
                                                                                                                                                value: FoldKeyed {
                                                                                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                                                                    input: FilterMap {
                                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                                                        input: Tee {
                                                                                                                                                            inner: RefCell {
                                                                                                                                                                value: Union(
                                                                                                                                                                    Tee {
                                                                                                                                                                        inner: RefCell {
                                                                                                                                                                            value: CycleSource {
                                                                                                                                                                                ident: Ident {
                                                                                                                                                                                    sym: cycle_3,
                                                                                                                                                                                },
                                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                                    0,
                                                                                                                                                                                ),
                                                                                                                                                                            },
                                                                                                                                                                        },
                                                                                                                                                                    },
                                                                                                                                                                    CycleSource {
                                                                                                                                                                        ident: Ident {
                                                                                                                                                                            sym: cycle_7,
                                                                                                                                                                        },
                                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                                            0,
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                ),
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                            CycleSource {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: cycle_6,
                                                                                                                                },
                                                                                                                                location_kind: Cluster(
                                                                                                                                    0,
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                CycleSource {
                                                                                                    ident: Ident {
                                                                                                        sym: cycle_0,
                                                                                                    },
                                                                                                    location_kind: Cluster(
                                                                                                        3,
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                Tee {
                                                                                    inner: RefCell {
                                                                                        value: Fold {
                                                                                            init: { use crate :: __staged :: cluster :: paxos :: * ; | | - 1 },
                                                                                            acc: { use crate :: __staged :: cluster :: paxos :: * ; | filled_slot : & mut i32 , (sorted_payload , highest_seq) : (ReplicaPayload , i32) | { let next_slot = std :: cmp :: max (* filled_slot , highest_seq) ; * filled_slot = if sorted_payload . seq == next_slot + 1 { sorted_payload . seq } else { * filled_slot } ; } },
                                                                                            input: CrossSingleton(
                                                                                                Tee {
                                                                                                    inner: RefCell {
                                                                                                        value: Sort(
                                                                                                            Union(
                                                                                                                Tee {
                                                                                                                    inner: RefCell {
                                                                                                                        value: Map {
                                                                                                                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                                                                                                                            input: Network {
                                                                                                                                from_location: Cluster(
                                                                                                                                    0,
                                                                                                                                ),
                                                                                                                                to_location: Cluster(
                                                                                                                                    3,
                                                                                                                                ),
                                                                                                                                serialize_pipeline: Some(
                                                                                                                                    Operator(
                                                                                                                                        Operator {
                                                                                                                                            path: "map",
                                                                                                                                            args: [
                                                                                                                                                "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& data) . unwrap () . into ()) }",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                ),
                                                                                                                                instantiate_fn: <network instantiate>,
                                                                                                                                deserialize_pipeline: Some(
                                                                                                                                    Operator(
                                                                                                                                        Operator {
                                                                                                                                            path: "map",
                                                                                                                                            args: [
                                                                                                                                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: cluster :: paxos :: ReplicaPayload > (& b) . unwrap ()) }",
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                ),
                                                                                                                                input: FlatMap {
                                                                                                                                    f: { use hydroflow_plus :: __staged :: stream :: * ; let ids = __hydroflow_plus_cluster_ids_3 ; | b | ids . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) },
                                                                                                                                    input: Map {
                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (_slot , (_count , p2b)) : (i32 , (usize , P2b)) | ReplicaPayload { seq : p2b . slot , key : p2b . value . key , value : p2b . value . value } },
                                                                                                                                        input: AntiJoin(
                                                                                                                                            Tee {
                                                                                                                                                inner: RefCell {
                                                                                                                                                    value: Filter {
                                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; let f = 1usize ; move | (_slot , (count , _p2b)) : & (i32 , (usize , P2b)) | * count > f },
                                                                                                                                                        input: Tee {
                                                                                                                                                            inner: RefCell {
                                                                                                                                                                value: FoldKeyed {
                                                                                                                                                                    init: { use crate :: __staged :: cluster :: paxos :: * ; | | (0 , P2b { ballot : Ballot { num : 0 , id : 0 } , max_ballot : Ballot { num : 0 , id : 0 } , slot : 0 , value : ClientPayload { key : 0 , value : "0" . to_string () } }) },
                                                                                                                                                                    acc: { use crate :: __staged :: cluster :: paxos :: * ; | accum : & mut (usize , P2b) , (_sender , p2b) : (u32 , P2b) | { accum . 0 += 1 ; accum . 1 = p2b ; } },
                                                                                                                                                                    input: FilterMap {
                                                                                                                                                                        f: { use crate :: __staged :: cluster :: paxos :: * ; | (sender , p2b) : (u32 , P2b) | if p2b . ballot == p2b . max_ballot { Some ((p2b . slot , (sender , p2b))) } else { None } },
                                                                                                                                                                        input: Tee {
                                                                                                                                                                            inner: RefCell {
                                                                                                                                                                                value: Union(
                                                                                                                                                                                    Tee {
                                                                                                                                                                                        inner: RefCell {
                                                                                                                                                                                            value: CycleSource {
                                                                                                                                                                                                ident: Ident {
                                                                                                                                                                                                    sym: cycle_3,
                                                                                                                                                                                                },
                                                                                                                                                                                                location_kind: Cluster(
                                                                                                                                                                                                    0,
                                                                                                                                                                                                ),
                                                                                                                                                                                            },
                                                                                                                                                                                        },
                                                                                                                                                                                    },
                                                                                                                                                                                    CycleSource {
                                                                                                                                                                                        ident: Ident {
                                                                                                                                                                                            sym: cycle_7,
                                                                                                                                                                                        },
                                                                                                                                                                                        location_kind: Cluster(
                                                                                                                                                                                            0,
                                                                                                                                                                                        ),
                                                                                                                                                                                    },
                                                                                                                                                                                ),
                                                                                                                                                                            },
                                                                                                                                                                        },
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                            CycleSource {
                                                                                                                                                ident: Ident {
                                                                                                                                                    sym: cycle_6,
                                                                                                                                                },
                                                                                                                                                location_kind: Cluster(
                                                                                                                                                    0,
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                                CycleSource {
                                                                                                                    ident: Ident {
                                                                                                                        sym: cycle_0,
                                                                                                                    },
                                                                                                                    location_kind: Cluster(
                                                                                                                        3,
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                Union(
                                                                                                    CycleSource {
                                                                                                        ident: Ident {
                                                                                                            sym: cycle_1,
                                                                                                        },
                                                                                                        location_kind: Cluster(
                                                                                                            3,
                                                                                                        ),
                                                                                                    },
                                                                                                    Source {
                                                                                                        source: Iter(
                                                                                                            { use crate :: __staged :: cluster :: paxos :: * ; [- 1] },
                                                                                                        ),
                                                                                                        location_kind: Cluster(
                                                                                                            3,
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            },
        },
    },
]

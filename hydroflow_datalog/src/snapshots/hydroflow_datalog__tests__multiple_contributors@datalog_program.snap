---
source: hydroflow_datalog/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        {
            use hydroflow::{var_expr, var_args};
            let mut df = hydroflow::scheduled::graph::Hydroflow::new_with_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"op_1v1: merge ()\",\"version\":1},{\"value\":\"op_2v1: tee ()\",\"version\":1},{\"value\":\"op_3v1: merge ()\",\"version\":1},{\"value\":\"op_4v1: tee ()\",\"version\":1},{\"value\":\"op_5v1: merge ()\",\"version\":1},{\"value\":\"op_6v1: tee ()\",\"version\":1},{\"value\":\"op_7v1: source_stream (in1)\",\"version\":1},{\"value\":\"op_8v1: source_stream (in2)\",\"version\":1},{\"value\":\"op_9v1: for_each (| v | out . send (v) . unwrap ())\",\"version\":1},{\"value\":\"op_10v1: map (| row : (_ , _ ,) | (row . 0 , row . 1 ,))\",\"version\":1},{\"value\":\"op_11v1: map (| row : (_ , _ ,) | (row . 1 , row . 0 ,))\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":2,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":11,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":1,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"idx\":5,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":5,\"version\":1}],\"version\":1}],\"handoffs\":[{\"value\":null,\"version\":0}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":10,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}]}\n",
            );
            let mut sg_1v1_node_7v1_stream = Box::pin(in1);
            let mut sg_1v1_node_8v1_stream = Box::pin(in2);
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(),
                var_expr!(),
                move |context, var_args!(), var_args!()| {
                    let op_7v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_1v1_node_7v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_7v1 = {
                        #[inline(always)]
                        pub fn check_op_7v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_7v1(op_7v1)
                    };
                    let op_1v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_7v1
                    };
                    let op_1v1 = {
                        #[inline(always)]
                        pub fn check_op_1v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_1v1(op_1v1)
                    };
                    let op_2v1 = op_1v1;
                    let op_2v1 = {
                        #[inline(always)]
                        pub fn check_op_2v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_2v1(op_2v1)
                    };
                    let op_8v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            sg_1v1_node_8v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_8v1 = {
                        #[inline(always)]
                        pub fn check_op_8v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_8v1(op_8v1)
                    };
                    let op_3v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        op_8v1
                    };
                    let op_3v1 = {
                        #[inline(always)]
                        pub fn check_op_3v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_3v1(op_3v1)
                    };
                    let op_4v1 = op_3v1;
                    let op_4v1 = {
                        #[inline(always)]
                        pub fn check_op_4v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_4v1(op_4v1)
                    };
                    let op_10v1 = op_2v1.map(|row: (_, _)| (row.0, row.1));
                    let op_10v1 = {
                        #[inline(always)]
                        pub fn check_op_10v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_10v1(op_10v1)
                    };
                    let op_11v1 = op_4v1.map(|row: (_, _)| (row.1, row.0));
                    let op_11v1 = {
                        #[inline(always)]
                        pub fn check_op_11v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_11v1(op_11v1)
                    };
                    let op_5v1 = {
                        #[allow(unused)]
                        #[inline(always)]
                        fn check_inputs<
                            A: ::std::iter::Iterator<Item = Item>,
                            B: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(a: A, b: B) -> impl ::std::iter::Iterator<Item = Item> {
                            a.chain(b)
                        }
                        check_inputs(op_10v1, op_11v1)
                    };
                    let op_5v1 = {
                        #[inline(always)]
                        pub fn check_op_5v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_5v1(op_5v1)
                    };
                    let op_6v1 = op_5v1;
                    let op_6v1 = {
                        #[inline(always)]
                        pub fn check_op_6v1<
                            Input: ::std::iter::Iterator<Item = Item>,
                            Item,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            input
                        }
                        check_op_6v1(op_6v1)
                    };
                    let op_9v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        out.send(v).unwrap()
                    });
                    let op_9v1 = {
                        #[inline(always)]
                        pub fn check_op_9v1<
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            Item,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            input
                        }
                        check_op_9v1(op_9v1)
                    };
                    hydroflow::pusherator::pivot::Pivot::new(op_6v1, op_9v1).run();
                },
            );
            df
        }
    }
}


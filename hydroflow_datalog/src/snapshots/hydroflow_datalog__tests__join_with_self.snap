---
source: hydroflow_datalog/src/lib.rs
expression: rustfmt_code(&wrapped.to_token_stream().to_string())
---
fn main() {
    {
        {
            use hydroflow::tl;
            let mut df = hydroflow :: scheduled :: graph :: Hydroflow :: new_with_graph ("{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"op_1v1: merge ()\",\"version\":1},{\"value\":\"op_2v1: tee ()\",\"version\":1},{\"value\":\"op_3v1: merge ()\",\"version\":1},{\"value\":\"op_4v1: tee ()\",\"version\":1},{\"value\":\"op_5v1: recv_stream (input)\",\"version\":1},{\"value\":\"op_6v1: for_each (| v | out . send (v) . unwrap ())\",\"version\":1},{\"value\":\"op_7v1: join ()\",\"version\":1},{\"value\":\"op_8v1: map (| kv : ((_ , _ ,) , ((_ , _ ,) , (_ , _ ,) ,)) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 ,))\",\"version\":1},{\"value\":\"op_9v1: map (| v : (_ , _ ,) | ((v . 0 , v . 1 ,) , v))\",\"version\":1},{\"value\":\"op_10v1: map (| v : (_ , _ ,) | ((v . 1 , v . 0 ,) , v))\",\"version\":1},{\"value\":\"hoff_11v1_send: handoff\",\"version\":1},{\"value\":\"hoff_12v1_send: handoff\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":2,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":1,\"version\":1}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"idx\":8,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":11,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":12,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1}],\"version\":1}],\"handoffs\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":true,\"version\":1},{\"value\":true,\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}]}\n") ;
            let (hoff_11v1_send, hoff_11v1_recv) = df
                .make_edge::<_, hydroflow::scheduled::handoff::VecHandoff<_>>(
                    "handoff GraphNodeId(11v1)",
                );
            let (hoff_12v1_send, hoff_12v1_recv) = df
                .make_edge::<_, hydroflow::scheduled::handoff::VecHandoff<_>>(
                    "handoff GraphNodeId(12v1)",
                );
            let mut sg_1v1_node_7v1_joindata = Default::default();
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                tl!(hoff_11v1_recv, hoff_12v1_recv),
                tl!(),
                move |context, tl!(hoff_11v1_recv, hoff_12v1_recv), tl!()| {
                    let hoff_11v1_recv = hoff_11v1_recv.take_inner().into_iter();
                    let hoff_12v1_recv = hoff_12v1_recv.take_inner().into_iter();
                    let op_7v1 = hydroflow::compiled::pull::SymmetricHashJoin::new(
                        hoff_11v1_recv,
                        hoff_12v1_recv,
                        &mut sg_1v1_node_7v1_joindata,
                    );
                    let op_8v1 =
                        op_7v1.map(|kv: ((_, _), ((_, _), (_, _)))| (kv.1 .0 .0, kv.1 .0 .1));
                    let op_3v1 = op_8v1;
                    let op_4v1 = op_3v1;
                    let op_6v1 =
                        hydroflow::pusherator::for_each::ForEach::new(|v| out.send(v).unwrap());
                    hydroflow::pusherator::pivot::Pivot::new(op_4v1, op_6v1).run();
                },
            );
            let mut input = input;
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                0,
                tl!(),
                tl!(hoff_11v1_send, hoff_12v1_send),
                move |context, tl!(), tl!(hoff_11v1_send, hoff_12v1_send)| {
                    let hoff_11v1_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        hoff_11v1_send.give(Some(v));
                    });
                    let hoff_12v1_send = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        hoff_12v1_send.give(Some(v));
                    });
                    let op_5v1 = std::iter::from_fn(|| {
                        match input.poll_recv(&mut std::task::Context::from_waker(&context.waker()))
                        {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_1v1 = op_5v1;
                    let op_10v1 = hydroflow::pusherator::map::Map::new(
                        |v: (_, _)| ((v.1, v.0), v),
                        hoff_12v1_send,
                    );
                    let op_9v1 = hydroflow::pusherator::map::Map::new(
                        |v: (_, _)| ((v.0, v.1), v),
                        hoff_11v1_send,
                    );
                    let op_2v1 = hydroflow::pusherator::tee::Tee::new(op_9v1, op_10v1);
                    hydroflow::pusherator::pivot::Pivot::new(op_1v1, op_2v1).run();
                },
            );
            df
        }
    }
}


---
source: hydroflow_datalog/src/lib.rs
expression: rustfmt_code(&wrapped.to_token_stream().to_string())
---
fn main() {
    {
        {
            use hydroflow::{var_args, var_expr};
            let mut df = hydroflow :: scheduled :: graph :: Hydroflow :: new_with_graph ("{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"op_1v1: merge ()\",\"version\":1},{\"value\":\"op_2v1: tee ()\",\"version\":1},{\"value\":\"op_3v1: merge ()\",\"version\":1},{\"value\":\"op_4v1: tee ()\",\"version\":1},{\"value\":\"op_5v1: merge ()\",\"version\":1},{\"value\":\"op_6v1: tee ()\",\"version\":1},{\"value\":\"op_7v1: source_stream (in1)\",\"version\":1},{\"value\":\"op_8v1: source_stream (in2)\",\"version\":1},{\"value\":\"op_9v1: for_each (| v | out . send (v) . unwrap ())\",\"version\":1},{\"value\":\"op_10v1: join ()\",\"version\":1},{\"value\":\"op_11v1: map (| kv : ((_ ,) , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 ,))\",\"version\":1},{\"value\":\"op_12v1: map (| v : (_ ,) | ((v . 0 ,) , v))\",\"version\":1},{\"value\":\"op_13v1: map (| v : (_ ,) | ((v . 0 ,) , v))\",\"version\":1},{\"value\":\"op_14v1: map (| row : (_ ,) | (row . 0 ,))\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":2,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":12,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":13,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":1,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"idx\":11,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":14,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":5,\"version\":1}],\"version\":1}],\"handoffs\":[{\"value\":null,\"version\":0}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":12,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":10,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":14,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}]}\n") ;
            let mut sg_1v1_node_7v1_stream = Box::pin(in1);
            let mut sg_1v1_node_8v1_stream = Box::pin(in2);
            let mut sg_1v1_node_10v1_joindata = Default::default();
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(),
                var_expr!(),
                move |context, var_args!(), var_args!()| {
                    let op_7v1 =
                        std::iter::from_fn(|| match hydroflow::futures::stream::Stream::poll_next(
                            sg_1v1_node_7v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        });
                    hydroflow::assert_var_impl!(op_7v1: std::iter::Iterator);
                    let op_1v1 = op_7v1;
                    hydroflow::assert_var_impl!(op_1v1: std::iter::Iterator);
                    let op_2v1 = op_1v1;
                    hydroflow::assert_var_impl!(op_2v1: std::iter::Iterator);
                    let op_8v1 =
                        std::iter::from_fn(|| match hydroflow::futures::stream::Stream::poll_next(
                            sg_1v1_node_8v1_stream.as_mut(),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        });
                    hydroflow::assert_var_impl!(op_8v1: std::iter::Iterator);
                    let op_3v1 = op_8v1;
                    hydroflow::assert_var_impl!(op_3v1: std::iter::Iterator);
                    let op_4v1 = op_3v1;
                    hydroflow::assert_var_impl!(op_4v1: std::iter::Iterator);
                    let op_12v1 = op_2v1.map(|v: (_,)| ((v.0,), v));
                    hydroflow::assert_var_impl!(op_12v1: std::iter::Iterator);
                    let op_13v1 = op_4v1.map(|v: (_,)| ((v.0,), v));
                    hydroflow::assert_var_impl!(op_13v1: std::iter::Iterator);
                    let op_10v1 = hydroflow::compiled::pull::SymmetricHashJoin::new(
                        op_12v1,
                        op_13v1,
                        &mut sg_1v1_node_10v1_joindata,
                    );
                    hydroflow::assert_var_impl!(op_10v1: std::iter::Iterator);
                    let op_11v1 = op_10v1.map(|kv: ((_,), ((_,), (_,)))| (kv.1 .0 .0,));
                    hydroflow::assert_var_impl!(op_11v1: std::iter::Iterator);
                    let op_14v1 = op_11v1.map(|row: (_,)| (row.0,));
                    hydroflow::assert_var_impl!(op_14v1: std::iter::Iterator);
                    let op_5v1 = op_14v1;
                    hydroflow::assert_var_impl!(op_5v1: std::iter::Iterator);
                    let op_6v1 = op_5v1;
                    hydroflow::assert_var_impl!(op_6v1: std::iter::Iterator);
                    let op_9v1 =
                        hydroflow::pusherator::for_each::ForEach::new(|v| out.send(v).unwrap());
                    hydroflow::assert_var_impl!(op_9v1: hydroflow::pusherator::Pusherator);
                    hydroflow::pusherator::pivot::Pivot::new(op_6v1, op_9v1).run();
                },
            );
            df
        }
    }
}


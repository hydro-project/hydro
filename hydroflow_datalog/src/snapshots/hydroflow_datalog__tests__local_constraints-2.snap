---
source: hydroflow_datalog/src/lib.rs
assertion_line: 346
expression: rustfmt_code(&wrapped.to_token_stream().to_string())
---
fn main() {
    {
        {
            use hydroflow::tl;
            let mut df = hydroflow :: scheduled :: graph :: Hydroflow :: new_with_graph ("{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"op_1v1: merge ()\",\"version\":1},{\"value\":\"op_2v1: tee ()\",\"version\":1},{\"value\":\"op_3v1: merge ()\",\"version\":1},{\"value\":\"op_4v1: tee ()\",\"version\":1},{\"value\":\"op_5v1: recv_stream (input)\",\"version\":1},{\"value\":\"op_6v1: for_each (| v | out . send (v) . unwrap ())\",\"version\":1},{\"value\":\"op_7v1: filter (| & row : & (_ , _ , _ , _ ,) | row . 0 == row . 1 && row . 2 == row . 3)\",\"version\":1},{\"value\":\"op_8v1: map (| row : (_ , _ , _ , _ ,) | (row . 0 , row . 0 , row . 2 , row . 2 ,))\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":2,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":1,\"version\":1}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"idx\":8,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1}],\"version\":1}],\"handoffs\":[{\"value\":null,\"version\":0}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":6,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}]}\n") ;
            let mut sg_1v1_node_5v1_stream = input;
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                tl!(),
                tl!(),
                move |context, tl!(), tl!()| {
                    let op_5v1 = std::iter::from_fn(|| {
                        match sg_1v1_node_5v1_stream
                            .poll_recv(&mut std::task::Context::from_waker(&context.waker()))
                        {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_1v1 = op_5v1;
                    let op_2v1 = op_1v1;
                    let op_7v1 =
                        op_2v1.filter(|&row: &(_, _, _, _)| row.0 == row.1 && row.2 == row.3);
                    let op_8v1 = op_7v1.map(|row: (_, _, _, _)| (row.0, row.0, row.2, row.2));
                    let op_3v1 = op_8v1;
                    let op_4v1 = op_3v1;
                    let op_6v1 =
                        hydroflow::pusherator::for_each::ForEach::new(|v| out.send(v).unwrap());
                    hydroflow::pusherator::pivot::Pivot::new(op_4v1, op_6v1).run();
                },
            );
            df
        }
    }
}


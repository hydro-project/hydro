searchState.loadedDescShard("gossip_server", 0, "Parse duration from float string for clap args.\nPort to listen for client requests.\nReturns the argument unchanged.\nThe duration (in seconds) between gossip rounds.\nPort to listen for gossip messages.\nCalls <code>U::from(self)</code>.\nCreate a SeedNode from a SeedNodeSettings. Performs a DNS …\nHandler for the /metrics route. Used to expose prometheus …\nSetup deserialization for inbound networking messages.\nSetup serialization for outbound networking messages.\nA seed node that can be used to bootstrap the gossip …\nL0 Data Store settings.\nWraps an UnboundedSender to implement the …\nThe address on which the seed node is listening for gossip …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the seed node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the settings from the configuration files.\nAn initial set of “seed nodes” that can be used to …\nSetup a watcher for the settings files and return a stream …\nThis is a simple distribution that generates a random …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets a name for the current process.")
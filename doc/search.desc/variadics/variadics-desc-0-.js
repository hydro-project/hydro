searchState.loadedDescShard("variadics", 0, "Variadics\nThis as a variadic of exclusive (<code>mut</code>) references.\nThis as a variadic of references.\nClone a variadic of references <code>AsRefVar</code> into a variadic of …\nCopy a variadic of references <code>EitherRefVariadic</code> into a …\nresult type from drain\nA variadic of either shared references, exclusive …\nCreates a new (longer) variadic type by appending <code>Suffix</code> …\nA variadic where all elements are the same type, <code>T</code>.\nIterator type returned by <code>into_iter</code>.\ntype for all elements of the variadic being wrapped in …\ntype for all elements of the variadic being wrapped in <code>Vec</code>\nresult type from into_zip\nIterator type returned by <code>Self::iter_any_mut</code>.\nIterator type returned by <code>Self::iter_any_ref</code>.\nThe number of items in this variadic (its length).\nThis type with all shared <code>&amp;</code> references replaced with …\nA variadic where each item is an exclusive reference …\nA variadic where all item implement <code>PartialEq</code>.\nThe first part when splitting this variadic by <code>Suffix</code>.\nThis type with all exclusive <code>&amp;mut</code> references replaced with …\nA variadic where each item is a shared reference <code>&amp;item</code>.\nThe reverse of this variadic type.\nHelper trait for splitting a variadic into two parts. …\nHelper trait for splitting a variadic into two parts. …\nThe second part when splitting this variadic by <code>Prefix</code>.\nThe un-referenced variadic. Each item will have one layer …\nIndividual variadic items without the Vec wrapper\nA variadic tuple list.\nExtension methods/types for <code>Variadic</code>s.\ntrait for Variadic of vecs, as formed by …\nConvert an exclusive (<code>mut</code>) reference to this variadic into …\nConvert a reference to this variadic into a variadic of …\nClone a variadic of references <code>AsRefVar</code> into a variadic of …\nCopy self per-value.\nTurns into a Drain of items <code>UnVec</code> – i.e. iterate through …\n<code>PartialEq</code> between a referenced variadic and a variadic of …\n<code>PartialEq</code> for the <code>AsRefVar</code> version op <code>Self</code>.\nExtends this variadic value by appending <code>suffix</code> onto the …\nReturns a reference to an element.\nget the unvec’ed Variadic at position <code>index</code>\nReturns an exclusive reference to an element.\nTurns this <code>HomogenousVariadic&lt;T&gt;</code> into an iterator of items …\nwrap all elements of the variadic in `Option``\nwrap all elements of the variadic in a <code>Vec</code>\nTurns into an iterator of items <code>UnVec</code> – i.e. iterate …\nChecks if this variadic type is empty.\nIterate this variadic as <code>&amp;mut dyn Any</code> exclusive references.\nIterate this variadic as <code>&amp;dyn Any</code> references.\nThe length of this variadic type\nConvert all exclusive (<code>mut</code>) references into shared …\nappend an unvec’ed Variadic into this VariadicVec\nReverses this variadic value.\nReverses an AsRefVar variadic value\nSplits this variadic into two parts, first the <code>Prefix</code>, and …\nSplits this variadic into two parts, first the <code>Prefix</code>, and …\nSplits a refvar variadic\nSplits a refvar variadic\nconvert entries to <code>&lt;UnRefVar as VariadicExt&gt;::AsRefVar</code>\nVariadic patterns macro.\nVariadic expressions (values) macro.\nVariadic types macro.\nmodule of collection types for variadics\nThis macro generates a basic variadic trait where each …\nzip across all the vecs in this VariadicVec\nIterator helper for <code>VariadicCountedHashSet::into_iter</code>.\nThe Schema (aka Variadic type) associated with tuples in …\nTrait for a set of Variadic Tuples\nColumn storage for Variadic tuples of type Schema An …\nHashMap keyed on Variadics of (owned value, count) pairs, …\nHashSet that stores Variadics of owned values but allows …\nTrait for a multiset of Tuples\ntrait for sets or multisets of variadics\nCheck for containment\niterate and drain items from the set without deallocating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngiven a RefVariadic lookup key, get a RefVariadic version …\ngiven a RefVariadic lookup key, get a RefVariadic version …\nInsert an element into the set, return true if successful\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if empty\nIterate over the elements of the set\nReturn number of elements in the set\nCreates a new <code>VariadicHashSet</code> with a default hasher.\nCreates a new <code>VariadicCountedHashSet</code> with a default hasher.\ninitialize an empty columnar multiset\nallocate a new VariadicHashSet with a specific hasher and …\nallocate a new VariadicCountedHashSet with a specific …\nallocate a new VariadicHashSet with a specific hasher\nallocate a new VariadicCountedHashSet with a specific …")
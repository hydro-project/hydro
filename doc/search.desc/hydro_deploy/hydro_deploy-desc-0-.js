searchState.loadedDescShard("hydro_deploy", 0, "Like BindType, but includes metadata for determining …\nTypes of connections that a host can make to another host.\nReturns a reference to the host as a trait object.\nDetermines whether this host can connect to another host …\nProvides a oneshot channel for the CLI to handshake with …\nMakes requests for physical resources (servers) that this …\nMakes requests for physical resources server ports that …\nConnects to the acquired resources and prepares the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn identifier for this host, which is unique within a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConnects to the acquired resources and prepares the host …\nLaunches the service, which should start listening for …\nConfigures the host to support copying and running a …\nGiven a pre-selected network type, computes concrete …\nStarts the service by having it connect to other services …\nStops the service by having it disconnect from other …\nIdentifies a network type that this host can use for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an unknown, third-party service that is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies a crate that uses <code>hydroflow_cli_integration</code> to be\nSets the arguments to be passed to the binary when it is …\nSets the target to be a binary with the given name, …\nSets the display name for this service, which will be used …\nSets the target to be an example with the given name, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>HydroflowCrate</code> that will be deployed on the …\nSets the profile to be used when building the crate. …\nA demux that will be used at runtime to listen to many …\nThe other side of a demux, with a port to extract the …\nA merge that will be used at runtime to combine many …\nThe other side of a merge, with a port to extract the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate the sink as the source host connecting to the …\nInstantiate the sink, but as the sink host connecting to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeeps track of resources which may need to be cleaned up.\n<code>None</code> if no deployment was performed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
searchState.loadedDescShard("hydroflow_plus", 1, "Returns an empty <code>TokenStream</code> containing no token trees.\nCreates a new <code>Group</code> with the given delimiter and token …\nCreates a new <code>Punct</code> from the given character and spacing.\nCreates a new span with the same line/column information …\nConfigures the span for <em>only this token</em>.\nConfigures the span for this <code>Group</code>’s delimiters, but not …\nConfigure the span for this punctuation character.\nConfigures the span associated for this literal.\nReturns the source text behind a span. This preserves the …\nReturns the spacing of this punctuation character, …\nReturns the span of this tree, delegating to the <code>span</code> …\nReturns the span for the delimiters of this token stream, …\nReturns the span for this punctuation character.\nReturns the span encompassing this literal.\nReturns the span pointing to the closing delimiter of this …\nReturns the span pointing to the opening delimiter of this …\nGet the starting line/column in the source file for this …\nReturns the <code>TokenStream</code> of tokens that are delimited in …\nString literal.\nReturns a <code>Span</code> that is a subset of <code>self.span()</code> containing …\nPublic implementation details for the <code>TokenStream</code> type, …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nConvert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.\nCreates a new suffixed integer literal with the specified …\nCreates a new unsuffixed integer literal with the …\nAn object that holds a <code>Group</code>’s <code>span_open()</code> and …\nReturns a span for the closing punctuation of the group …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvalidate any <code>proc_macro2::Span</code> that exist on the current …\nReturns a span covering the entire delimited group.\nReturns a span for the opening punctuation of the group …\nAn iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.\nAn abstract stream of tokens, or more concretely a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError type used by this crate.\nThe crate as found by <code>crate_name</code>.\nThe searched crate is this crate itself.\nThe searched crate was found with this name.\nFind the crate name for the given <code>orig_name</code> in the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe binary interface of a function: <code>extern &quot;C&quot;</code>.\nThe <code>+</code> operator (addition)\nThe <code>+=</code> operator\nThe <code>&amp;&amp;</code> operator (logical and)\nThe <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.\nAngle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …\nOne arm of a <code>match</code> expression: <code>0..=10 =&gt; { return true; }</code>.\nA slice literal expression: <code>[a, b, c, d]</code>.\nA fixed size array type: <code>[T; n]</code>.\nAn assignment expression: <code>a = compute()</code>.\nAn equality constraint on an associated constant: the …\nAn equality constraint on an associated constant: the …\nA binding (equality constraint) on an associated type: the …\nA binding (equality constraint) on an associated type: the …\nAn async block: <code>async { ... }</code>.\nDistinguishes between attributes that decorate an item and …\nAn attribute, like <code>#[repr(transparent)]</code>.\nAn await expression: <code>fut.await</code>.\nA bare function type: <code>fn(usize) -&gt; bool</code>.\nAn argument in a function type: the <code>usize</code> in …\nThe variadic argument of a function pointer like …\nA binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.\nA binary operation: <code>a + b</code>, <code>a += b</code>.\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>&amp;=</code> operator\nThe <code>|</code> operator (bitwise or)\nThe <code>|=</code> operator\nThe <code>^</code> operator (bitwise xor)\nThe <code>^=</code> operator\nA braced block containing Rust statements.\nA blocked scope: <code>{ ... }</code>.\nA boolean literal: <code>true</code> or <code>false</code>.\nA set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.\nA <code>break</code>, with an optional label to break and an optional …\nA byte literal: <code>b&#39;f&#39;</code>.\nA byte string literal: <code>b&quot;foo&quot;</code>.\nA nul-terminated C-string literal: <code>c&quot;foo&quot;</code>.\nA function call expression: <code>invoke(a, b)</code>.\nA cast expression: <code>foo as f64</code>.\nA character literal: <code>&#39;a&#39;</code>.\nInclusive at the beginning and end.\nA closure expression: <code>|a, b| a + b</code>.\nA const block: <code>const { ... }</code>.\nA const generic parameter: <code>const LENGTH: usize</code>.\nA constant item: <code>const MAX: u16 = 65535</code>.\nAn associated constant within the definition of a trait.\nAn associated constant within an impl block.\nA const block: <code>const { ... }</code>.\nA const expression. Must be inside of a block.\nA const generic parameter: <code>const LENGTH: usize</code>.\nAn associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.\nAn associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.\nA <code>continue</code>, with an optional label.\nThe storage of a struct, enum or union data structure.\nAn enum input to a <code>proc_macro_derive</code> macro.\nA struct input to a <code>proc_macro_derive</code> macro.\nAn untagged union input to a <code>proc_macro_derive</code> macro.\nReturn type is not specified.\nThe <code>*</code> operator for dereferencing\nData structure sent to a <code>proc_macro_derive</code> macro.\nThe <code>/</code> operator (division)\nThe <code>/=</code> operator\nAn enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.\nThe <code>==</code> operator (equality)\nContains the error value\nError returned when a Syn parser cannot parse the input …\nA Rust expression.\nExpression, with or without trailing semicolon.\nA slice literal expression: <code>[a, b, c, d]</code>.\nAn assignment expression: <code>a = compute()</code>.\nAn async block: <code>async { ... }</code>.\nAn await expression: <code>fut.await</code>.\nA binary operation: <code>a + b</code>, <code>a += b</code>.\nA blocked scope: <code>{ ... }</code>.\nA <code>break</code>, with an optional label to break and an optional …\nA function call expression: <code>invoke(a, b)</code>.\nA cast expression: <code>foo as f64</code>.\nA closure expression: <code>|a, b| a + b</code>.\nA const block: <code>const { ... }</code>.\nA <code>continue</code>, with an optional label.\nAccess of a named struct field (<code>obj.k</code>) or unnamed tuple …\nA for loop: <code>for pat in expr { ... }</code>.\nAn expression contained within invisible delimiters.\nAn <code>if</code> expression with an optional <code>else</code> block: …\nA square bracketed indexing expression: <code>vector[2]</code>.\nThe inferred value of a const generic argument, denoted <code>_</code>.\nA <code>let</code> guard: <code>let Some(x) = opt</code>.\nA literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.\nConditionless loop: <code>loop { ... }</code>.\nA macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.\nA <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.\nA method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.\nA parenthesized expression: <code>(a + b)</code>.\nA path like <code>std::mem::replace</code> possibly containing generic …\nA range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.\nA referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.\nAn array literal constructed from one repeated element: …\nA <code>return</code>, with an optional value to be returned.\nA struct literal expression: <code>Point { x: 1, y: 1 }</code>.\nA try-expression: <code>expr?</code>.\nA try block: <code>try { ... }</code>.\nA tuple expression: <code>(a, b, c, d)</code>.\nA unary operation: <code>!x</code>, <code>*x</code>.\nAn unsafe block: <code>unsafe { ... }</code>.\nA while loop: <code>while expr { ... }</code>.\nA yield expression: <code>yield expr</code>.\nAn <code>extern crate</code> item: <code>extern crate serde</code>.\nA field of a struct or enum variant.\nAccess of a named struct field (<code>obj.k</code>) or unnamed tuple …\nUnused, but reserved for RFC 3323 restrictions.\nA single field in a struct pattern.\nA field-value pair in a struct literal.\nData stored within an enum variant or struct.\nNamed fields of a struct or struct variant such as …\nUnnamed fields of a tuple struct or tuple variant such as …\nA complete file of Rust source code.\nA floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.\nA free-standing function: …\nA foreign function in an <code>extern</code> block.\nAn associated function within the definition of a trait.\nAn associated function within an impl block.\nAn argument in a function signature: the <code>n: usize</code> in …\nA for loop: <code>for pat in expr { ... }</code>.\nAn item within an <code>extern</code> block.\nA foreign function in an <code>extern</code> block.\nA macro invocation within an extern block.\nA foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.\nA foreign type in an <code>extern</code> block: <code>type void</code>.\nA block of foreign items: <code>extern &quot;C&quot; { ... }</code>.\nThe <code>&gt;=</code> operator (greater than or equal to)\nAn individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.\nA generic type parameter, lifetime, or const generic: …\nLifetimes and type parameters attached to a declaration of …\nA glob import in a <code>use</code> item: <code>*</code>.\nAn expression contained within invisible delimiters.\nA braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.\nA type contained within invisible delimiters.\nThe <code>&gt;</code> operator (greater than)\nInclusive at the beginning, exclusive at the end.\nA word of Rust code, which may be a keyword or legal …\nA pattern that binds a new variable: …\nAn <code>if</code> expression with an optional <code>else</code> block: …\nAn impl block providing trait or associated items: …\nReturned by <code>Generics::split_for_impl</code>.\nAn item within an impl block.\nAn associated constant within an impl block.\nAn associated function within an impl block.\nA macro invocation within an impl block.\nAn associated type within an impl block.\nUnused, but reserved for RFC 3323 restrictions.\nAn <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …\nThe index of an unnamed tuple struct field.\nA square bracketed indexing expression: <code>vector[2]</code>.\nThe inferred value of a const generic argument, denoted <code>_</code>.\nIndication that a type should be inferred by the compiler: …\nAn inherited visibility, which usually means private.\nAn integer literal: <code>1</code> or <code>1u16</code>.\nThings that can appear directly inside of a module or …\nAn item definition.\nA constant item: <code>const MAX: u16 = 65535</code>.\nAn enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.\nAn <code>extern crate</code> item: <code>extern crate serde</code>.\nA free-standing function: …\nA block of foreign items: <code>extern &quot;C&quot; { ... }</code>.\nAn impl block providing trait or associated items: …\nA macro invocation, which includes <code>macro_rules!</code> …\nA module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.\nA static item: <code>static BIKE: Shed = Shed(42)</code>.\nA struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.\nA trait definition: <code>pub trait Iterator { ... }</code>.\nA trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…\nA type alias: …\nA union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.\nA use declaration: <code>use std::collections::HashMap</code>.\nA lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.\nThe <code>&lt;=</code> operator (less than or equal to)\nA <code>let</code> guard: <code>let Some(x) = opt</code>.\nA Rust lifetime: <code>&#39;a</code>.\nA lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.\nA lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.\nA lifetime argument.\nA lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.\nA structured list within an attribute, like …\nA Rust literal such as a string or integer or boolean.\nA literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.\nA literal pattern: <code>0</code>.\nA boolean literal: <code>true</code> or <code>false</code>.\nA byte literal: <code>b&#39;f&#39;</code>.\nA byte string literal: <code>b&quot;foo&quot;</code>.\nA nul-terminated C-string literal: <code>c&quot;foo&quot;</code>.\nA character literal: <code>&#39;a&#39;</code>.\nA floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.\nAn integer literal: <code>1</code> or <code>1u16</code>.\nA UTF-8 string literal: <code>&quot;foo&quot;</code>.\nA local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.\nA local (let) binding.\nThe expression assigned in a local <code>let</code> binding, including …\nConditionless loop: <code>loop { ... }</code>.\nThe <code>&lt;</code> operator (less than)\nA macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.\nA macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.\nA macro invocation, which includes <code>macro_rules!</code> …\nA macro invocation within an extern block.\nA macro invocation within the definition of a trait.\nA macro invocation within an impl block.\nA macro in pattern position.\nA macro invocation in statement position.\nA macro in the type position.\nA grouping token that surrounds a macro body: <code>m!(...)</code> or …\nA <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.\nA struct or tuple struct field accessed in a struct …\nContent of a compile-time structured attribute.\nA structured list within an attribute, like …\nA name-value pair within an attribute, like …\nA method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.\nA module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.\nThe <code>*</code> operator (multiplication)\nThe <code>*=</code> operator\nAn identifier imported by a <code>use</code> item: <code>HashMap</code>.\nA name-value pair within an attribute, like …\nNamed fields of a struct or struct variant such as …\nA named field like <code>self.x</code>.\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\nThe never type: <code>!</code>.\nThe <code>!</code> operator for logical inversion\nContains the success value\nThe <code>||</code> operator (logical or)\nA pattern that matches any one of a set of cases.\nAn unspecified invalid expression.\nA parenthesized expression: <code>(a + b)</code>.\nA parenthesized pattern: <code>(A | B)</code>.\nA parenthesized type equivalent to the inner type.\nThe <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.\nArguments of a function path segment: the <code>(A, B) -&gt; C</code> in …\nA pattern in a local binding, function signature, match …\nA const block: <code>const { ... }</code>.\nA pattern that binds a new variable: …\nA literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.\nA macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.\nA pattern that matches any one of a set of cases.\nA parenthesized pattern: <code>(A | B)</code>.\nA path like <code>std::mem::replace</code> possibly containing generic …\nA range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.\nA reference pattern: <code>&amp;mut var</code>.\nThe dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.\nA dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…\nA struct or struct variant pattern: <code>Variant { x, y, .. }</code>.\nA tuple pattern: <code>(a, b)</code>.\nA tuple struct or tuple variant pattern: …\nA type ascription pattern: <code>foo: f64</code>.\nA pattern that matches any value: <code>_</code>.\nA path at which a named item is exported (e.g. …\nA path like <code>std::mem::replace</code> possibly containing generic …\nA path prefix of imports in a <code>use</code> item: <code>std::...</code>.\nA path pattern like <code>Color::Red</code>, optionally qualified with a\nA path like <code>std::slice::Iter</code>, optionally qualified with a …\nAngle bracketed or parenthesized arguments of a path …\nA segment of a path together with any path arguments on …\nA lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.\nA type predicate in a <code>where</code> clause: …\nA raw pointer type: <code>*const T</code> or <code>*mut T</code>.\nA public visibility level: <code>pub</code>.\nThe explicit Self type in a qualified path: the <code>T</code> in …\nA range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.\nA range pattern: <code>1..=2</code>.\nLimit types of a range, inclusive or exclusive.\nThe <code>self</code> argument of an associated method.\nThe <code>self</code> argument of an associated method.\nA referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.\nA reference pattern: <code>&amp;mut var</code>.\nA reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.\nThe <code>%</code> operator (modulus)\nThe <code>%=</code> operator\nAn renamed identifier imported by a <code>use</code> item: …\nAn array literal constructed from one repeated element: …\nThe dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.\nA visibility level restricted to some path: <code>pub(self)</code> or …\nThe result of a Syn parser.\nA <code>return</code>, with an optional value to be returned.\nReturn type of a function signature.\nThe <code>&lt;&lt;</code> operator (shift left)\nThe <code>&lt;&lt;=</code> operator\nThe <code>&gt;&gt;</code> operator (shift right)\nThe <code>&gt;&gt;=</code> operator\nA function signature in a trait or implementation: …\nA dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…\nA dynamically sized slice type: <code>[T]</code>.\nA static item: <code>static BIKE: Shed = Shed(42)</code>.\nA foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.\nThe mutability of an <code>Item::Static</code> or <code>ForeignItem::Static</code>.\nA statement, usually ending in a semicolon.\nA macro invocation in statement position.\nA UTF-8 string literal: <code>&quot;foo&quot;</code>.\nA struct literal expression: <code>Point { x: 1, y: 1 }</code>.\nA struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.\nA struct or struct variant pattern: <code>Variant { x, y, .. }</code>.\nThe <code>-</code> operator (subtraction)\nThe <code>-=</code> operator\nA type-macro that expands to the name of the Rust type …\nA trait definition: <code>pub trait Iterator { ... }</code>.\nA trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…\nA trait used as a bound on a type parameter.\nA modifier on a trait bound, currently only used for the <code>?</code> …\nAn item declaration within the definition of a trait.\nAn associated constant within the definition of a trait.\nAn associated function within the definition of a trait.\nA macro invocation within the definition of a trait.\nAn associated type within the definition of a trait.\nA trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …\nA try-expression: <code>expr?</code>.\nA try block: <code>try { ... }</code>.\nA tuple expression: <code>(a, b, c, d)</code>.\nA tuple pattern: <code>(a, b)</code>.\nA tuple type: <code>(A, B, C, String)</code>.\nA tuple struct or tuple variant pattern: …\nReturned by <code>TypeGenerics::as_turbofish</code>.\nThe possible types that a Rust value could have.\nA generic type parameter: <code>T: Into&lt;String&gt;</code>.\nA type predicate in a <code>where</code> clause: …\nA type alias: …\nA foreign type in an <code>extern</code> block: <code>type void</code>.\nAn associated type within the definition of a trait.\nAn associated type within an impl block.\nA type ascription pattern: <code>foo: f64</code>.\nA type argument.\nA particular type is returned.\nA fixed size array type: <code>[T; n]</code>.\nA bare function type: <code>fn(usize) -&gt; bool</code>.\nReturned by <code>Generics::split_for_impl</code>.\nA type contained within invisible delimiters.\nAn <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …\nIndication that a type should be inferred by the compiler: …\nA macro in the type position.\nThe never type: <code>!</code>.\nA generic type parameter: <code>T: Into&lt;String&gt;</code>.\nA trait or lifetime used as a bound on a type parameter.\nA parenthesized type equivalent to the inner type.\nA path like <code>std::slice::Iter</code>, optionally qualified with a …\nA raw pointer type: <code>*const T</code> or <code>*mut T</code>.\nA reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.\nA dynamically sized slice type: <code>[T]</code>.\nA trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …\nA tuple type: <code>(A, B, C, String)</code>.\nA function argument accepted by pattern and type.\nA unary operator: <code>*</code>, <code>!</code>, <code>-</code>.\nA unary operation: <code>!x</code>, <code>*x</code>.\nA union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.\nUnit struct or unit variant such as <code>None</code>.\nUnnamed fields of a tuple struct or tuple variant such as …\nAn unnamed field like <code>self.0</code>.\nAn unsafe block: <code>unsafe { ... }</code>.\nA use declaration: <code>use std::collections::HashMap</code>.\nA glob import in a <code>use</code> item: <code>*</code>.\nA braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.\nAn identifier imported by a <code>use</code> item: <code>HashMap</code>.\nA path prefix of imports in a <code>use</code> item: <code>std::...</code>.\nAn renamed identifier imported by a <code>use</code> item: …\nA suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …\nThe variadic argument of a foreign function.\nAn enum variant.\nTokens in expression position not interpreted by Syn.\nTokens forming an item not interpreted by Syn.\nTokens in an <code>extern</code> block not interpreted by Syn.\nTokens within the definition of a trait not interpreted by …\nTokens within an impl block not interpreted by Syn.\nA raw token literal not interpreted by Syn.\nTokens in pattern position not interpreted by Syn.\nTokens in type position not interpreted by Syn.\nA visibility level restricted to some path: <code>pub(self)</code> or …\nThe visibility level of an item: inherited or <code>pub</code> or …\nA <code>where</code> clause in a definition: …\nA single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.\nA while loop: <code>while expr { ... }</code>.\nA pattern that matches any value: <code>_</code>.\nA yield expression: <code>yield expr</code>.\nTurn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …\nParses the literal into a selected number type.\nThe type being bounded\nTrait and lifetime bounds (<code>Clone+Send+&#39;static</code>)\nParse a set of curly braces and expose their content to …\nParse a set of square brackets and expose their content to …\nA stably addressed token buffer supporting efficient …\nThe colon in <code>Struct { x: x }</code>. If written in shorthand like …\nAdd another error message to self such that when …\nIterator over the constant parameters in <code>self.params</code>.\nIterator over the constant parameters in <code>self.params</code>.\nDefine a type that supports parsing and printing a given …\nDefine a type that supports parsing and printing a …\nExplicit discriminant: <code>Variant = 1</code>\nExtension traits to provide parsing methods on foreign …\nContent stored in the variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf this path consists of a single ident, returns the ident.\nName of the variant.\nName of the field, if any.\nThe <code>example</code> in <code>macro_rules! example { ... }</code>.\n<code>(A, B)</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender the error as an invocation of <code>compile_error!</code>.\nReturns <code>true</code> if there are zero fields.\nDetermines whether this is a path of length 1 equal to the …\nGet an iterator over the borrowed <code>Field</code> items in this …\nGet an iterator over the mutably borrowed <code>Field</code> items in …\nReturns the number of fields.\nIterator over the lifetime parameters in <code>self.params</code>.\nThe <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>\nAny lifetimes from a <code>for</code> binding\nIterator over the lifetime parameters in <code>self.params</code>.\nInitializes an empty <code>where</code>-clause if there is not one …\nGet an iterator over the fields of a struct or variant as …\nFacility for interpreting structured content inside of an …\nUsually the <code>ParseStream::error</code> method will be used …\nCreates a new <code>Ident</code> with the given <code>string</code> as well as the …\nPanics\nInterpret a Syn literal from a proc-macro2 literal.\nSame as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…\nCreates an error with the specified message spanning the …\n<code>C</code>\nParse a set of parentheses and expose their content to …\nParsing interface for parsing a token stream into a syntax …\nParse tokens of source code into the chosen syntax tree …\nParse a syntax tree node from the content of this string …\nParse a proc-macro2 token stream into the chosen syntax …\nParse the arguments to the attribute as a syntax tree.\nSee <code>Attribute::parse_args</code>.\nParse the arguments to the attribute using the given …\nSee <code>Attribute::parse_args_with</code>.\nParse the tokens within the macro invocation’s …\nParse the tokens within the macro invocation’s …\nParse the content of a file of Rust code.\nParses zero or more inner attributes from the stream.\nParse the input TokenStream of a macro, triggering a …\nParse a <code>Path</code> containing no path arguments on any of its …\nParse a pattern, possibly involving <code>|</code>, but not a leading <code>|</code>.\nParse a pattern, possibly involving <code>|</code>, possibly including a\nParses a named (braced struct) field.\nParse the arguments to the attribute, expecting it to …\nSee <code>Attribute::parse_nested_meta</code>.\nParses zero or more outer attributes from the stream.\nQuasi-quotation macro that accepts input like the <code>quote!</code> …\nThis macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.\nParse a pattern that does <em>not</em> involve <code>|</code> at the top level.\nParse a string of Rust code into the chosen syntax tree …\nParse <code>::&lt;…&gt;</code> with mandatory leading <code>::</code>.\nParses an unnamed (tuple struct) field.\nInvoke parser on the content of this string literal.\nAn alternative to the primary <code>Expr::parse</code> parser (from the …\nParse the body of a block as zero or more statements, …\nAn alternative to the primary <code>Expr::parse</code> parser (from the …\nReturns the path that identifies the interpretation of …\nReturns the path that begins this structured meta item.\nThe <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>\nA punctuated sequence of syntax tree nodes separated by …\nA method’s <code>self</code> receiver, such as <code>&amp;self</code> or …\nAn error if this path is not a single ident, as defined in …\nError if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.\nError if this is a <code>Meta::Path</code> or <code>Meta::List</code>.\nError if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.\nThe Self type of the impl.\nConfigures the span of this <code>Ident</code>, possibly changing its …\nThe source location of the error.\nReturns the span of this <code>Ident</code>.\nA trait that can provide the <code>Span</code> of the complete contents …\nSplit a type’s generics into the pieces required for impl…\nStatements in a block\nRender the error as an invocation of <code>compile_error!</code>.\nTokens representing Rust punctuation, keywords, and …\nTrait this impl implements.\nIterator over the type parameters in <code>self.params</code>.\nIterator over the type parameters in <code>self.params</code>.\nSyntax tree traversal to walk a shared borrow of a syntax …\nSyntax tree traversal to mutate an exclusive borrow of a …\nIn some positions, types may not contain the <code>+</code> character, …\nA cheaply copyable cursor into a <code>TokenBuffer</code>.\nA buffer that can be efficiently traversed multiple times, …\nCreates a cursor referencing the first token in the buffer …\nCreates a cursor referencing a static empty TokenStream.\nChecks whether the cursor is currently pointing at the end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the cursor is pointing at a <code>Group</code> with the given …\nIf the cursor is pointing at a <code>Ident</code>, returns it along …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the cursor is pointing at a <code>Lifetime</code>, returns it along …\nIf the cursor is pointing at a <code>Literal</code>, return it along …\nCreates a <code>TokenBuffer</code> containing all the tokens from the …\nCreates a <code>TokenBuffer</code> containing all the tokens from the …\nIf the cursor is pointing at a <code>Punct</code>, returns it along …\nReturns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…\nCopies all remaining tokens visible from this cursor into a\nIf the cursor is pointing at a <code>TokenTree</code>, returns it along …\nAdditional methods for <code>Ident</code> not provided by proc-macro2 …\nParses any identifier including keywords.\nPeeks any identifier including keywords. Usage: …\nStrips the raw marker <code>r#</code>, if any, from the beginning of an …\nContext for parsing a single property in the conventional …\nReport that the attribute’s content did not conform to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUsed when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …\nMake a parser that is usable with <code>parse_macro_input!</code> in a …\nUsed when parsing <code>key = &quot;value&quot;</code> syntax.\nContains the error value\nError returned when a Syn parser cannot parse the input …\nSupport for checking the next token in a stream to decide …\nAn empty syntax tree node that consumes no tokens when …\nContains the success value\nParsing interface implemented by all types that can be …\nCursor position within a buffered token stream.\nInput to a Syn parser function.\nParser that can parse Rust tokens into a particular syntax …\nTypes that can be parsed by looking at just one token.\nThe result of a Syn parser.\nCursor state associated with speculative parsing.\nCalls the given parser function to parse a syntax tree …\nProvides low-level access to the token representation …\nExtensions to the parsing API with niche applicability.\nTriggers an error at the current position of the parse …\nTriggers an error at the current position of the parse …\nTriggers an error at the current position of the parse …\nForks a parse stream so that parsing tokens out of either …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no more tokens remaining to be …\nConstructs a helper for peeking at the next token in this …\nParses a syntax tree node of type <code>T</code>, advancing the …\nParse tokens of source code into the chosen syntax tree …\nParse a proc-macro2 token stream into the chosen syntax …\nParse a string of Rust code into the chosen syntax tree …\nParses zero or more occurrences of <code>T</code> separated by …\nLooks at the next token in the parse stream to determine …\nLooks at the next token in the parse stream to determine …\nLooks at the second-next token in the parse stream.\nLooks at the third-next token in the parse stream.\nReturns the <code>Span</code> of the next token in the parse stream, or …\nSpeculatively parses tokens from this parse stream, …\nExtensions to the <code>ParseStream</code> API to support manipulating …\nExtensions to the <code>ParseStream</code> API to support speculative …\nAdvance this parse stream to the position of a forked …\nReturns the delimiter, the span of the delimiter token, …\nAn iterator over owned values of type <code>T</code>.\nAn iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.\nAn iterator over borrowed values of type <code>&amp;T</code>.\nAn iterator over mutably borrowed values of type <code>&amp;mut T</code>.\nA single syntax tree node of type <code>T</code> followed by its …\nAn iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.\nAn iterator over mutably borrowed pairs of type …\n<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…\nClears the sequence of all values and punctuation, making …\nReturns true if either this <code>Punctuated</code> is empty, or it has …\nBorrows the first element in this sequence.\nMutably borrows the first element in this sequence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrows the element at the given index.\nMutably borrows the element at the given index.\nInserts an element at position <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the contents of this sequence as …\nProduces this punctuated pair as a tuple of syntax tree …\nExtracts the syntax tree node from this punctuated pair, …\nDetermines whether this punctuated sequence is empty, …\nReturns an iterator over borrowed syntax tree nodes of …\nReturns an iterator over mutably borrowed syntax tree …\nBorrows the last element in this sequence.\nMutably borrows the last element in this sequence.\nReturns the number of syntax tree nodes in this punctuated …\nCreates an empty punctuated sequence.\nCreates a punctuated pair out of a syntax tree node and an …\nReturns an iterator over the contents of this sequence as …\nReturns an iterator over the contents of this sequence as …\nParses one or more occurrences of <code>T</code> separated by …\nParses one or more occurrences of <code>T</code> using the given parse …\nParses zero or more occurrences of <code>T</code> separated by …\nParses zero or more occurrences of <code>T</code> using the given parse …\nRemoves the last punctuated pair from this sequence, or …\nRemoves the trailing punctuation from this punctuated …\nBorrows the punctuation from this punctuated pair, unless …\nMutably borrows the punctuation from this punctuated pair, …\nAppends a syntax tree node onto the end of this punctuated …\nAppends a trailing punctuation onto the end of this …\nAppends a syntax tree node onto the end of this punctuated …\nDetermines whether this punctuated sequence ends with a …\nBorrows the syntax tree node from this punctuated pair.\nMutably borrows the syntax tree node from this punctuated …\nA trait that can provide the <code>Span</code> of the complete contents …\nReturns a <code>Span</code> covering the complete contents of this …\n<code>abstract</code>\n<code>&amp;</code>\n<code>&amp;&amp;</code>\n<code>&amp;=</code>\n<code>as</code>\n<code>async</code>\n<code>@</code>\n<code>auto</code>\n<code>await</code>\n<code>become</code>\n<code>box</code>\n<code>{</code>…<code>}</code>\n<code>[</code>…<code>]</code>\n<code>break</code>\n<code>^</code>\n<code>^=</code>\n<code>:</code>\n<code>,</code>\n<code>const</code>\n<code>continue</code>\n<code>crate</code>\n<code>default</code>\n<code>do</code>\n<code>$</code>\n<code>.</code>\n<code>..</code>\n<code>...</code>\n<code>..=</code>\n<code>dyn</code>\n<code>else</code>\n<code>enum</code>\n<code>=</code>\n<code>==</code>\n<code>extern</code>\n<code>=&gt;</code>\n<code>final</code>\n<code>fn</code>\n<code>for</code>\n<code>&gt;=</code>\nNone-delimited group\n<code>&gt;</code>\n<code>if</code>\n<code>impl</code>\n<code>in</code>\n<code>&lt;-</code>\n<code>&lt;=</code>\n<code>let</code>\n<code>loop</code>\n<code>&lt;</code>\n<code>macro</code>\n<code>match</code>\n<code>-</code>\n<code>-=</code>\n<code>mod</code>\n<code>move</code>\n<code>mut</code>\n<code>!=</code>\n<code>!</code>\n<code>|</code>\n<code>|=</code>\n<code>||</code>\n<code>override</code>\n<code>(</code>…<code>)</code>\n<code>::</code>\n<code>%</code>\n<code>%=</code>\n<code>+</code>\n<code>+=</code>\n<code>#</code>\n<code>priv</code>\n<code>pub</code>\n<code>?</code>\n<code>-&gt;</code>\n<code>ref</code>\n<code>return</code>\n<code>Self</code>\n<code>self</code>\n<code>;</code>\n<code>&lt;&lt;</code>\n<code>&lt;&lt;=</code>\n<code>&gt;&gt;</code>\n<code>&gt;&gt;=</code>\n<code>/</code>\n<code>/=</code>\n<code>*</code>\n<code>*=</code>\n<code>static</code>\n<code>struct</code>\n<code>super</code>\n<code>~</code>\nMarker trait for types that represent single tokens.\n<code>trait</code>\n<code>try</code>\n<code>type</code>\n<code>typeof</code>\n<code>_</code>\n<code>union</code>\n<code>unsafe</code>\n<code>unsized</code>\n<code>use</code>\n<code>virtual</code>\n<code>where</code>\n<code>while</code>\n<code>yield</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSyntax tree traversal to walk a shared borrow of a syntax …\nSyntax tree traversal to mutate an exclusive borrow of a …\nAn leaf in a Hydroflow+ graph, which is an pipeline that …\nAn intermediate node in a Hydroflow+ graph, which consumes …\nA source in a Hydroflow+ graph, where data enters the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA “meta iterator adaptor”. Its closure receives a …\nBoth values are present.\nAn iterator for the elements in a single chunk.\nAn iterator that yields the Chunk iterators.\nAn iterator over all windows,wrapping back to the first …\nAn iterator adaptor that may join together adjacent …\nAn iterator to iterate through all the <code>k</code>-length …\nAn iterator to iterate through all the <code>n</code>-length …\nAn iterator that maps an iterator of tuples like …\nContinue folding with this value\nAn iterator adaptor that removes repeated duplicates.\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nA type returned by the <code>diff_with</code> function.\nFold is complete and will return this value\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter for duplicate elements.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nValue that either holds a single A or B, or both.\nIterator returned for the error case of …\nAn iterator adapter to filter and apply a transformation …\nAn iterator adapter to filter values within a nested …\nThis is the first element.\nThe index of the first non-matching element along with …\nAn iterator adaptor that flattens <code>Result::Ok</code> values and …\nAn enum used for controlling the execution of <code>fold_while</code>.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nAn iterator for the elements in a single group.\n<code>GroupBy</code> is the storage for the lazy grouping operation.\n<code>GroupingMap</code> is an intermediate struct for efficient …\n<code>GroupingMapBy</code> is an intermediate struct for efficient …\nAn iterator that yields the Group iterators.\nAn iterator adaptor that alternates elements from two …\nAn iterator adaptor that alternates elements from the two …\nAn iterator adaptor to insert a particular value between …\nAn iterator adaptor to insert a particular value created …\n<code>ChunkLazy</code> is the storage for a lazy chunking operation.\nAn iterator that infinitely applies function to value and …\nAn <code>Iterator</code> blanket implementation that provides extra …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adaptor that merges an abitrary number of base …\nThis is the last element.\nA value of type <code>L</code>.\nOnly the left value of type <code>A</code> is present.\nThe total number of elements that were in <code>I</code> along with the …\nAn iterator adapter to apply <code>Into</code> conversion to each …\nAn iterator adapter to apply a transformation within a …\nSee <code>MapOk</code>.\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merge-joins items from the two …\nThis is neither the first nor the last element.\nMore than one element in the iterator, the first element …\n<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.\nSee <code>multipeek()</code> for more information.\nAn iterator adaptor that iterates over the cartesian …\nAn iterator that can be unzipped into multiple collections.\nEmpty iterator\nIterator with one element, so the minimum and maximum are …\nThis is the only element.\nAn iterator adaptor that pads a sequence to a minimum …\nSee <code>peek_nth()</code> for more information.\nAn iterator that allows peeking at an element before …\nAn iterator adaptor that takes items while a closure …\nAn iterator adaptor that iterates through all the <code>k</code>…\nA value yielded by <code>WithPosition</code>. Indicates the position of …\nAn iterator adapter to get the positions of each element …\nAn iterator to iterate through the powerset of the …\nAn iterator that produces only the <code>T</code> values as long as the …\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that allows putting back a single item …\nAn iterator adaptor that allows putting multiple items in …\nA wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …\nSee <code>repeat_call</code> for more information.\nAn iterator that produces <em>n</em> repetitions of an element.\nA value of type <code>R</code>.\nOnly the right value of type <code>B</code> is present.\nThe total number of elements that were in <code>J</code> along with the …\nAn iterator adaptor that steps a number elements in the …\nAn iterator adaptor that borrows from a <code>Clone</code>-able iterator\nOne half of an iterator pair where both return the same …\nAn iterator over a incomplete tuple.\nAn iterator to iterate through all combinations in a <code>Clone</code>…\nAn iterator over all contiguous windows that produces …\nAn iterator that groups the items in tuples of a specific …\nSee <code>unfold</code> for more information.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to apply a mutating function to each …\nAn iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nAn iterator adaptor that wraps each element in an <code>Position</code>.\nSee <code>multizip</code> for more information.\nAn iterator which iterates two other iterators …\nAn iterator which iterates two other iterators …\nComposable external iteration.\nThis is the generic way to perform any operation on a …\nTest whether the predicate holds for all elements in the …\nCheck whether all elements compare equal.\nCheck whether all elements are unique (non equal).\nTest whether the predicate holds for any elements in the …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConverts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nConverts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.\nAssert that two iterables produce equal sequences, with …\nIf the iterator yields no elements, Ok(None) will be …\nA “meta iterator adaptor”. Its closure receives a …\nIf Both, return <code>Some</code> tuple containing left and right.\nReturn an iterator adaptor that iterates over the …\nTakes two iterables and creates a new iterator over both …\nChain zero or more iterators together into one sequence.\nReturn an <em>iterable</em> that can chunk the iterator.\nReturn an iterator over all windows, wrapping back to the …\nCreate an iterator that clones each element from &amp;T to T\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nReturn an iterator adaptor that uses the passed-in closure …\nGroups elements from the <code>GroupingMap</code> source by key and …\nCollects all items from the iterator into a tuple of a …\n<code>.collect_vec()</code> is simply a type specialization of …\nReturn an iterator adaptor that iterates over the <code>k</code>-length …\nReturn an iterator that iterates over the <code>k</code>-length …\nCombine all an iterator’s elements into one element by …\nCombine all an iterator’s elements into one element by …\nCreate an iterator that maps for example iterators of …\nReturns <code>true</code> if the given item is present in this iterator.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nCollect the items in this iterator and return a <code>HashMap</code> …\nCollect the items in this iterator and return a <code>HashMap</code> …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nCompares every element yielded by both <code>i</code> and <code>j</code> with the …\nConsume the first <code>n</code> elements from the iterator eagerly, …\nConsume the last <code>n</code> elements from the iterator eagerly, and …\nReturn an iterator adaptor that produces elements that …\nReturn an iterator adaptor that produces elements that …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nIterate <code>iterable</code> with a running index.\nReturn <code>true</code> if both iterables produce equal sequences …\nIf the iterator yields exactly one element, that element …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nReturn an iterator adaptor that filters and transforms …\nReturn an iterator adaptor that filters every <code>Result::Ok</code> …\nFind the value of the first element satisfying a predicate …\nFind the value of the first element satisfying a predicate …\nFind the position and value of the first element …\nReturn an iterator adaptor that flattens every <code>Result::Ok</code> …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nConvert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.\nPerform a fold operation over the iterable.\nGroups elements from the <code>GroupingMap</code> source by key and …\nAccumulator of the elements in the iterator.\nGroups elements from the <code>GroupingMap</code> source by key and …\nFold <code>Result</code> values from an iterator.\nFold <code>Option</code> values from an iterator.\nSee <code>.fold_ok()</code>.\nAn iterator method that applies a function, producing a …\nRun the closure <code>f</code> eagerly on each element of the iterator.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an <em>iterable</em> that can group iterator elements. …\nIf <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.\nIf <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.\nCreate an iterator that interleaves elements in <code>i</code> and <code>j</code>.\nAlternate elements from two iterators until both have run …\nAlternate elements from two iterators until at least one …\nIterate <code>iterable</code> with a particular value inserted between …\nAn iterator adaptor to insert a particular value between …\nIterate <code>iterable</code> with a particular value created by a …\nAn iterator adaptor to insert a particular value created …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a buffer with the produced items that was not …\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …\nReturn an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …\nConstructs a <code>GroupingMap</code> to be used later with one of the …\nConstructs a <code>GroupingMap</code> to be used later with one of the …\nExtract the value of an either over two equivalent types.\nReturn the inner value.\nReturn the value in the continue or done.\nConvert the inner value to an iterator.\n<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …\nSplit the <code>PutBack</code> into its parts.\nCreate an iterator over the “cartesian product” of …\nIf Right, return true otherwise, return false. Equivalent …\nReturn true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.\nReturn true if the value is the <code>Left</code> variant.\nIf Left, return true otherwise, return false. Exclusive …\nReturn true if the value is the <code>Right</code> variant.\nIf Right, return true otherwise, return false. Exclusive …\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nCreates a new iterator that infinitely applies function to …\nCreate an iterator running multiple iterators in lockstep.\nCombine all iterator elements into one String, separated …\nCombine all iterator elements into one String, separated …\nReturns the length of a combination produced by this …\nSort the k smallest elements into a new iterator, in …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nIf <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nConvert each item of the iterator using the <code>Into</code> trait.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …\nReturn an iterator adaptor that applies the provided …\nSee <code>.map_ok()</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …\nReturn the maximum value of the iterable.\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn all maximum elements of an iterator.\nReturn all maximum elements of an iterator, as determined …\nReturn all minimum elements of an iterator, as determined …\nCreate an iterator that merges elements in <code>i</code> and <code>j</code>.\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merge-joins items from the …\nCreate an iterator that merges items from both this and …\nReturn the minimum value of the iterable.\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn all minimum elements of an iterator.\nReturn all minimum elements of an iterator, as determined …\nReturn all minimum elements of an iterator, as determined …\nReturn the minimum and maximum elements in the iterator.\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn the minimum and maximum element of an iterator, as …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn the minimum and maximum element of an iterator, as …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn an iterator adaptor that iterates over the …\nAn iterator adaptor that allows the user to peek at …\nAn iterator adaptor that allows the user to peek at …\nConverts an iterator of tuples into a tuple of containers.\nUnzip this iterator into multiple collections.\nConverts an iterator of tuples into a tuple of containers.\nAn iterator that generalizes <em>.zip()</em> and allows running …\nReturns the (current) length of the pool from which …\nAdvances the iterator and returns the next items grouped …\nReturns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …\nReturns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …\nReturns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …\nReturn an iterator adaptor that pads the sequence to a …\nPartition a sequence using predicate <code>pred</code> so that elements …\nCollect all iterator elements into one of two partitions. …\nPartition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…\nWorks exactly like <code>.next()</code> with the only difference that …\nWorks exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>\nA drop-in replacement for <code>std::iter::Peekable</code> which adds a …\nReturns a reference to the <code>nth</code> value without advancing the …\nPass a reference to the next iterator element to the …\nReturn an iterator adaptor that borrows from this iterator …\nReturn an iterator adaptor that iterates over all …\nReturn the position of the maximum element in the iterator.\nReturn the position of the maximum element in the …\nReturn the position of the maximum element in the …\nReturn the position of the minimum element in the iterator.\nReturn the position of the minimum element in the …\nReturn the position of the minimum element in the …\nReturn the positions of the minimum and maximum elements in\nReturn the postions of the minimum and maximum elements of …\nReturn the postions of the minimum and maximum elements of …\nReturn an iterator adaptor that yields the indices of all …\nReturn an iterator that iterates through the powerset of …\n“Lift” a function of the values of an iterator so that …\nGroups elements from the <code>GroupingMap</code> source by key and …\nIterate over the entire iterator and multiply all the …\nCreate an iterator where you can put back a single item\nPut back a single value to the front of the iterator.\nPuts x in front of the iterator. The values are yielded in …\nCreate an iterator where you can put back multiple values …\nReturn an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.\nThe boxed iterator.\nReturn either value of left, right, or the product of <code>f</code> …\nAn iterator source that produces elements indefinitely by …\nCreate an iterator that produces <code>n</code> repetitions of <code>element</code>.\nReset the peeking “cursor”\nIterate <code>iterable</code> in reverse.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nIf <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nAssign to each reference in <code>self</code> from the <code>from</code> iterator, …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nInternal state that will be passed to the closure on the …\nReturn an iterator adaptor that steps <code>n</code> elements in the …\nThe concrete iterator types.\nGroups elements from the <code>GroupingMap</code> source by key and …\nIterate over the entire iterator and add all the elements.\nReturn an iterator adaptor that borrows from a <code>Clone</code>-able …\nSplit into an iterator pair that both yield all elements …\nTraits helpful for using certain <code>Itertools</code> methods in …\nAccumulate the elements in the iterator in a tree-like …\n<code>.try_collect()</code> is more convenient way of writing …\nReturn an iterator adaptor that iterates over the …\nReturn an iterator over all contiguous windows producing …\nReturn an iterator that groups the items in tuples of a …\nCreates a new unfold source with the specified closure as …\nReturn an iterator adaptor that filters out elements that …\nReturn an iterator adaptor that filters out elements that …\nReturns the left value\nReturns the right value\nReturn an iterator adaptor that applies a mutating function\nReturn an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nReturn an iterator adaptor that wraps each element in a …\nput back value <code>value</code> (builder method)\nConverts the arguments to iterators and zips them.\nIterate <code>i</code> and <code>j</code> in lock step.\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\nAn iterator over <code>N</code> elements of the iterator at a time.\nLike <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …\nAn iterator that links two iterators together, in a chain.\nAn iterator that clones the elements of an underlying …\nAn iterator that copies the elements of an underlying …\nAn iterator that repeats endlessly.\nAn iterator able to yield elements from both ends.\nAn iterator that yields nothing.\nAn iterator that yields the current count and the element …\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nAn iterator that filters the elements of <code>iter</code> with …\nAn iterator that uses <code>f</code> to both filter and map elements …\nAn iterator that maps each element to an iterator, and …\nAn iterator that flattens one level of nesting in an …\nAn iterator where each iteration calls the provided …\nConversion from an <code>Iterator</code>.\nAn iterator that yields <code>None</code> forever after the underlying …\nAn iterator that always continues to yield <code>None</code> when …\nAn iterator that calls a function with a reference to each …\nAn iterator adapter that places a separator between all …\nAn iterator adapter that places a separator between all …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nAn iterator that maps the values of <code>iter</code> with <code>f</code>.\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator over the mapped windows of another iterator.\nAn iterator that yields an element exactly once.\nAn iterator that yields a single element of type <code>A</code> by …\nAn iterator with a <code>peek()</code> that returns an optional …\nTrait to represent types that can be created by …\nAn iterator that repeats an element endlessly.\nAn iterator that repeats an element an exact number of …\nAn iterator that repeats elements of type <code>A</code> endlessly by …\nA double-ended iterator with the direction inverted.\nAn iterator to maintain state while iterating another …\nAn iterator that skips over <code>n</code> elements of <code>iter</code>.\nAn iterator that rejects elements while <code>predicate</code> returns …\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn iterator for stepping iterators by a custom amount.\nA new iterator where each successive item is computed …\nTrait to represent types that can be created by summing up …\nAn iterator that only iterates over the first <code>n</code> iterations …\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator that reports an accurate length using …\nA type that upholds all invariants of <code>Step</code>.\nAn iterator that iterates two other iterators …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nTests if every element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nBorrows an iterator, rather than consuming it.\nConverts the arguments to iterators and links them …\nTakes two iterators and creates a new iterator over both …\nCreates an iterator which <code>clone</code>s all of its elements.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.\nCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.\nCreates a <code>Cloned</code> iterator from the default value of <code>I</code>\nCreates a <code>Copied</code> iterator from the default value of <code>I</code>\nCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>\nCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.\nCreates a <code>Rev</code> iterator from the default value of <code>I</code>\nCreates an iterator that yields nothing.\nCreates an iterator which gives the current iteration …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new iterator where each iteration calls the …\nCreates a new iterator where each iteration calls the …\nCreates a value from an iterator.\nCreates an iterator which ends after the first <code>None</code>.\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator from a value.\nReturns an iterator over the remaining elements of the …\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the exact remaining length of the iterator.\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAdvances the iterator and returns the next value.\nOverflow Behavior\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nConsume and return the next value of this iterator if a …\nConsume and return the next item if it is equal to <code>expected</code>…\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nCreates an iterator that yields an element exactly once.\nCreates an iterator that lazily generates a value exactly …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nReturns a reference to the next() value without advancing …\nReturns a mutable reference to the next() value without …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nSearches for an element in an iterator, returning its …\nTakes an iterator and generates <code>Self</code> from the elements by …\nIterates over the entire iterator, multiplying all the …\nReduces the elements to a single one, by repeatedly …\nCreates a new iterator that endlessly repeats a single …\nCreates a new iterator that repeats a single element a …\nCreates a new iterator that repeats elements of type <code>A</code> …\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nReturns the number of <em>successor</em> steps required to get from …\nCreates a new iterator where each successive item is …\nTakes an iterator and generates <code>Self</code> from the elements by …\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nConverts an iterator of pairs into a pair of containers.\nConverts the arguments to iterators and zips them.\n‘Zips up’ two iterators into a single iterator of …\nA “meta iterator adaptor”. Its closure receives a …\nAn iterator for the elements in a single chunk.\nAn iterator that yields the Chunk iterators.\nAn iterator over all windows,wrapping back to the first …\nAn iterator adaptor that may join together adjacent …\nAn iterator to iterate through all the <code>k</code>-length …\nAn iterator to iterate through all the <code>n</code>-length …\nAn iterator that maps an iterator of tuples like …\nAn iterator adaptor that removes repeated duplicates.\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter for duplicate elements.\nIterator returned for the error case of …\nAn iterator adapter to filter and apply a transformation …\nAn iterator adapter to filter values within a nested …\nAn iterator adaptor that flattens <code>Result::Ok</code> values and …\nFormat all iterator elements lazily, separated by <code>sep</code>.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nAn iterator for the elements in a single group.\n<code>GroupBy</code> is the storage for the lazy grouping operation.\n<code>GroupingMap</code> is an intermediate struct for efficient …\n<code>GroupingMapBy</code> is an intermediate struct for efficient …\nAn iterator that yields the Group iterators.\nAn iterator adaptor that alternates elements from two …\nAn iterator adaptor that alternates elements from the two …\nAn iterator adaptor to insert a particular value between …\nAn iterator adaptor to insert a particular value created …\n<code>ChunkLazy</code> is the storage for a lazy chunking operation.\nAn iterator that infinitely applies function to value and …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adapter to apply <code>Into</code> conversion to each …\nAn iterator adapter to apply a transformation within a …\nSee <code>MapOk</code>.\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merge-joins items from the two …\nSee <code>multipeek()</code> for more information.\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that pads a sequence to a minimum …\nSee <code>peek_nth()</code> for more information.\nAn iterator adaptor that takes items while a closure …\nAn iterator adaptor that iterates through all the <code>k</code>…\nAn iterator adapter to get the positions of each element …\nAn iterator to iterate through the powerset of the …\nAn iterator that produces only the <code>T</code> values as long as the …\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that allows putting back a single item …\nAn iterator adaptor that allows putting multiple items in …\nA wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …\nSee <code>repeat_call</code> for more information.\nAn iterator that produces <em>n</em> repetitions of an element.\nAn iterator adaptor that steps a number elements in the …\nAn iterator adaptor that borrows from a <code>Clone</code>-able iterator\nOne half of an iterator pair where both return the same …\nAn iterator over a incomplete tuple.\nAn iterator to iterate through all combinations in a <code>Clone</code>…\nAn iterator over all contiguous windows that produces …\nAn iterator that groups the items in tuples of a specific …\nSee <code>unfold</code> for more information.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to apply a mutating function to each …\nAn iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nAn iterator adaptor that wraps each element in an <code>Position</code>.\nSee <code>multizip</code> for more information.\nAn iterator which iterates two other iterators …\nAn iterator which iterates two other iterators …\nThe boxed iterator.\nInternal state that will be passed to the closure on the …\nImplemented for homogeneous tuples of size up to 12.\nCompatibility for <code>proc_macro</code> diagnostics, which are …\nGraph representation stages for Hydroflow graphs.\nAST for surface syntax, modelled on <code>syn</code>’s ASTs.\nPretty, human-readable printing of <code>proc_macro2::Span</code>s.\nUtility methods for processing singleton references: …\nUnion-find data structure, see <code>UnionFind</code>.\nDiagnostic. A warning or error (or lower <code>Level</code>) with a …\nAn error.\nA help message.\nDiagnostic reporting level.\nA note.\nA serializable and deserializable version of <code>Span</code>. Cannot …\nA warning.\nColumn number, one-indexed.\nEmit the diagnostic. Only works from the <code>proc_macro</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this level is <code>Level::Error</code>.\nIf this diagnostic’s level is <code>Level::Error</code>.\nSeverity level.\nLine number, one-indexed.\nHuman-readable message.\nThe source file path.\nSpan (source code location).\nCreate a new diagnostic from the given span, level, and …\nConverts this into a serializable and deserializable …\nUsed to emulate <code>Diagnostic::emit</code> by turning this …\nPush, Pull, Comp, or Hoff polarity.\nComputation (yellow)\nA directed multigraph where an vertex’s inbound and …\nDot (Graphviz) graphs.\nElided, unspecified port. We have this variant, rather …\nWraper around <code>HydroflowGraph</code> to build a flat graph from …\nID to identify an edge.\nA node, corresponding to an operator or a handoff.\nID to identify a node (operator or handoff) in …\nID to identify a subgraph in <code>HydroflowGraph</code>.\nA handoff point, used between subgraphs (or within a …\nHandoff (grey) – not a color for operators, inserted …\nAn abstract “meta graph” representation of a Hydroflow …\nAn integer value: <code>[0]</code>, <code>[1]</code>, etc. Can be negative although …\nMermaid graphs.\nModule Boundary, used for importing modules. Only exists …\nOperator generic arguments, split into specific categories.\nAn operator.\nMeta-data relating to operators which may be useful …\nA name or path. <code>[pos]</code>, <code>[neg]</code>, etc. Can use <code>::</code> separators …\nHelper struct for <code>PortIndex</code> which keeps span information …\nPull (green)\nPush (blue)\nConfiguration for writing graphs.\nEnum for choosing between mermaid and dot graph writing.\nAdd a single <code>HfStatement</code> line to this <code>HydroflowGraph</code>.\nArguments provided by the user into the operator as …\nUnparsed arguments, for singleton parsing.\nEmit this <code>HydroflowGraph</code> as runnable Rust source code …\nFormats self as a human-readable string for error messages.\nAssert that <code>self</code> is in a consistent state, for debugging. …\nBuild into an unpartitioned <code>HydroflowGraph</code>, returning a …\nThe main function of this module. Compiles a <code>HfCode</code> AST …\nReturn <code>Err(self)</code> if there is a conflict.\nThe degree (number of edges/vertices) going into <code>v</code>, i.e. …\nThe degree (number of edges/vertices) coming out of <code>v</code>, …\nGet the source and destination vertex IDs for the given …\nGet the <code>src</code> and <code>dst</code> for an edge: …\nReturn an iterator over all edge IDs <code>E</code>.\nIterator of all edge IDs <code>GraphEdgeId</code>.\nGet the source and destination ports for an edge: …\nReturn an iterator over all edges in form <code>(E, (V, V))</code>.\nIterator over all edges: …\nRemoves missing unions and tees. Must be applied BEFORE …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the Hydroflow code AST into a graph builder.\nConvert the Hydroflow code AST into a graph builder.\nFor a <code>Ported</code> value like <code>[port_in]name[port_out]</code>, get the …\nOperator generic (type or lifetime) arguments.\nGeneric arguments.\nGets the generic arguments for the operator.\nGeneral graph algorithm utility functions\nPort values used as this operator’s input.\nCreates an edge going from <code>src</code> to <code>dst</code> and returns the edge …\nInsert an edge between nodes thru the given ports.\nInserts a node between two existing nodes connected by the …\nFor an <code>edge</code> from <code>A --&gt; B</code>, insert a new vertex <code>V</code> along that …\nInsert a node, assigning the given varname.\nInsert an operator instance for the given node. Panics if …\nAssign all operator instances if not set. Write diagnostic …\nCreate a subgraph consisting of <code>node_ids</code>. Returns an error …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is not <code>PortIndexValue::Elided</code>.\nReturns the the stratum number of the largest (latest) …\nWhen modules are imported into a flat graph, they come …\nConvert into a mermaid graph. Ignores subgraphs.\nCreates an empty <code>DiMulGraph</code>.\nCreate a new empty graph builder.\nCreate a new empty <code>HydroflowGraph</code>.\nWill not render handoffs if set.\nWill not render pull/push shapes if set.\nWill not render singleton references if set.\nSubgraphs will not be rendered if set.\nVariable names will not be rendered if set.\nGet a node with its operator instance (if applicable).\nColor mode (pull vs. push, handoff vs. comp) for nodes. …\nDegree into a node, i.e. the number of predecessors.\nDegree out of a node, i.e. the number of successors.\nIterator of node IDs <code>GraphNodeId</code>.\nGet the <code>OperatorInstance</code> for a given node. Node must be an …\nPredecessor edges, iterator of <code>GraphEdgeId</code> of incoming …\nPredecessor nodes, iterator of <code>GraphNodeId</code>.\nPredecessors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …\nGets the singletons referenced by a node. Returns an empty …\nGet subgraph for node.\nSuccessor edges, iterator of <code>GraphEdgeId</code> of outgoing edges.\nSuccessor nodes, iterator of <code>GraphNodeId</code>.\nSuccessors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …\nGet the debug variable name attached to a graph node.\nIterator over <code>(GraphNodeId, &amp;Node)</code> pairs.\nName of the operator (will match <code>OperatorConstraints::name</code>…\nOp text will only be their name instead of the whole …\nOp text will exclude any line that starts with “use”.\nOpens this as dot/graphviz graph in the Graphviz Online …\nOpens the graph based on <code>graph_type</code>, which can be parsed …\nOpens this as a mermaid graph in the mermaid.live browser …\nHydroflow’s operators\nPort values used as this operator’s output.\nMain method for this module. Partions a flat <code>HydroflowGraph</code>…\nLifetime persistence arguments. Corresponds to a prefix of …\nReturn an iterator of all edge IDs going into <code>v</code>.\nReturn an iterator of all predecessor vertex IDs of <code>v</code>.\nReturn an iterator of all predecessor edge IDs <em>and</em> vertex …\nRemove an edge from the graph. If the edgeId is found then …\nRemoves an edge and its corresponding ports and edge type …\nRemoves a node from its subgraph. Returns true if the node …\nRemove the node <code>node_id</code> but preserves and connects the …\nFor a vertex with one incoming edge and one outgoing edge, …\nRemove a vertex from the graph, it must have no edges to …\nSet the singletons referenced for the <code>node_id</code> operator. …\nSet subgraph’s laziness, returning the old value.\nSet subgraph’s stratum number, returning the old value …\nSingleton references within the operator arguments.\nReturn the source code span of the node (for operators) or …\nReturns the span of this port value.\nNodes belonging to the given subgraph.\nIterator over all subgraph IDs.\nGets the stratum number of the subgraph.\nIterator over all subgraphs, ID and members: …\nReturn an iterator of all edge IDs coming out of <code>v</code>.\nReturn an iterator of all successor vertex IDs of <code>v</code>.\nReturn an iterator of all successor edge IDs <em>and</em> vertex …\nConvert back into surface syntax.\nWrites this graph as DOT (graphviz) into a string.\nWrites this graph as mermaid into a string.\nReturn the name of the node as a string, excluding …\nReturn the node as a human-readable string.\nType persistence arguments. Corersponds to a (suffix) of …\nCreates a <code>DiMulGraph</code> with pre-allocated memory for <code>capacity</code>…\nWrites this graph as DOT (graphviz) into the given <code>Write</code>.\nWrites this graph as mermaid into the given <code>Write</code>.\nConvert into a mermaid graph. Ignores subgraphs.\nConvert back into surface syntax.\nThe span of the output out of the handoff.\nThe span of the import!() expression that imported this …\nIf this module is an input or output boundary.\nThe span of the input into the handoff.\nFinds the strongly connected components in the graph. A …\nTopologically sorts a set of nodes. Returns a list where …\nComputers the topological sort of the nodes of a possibly …\nThe delay (soft barrier) type, for each input to an …\nA specific number of named ports.\n<code>OperatorConstraints::write_fn</code> for unary identity operators.\nMonotone accumulation: can delay to reduce flow rate, but …\nMutability.\n<code>OperatorConstraints::write_fn</code> for the null operator - an …\nAll Hydroflow operators.\nOperator categories, for docs.\nAn instance of this struct represents a single hydroflow …\nThe code generated and returned by a …\nPersistence lifetimes: <code>&#39;tick</code>, <code>&#39;static</code>, or <code>&#39;mutable</code>.\nSpecification of the named (or unnamed) ports for an …\nConvenience range: exactly zero.\nConvenience range: exactly one.\nConvenience range: zero or more (any number).\nAn object-safe version of <code>RangeBounds</code>.\nPersistene across all ticks.\nInput must be collected over the preceeding stratum.\nInput must be collected over the previous tick.\nPersistence for one tick at-a-time only.\nInput must be collected over the previous tick but also …\nAny number of unnamed (or optionally named) ports.\nContext arguments provided to <code>OperatorConstraints::write_fn</code>…\nType alias for <code>OperatorConstraints::write_fn</code>’s type.\nArguments provided by the user into the operator as …\nSame as <code>Self::arguments</code> but with only <code>StateHandle</code>s, no …\nOperator categories, for docs.\nReturns if <code>item</code> is contained in this range.\n<code>context</code> ident, the name of the provided …\nHuman description, for docs.\nEnd (upper) bound.\nFind an operator by <code>GraphNode</code>.\nFind an operator by an AST <code>Operator</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput argument range required to not show an error.\nOutput argument range required to not show an error.\nIf this operator has a singleton reference output. For …\nTurn this range into a human-readable string.\n<code>df</code> ident, the name of the …\nIdent the iterator or pullerator should be assigned to.\nHelper to write the <code>write_iterator</code> portion of …\nDetermines if this input must be preceeded by a stratum …\nInput operator idents (or ref idents; used for pull).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this operator receives external inputs and therefore …\nIf a pull iterator (true) or pusherator (false) should be …\nGenerate a (almost certainly) unique identifier with the …\nHuman-readible heading name, for docs.\nOperator’s name.\nNode ID identifying this operator in the flat or …\nHelper to write the <code>write_iterator</code> portion of …\nNumber of arguments i.e. <code>operator(a, b, c)</code> has <code>num_args = 3</code>…\nOperator instance arguments object.\nOperator name.\nThe source span of this operator.\nGet the operator lookup table, generating it if needed.\nOutput operator idents (or ref idents; used for push).\nHow many persistence lifetime arguments can be provided.\nWhat named or numbered input ports to expect?\nWhat named or numbered output ports to expect?\n<code>hydroflow</code> crate name for <code>use #root::something</code>.\nIdent for the singleton output of this operator, if any.\nInput argument range required to not show a warning.\nOutput argument range required to not show an warning.\nStart (lower) bound.\nSubgraph ID in which this operator is contained.\nHow many generic type arguments can be provided.\nThe operator’s codegen. Returns code that is emited is …\nIterator (or pusherator) code inside the subgraphs. The …\nCode which runs after iterators have been run. Mainly for …\nCode which runs once outside the subgraph to set up any …\nPort can either be an int or a name (path).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput the operator as a formatted string using …\nHelper struct which displays the span as <code>row:col</code> for human …\nHelper struct which displays the span as <code>path:row:col</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReplaces singleton references <code>#my_var</code> with the code needed …\nSame as <code>postprocess_singletons</code> but generates just the …\nFinds all the singleton references <code>#my_var</code> and appends …\nUnion-find data structure.\nFinds the “representative” item for <code>k</code>. Each set of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UnionFind</code>, same as <code>Default::default()</code>.\nReturns if <code>a</code> and <code>b</code> are equivalent, i.e. in the same set.\nCombines two items <code>a</code> and <code>b</code> as equivalent, in the same set.\nCreates a new <code>UnionFind</code> with the given key capacity …\nTrait for Semiring Addition.\nThe type of atoms for this lattice.\nThe iter type iterating the antichain atoms.\nTrait to atomize a lattice into individual elements. For …\nConstruct a forest of Ghts (i.e. a ColtForest) with the …\nA <code>Conflict</code> lattice, stores a single instance of <code>T</code> and goes …\nTrait for recursively revealing the underlying types …\nDominating pair compound lattice.\nPublic macro for constructing a Ght struct with the given …\nInternal macro for constructing a Ght struct with the …\nTrait to check if a lattice instance is bottom (⊥).\nDerives lattice <code>IsBot</code>.\nTrait to check if a lattice instance is top (⊤) and …\nDerives lattice <code>IsTop</code>.\nAlias trait for lattice types.\n<code>#[derive(Lattice)]</code> Macro\nSemilattice bimorphism. Lattice merge must distribute over …\nSame as <code>From</code> but for lattices.\nDerives <code>LatticeFrom</code>.\nSemilattice morphism. Lattice merge must distribute over …\nTrait for lattice partial order comparison PartialOrd is …\nDerives [<code>PartialEq</code>], [<code>PartialOrd</code>], and <code>LatticeOrd</code> together.\nA totally ordered max lattice. Merging returns the larger …\nTrait for lattice merge (AKA “join” or “least upper …\nDerives lattice <code>Merge</code>.\nA totally ordered min lattice. Merging returns the smaller …\nTrait for Semiring Multiplication.\nNaive lattice compare, based on the <code>Merge::merge</code> function.\nTrait to define a one in a semiring.\nThe output lattice type.\nThe output lattice type.\nPair compound lattice.\nBimorphism which pairs up the two input lattices.\nA <code>Point</code> lattice, corresponding to a single instance of <code>T</code>.\nThe underlying type when revealed.\nAlias trait for semirings.\nVec-union compound lattice.\nAdds a new “bot” value to the nested lattice type.\nAdds a new “top” value to the nested lattice type.\nTrait to check if semiring contains a zero.\nThe “left” Lattice of the Pair lattice.\nAdd-assign <code>other</code> into self.\nAdd <code>this</code> and <code>delta</code> together, returning the new value.\nModule for definiting algebraic structures and properties.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nAtomize self: convert into an iter of atoms.\nThe “right” Lattice of the Pair lattice.\nExecutes the function.\nExecutes the function.\nConverts a closure to a bimorphism. Does not check for …\nConverts a closure to a morphism. Does not check for …\nSimple singleton or array collection with <code>cc_traits</code> …\nReveals the underlying lattice types recursively.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Max</code> lattice instance from an <code>Into&lt;T&gt;</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGHT from the Wang/Willsey/Suciu Freejoin work\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nReturns if <code>self</code> is lattice bottom (⊥).\nReturns if <code>self</code> is lattice top (⊤).\nThe <code>Key</code> of the  dominating pair lattice, usually a …\nConvert from the <code>Other</code> lattice into <code>Self</code>.\nModule containing the <code>MapUnion</code> lattice and aliases for …\nModule containing the <code>MapUnionWithTombstones</code> lattice and …\nMerge <code>other</code> into the <code>self</code> lattice.\nMerge <code>this</code> and <code>delta</code> together, returning the new value.\nMultiply-assign <code>other</code> into self.\nMultiply <code>this</code> and <code>delta</code> together, returning the new value.\nNaive compare based on the <code>Merge::merge</code> method. This …\nCreate a new <code>Conflict</code> lattice instance from a value.\nCreate a <code>DomPair</code> from the given <code>Key</code> and <code>Val</code>.\nCreate a new <code>Max</code> lattice instance from a <code>T</code>.\nCreate a new <code>Min</code> lattice instance from a <code>T</code>.\nCreate a <code>Pair</code> from the given values.\nCreate a new <code>Point</code> lattice instance from a value.\nCreate a new <code>VecUnion</code> from a <code>Vec</code> of <code>Lat</code> instances.\nCreate a new <code>WithBot</code> lattice instance from a value.\nCreate a new <code>WithTop</code> lattice instance from a value.\nCreate a new <code>Conflict</code> lattice instance from a value using …\nCreate a <code>DomPair</code> from the given <code>Into&lt;Key&gt;</code> and <code>Into&lt;Val&gt;</code>.\nCreate a new <code>Min</code> lattice instance from an <code>Into&lt;T&gt;</code> value.\nCreate a <code>Pair</code> from the given values, using <code>Into</code>.\nCreate a new <code>Point</code> lattice instance from a value using <code>Into</code>…\nCreate a new <code>VecUnion</code> from an <code>Into&lt;Vec&lt;Lat&gt;&gt;</code>.\nCreate a new <code>WithBot</code> lattice instance from a value using …\nCreate a new <code>WithTop</code> lattice instance from a value using …\nReturns the one element of the semiring. Identity for the …\nModule containing the <code>BinaryTrust</code> applications.\nModule containing the <code>SetUnion</code> lattice and aliases for …\nModule containing the <code>SetUnionWithTombstones</code> lattice and …\nHelper test utils to test lattice implementation …\nModule containing the <code>UnionFind</code> lattice and aliases for …\nThe value stored inside. This should not be mutated.\nReturns the zero element of the semiring. Identify for the …\nDefines an abelian group structure.\nDefines the absorbing_element property.\nDefines the associativity property.\nDefines the bilinearity property\nDefines a commutative monoid structure.\nDefines a commutative ring structure.\nDefines the commutativity property.\nDefines the distributive property\nDefines a field structure.\nLoop through each algebraic property in …\nDefines a group structure.\nDefines the idempotency property.\nDefines the identity property.\nDefines an integral domain structure.\nDefines the inverse property.\nDefines the left distributive property\nDefines the linearity property\nDefines a monoid structure.\nDefines a no-nonzero-zero-divisors property.\nDefines the non_zero inverse property.\nDefines the right distributive property.\nDefines a ring structure.\nDefines a semigroup structure.\nDefines a semiring structure.\nCollection exposing a reference to its back element.\nCollection exposing a mutable reference to its back …\nCollection with known capacity.\nCollection with mutable capacity.\nClearable collection.\nAbstract collection.\nAbstract collection that can be mutably referenced.\nAbstract collection that can be immutably referenced.\nImmutable double-ended queue.\nMutable double-ended queue.\nCollection exposing a reference to its front element.\nCollection exposing a mutable reference to its front …\nQueryable collection.\nQueryable map.\nMutably queryable map.\nMutably queryable collection.\nMutable collection where new elements can be inserted.\nType of the items of the collection.\nType of mutable references to items of the collection.\nType of references to items of the collection.\nIterable collection.\nIterator type.\nMutably iterable collection.\nIterator type.\nType of the keys indexing each item of the collection.\nType of references to keys of the collection.\nAbstract keyed collection.\nAbstract keyed collection whose key can be referenced.\nSized collection.\nImutable map data structure.\nMutable map where new new key-value pairs can be inserted.\nMutable map data structure.\nThe output of the insertion function.\nThe output of the insertion function.\nThe output of the push function.\nThe output of the push function.\nMutable collection where elements can be popped from the …\nMutable collection where elements can be popped from the …\nMutable collection where new elements can be pushed on the …\nMutable collection where new elements can be pushed on the …\nMutable collection where elements can be removed from.\nCollection that can extend their capacity.\nImutable set data structure.\nMutable set data structure.\nCollection where each item reference can be converted into …\nCollection where each item reference can be converted into …\nKeyed collection where each key reference can be converted …\nImutable slab data structure.\nMutable slab data structure.\nImmutable stack data structure.\nMutable stack data structure.\nImmutable array data structure (conventionally nammed “…\nImmutable indexable deque.\nMutable indexable deque.\nMutable Vec data structure.\nCollection that can be created with a minimum given …\nGet a reference to the back element of the collection.\nGet a mutable reference to the back element of the …\nReturns the current capacity of the collection.\nRemove all the elements of the collection.\nChecks if the collection contains an item behind the given …\nAutomatically defines the <code>CollectionMut::upcast_item_mut</code> …\nAutomatically defines the <code>CollectionRef::upcast_item_ref</code> …\nAutomatically defines the <code>KeyedRef::upcast_item_ref</code> …\nGet a reference to the front element of the collection.\nGet a mutable reference to the front element of the …\nReturns a reference to the item stored behind the given …\nReturns the key-value pair matching the given <code>key</code>.\nReturns the key-value pair matching the given <code>key</code>, with a …\nReturns a mutable reference to the item stored behind the …\nInsert a new element in the collection.\nInsert a new key-value pair in the collection.\nChecks if the collection is empty.\nCreate an iterator over the items of the collection.\nCreate an iterator over the mutable items of the …\nReturns the number of elements in the collection.\nRemove the back element of the collection and return it …\nRemove the front element of the collection and return it …\nPush a new element on the back of the collection.\nPush a new element on the front of the collection.\nRemove the element identified by the given <code>key</code>.\nReserve enough memory for <code>edditional</code> more elements.\nAutomatically defines the <code>CollectionMut::upcast_item_mut</code> …\nAutomatically defines the <code>SimpleCollectionRef::into_ref</code> …\nAutomatically defines the <code>SimpleKeyedRef::into_ref</code> …\nChanges an item mutable reference into a shorter lived …\nChanges an item reference into a shorter lived reference.\nChanges a key reference into a shorter lived reference.\nCreates a new instance of <code>Self</code> with the given minimum …\nAn array wrapper representing a fixed-size map.\nAn array wrapper representing a fixed-size set (modulo …\nA key-value entry wrapper representing a singleton map.\nA type that will always be an empty set.\nTrait for transforming the values of a map without …\nOutput type, should be <code>Self</code> but with <code>OldVal</code> replaced with …\nA key-value entry wrapper around <code>Option&lt;(K, V)&gt;</code> …\nA wrapper around <code>Option</code>, representing either a singleton …\nA key-value entry wrapper representing a singleton map.\nA wrapper around an item, representing a singleton set.\nA <code>Vec</code>-wrapper representing a naively implemented map.\nA <code>Vec</code>-wrapper representing a naively-implemented set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeys, should be the same length as and correspond 1:1 to …\nKeys, corresponding 1:1 with <code>vals</code>.\nMap the values into using the <code>map_fn</code>.")
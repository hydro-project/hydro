searchState.loadedDescShard("hydro_lang", 0, "Creates a quoted expression for Hydro.\nMarks the stream as being bounded, which means that it is …\nMarks the stream as being unbounded, which means that it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a forward reference in the graph that will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of ID used to switch between different subgraphs at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn leaf in a Hydro graph, which is an pipeline that doesn…\nAn intermediate node in a Hydro graph, which consumes data …\nA source in a Hydro graph, where data enters the graph.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates a stream with values emitted at a fixed …\nGenerates a stream with values emitted at a fixed interval …\nGiven the ordering guarantees of the input, determines the …\nA free variable representing the cluster’s own ID. When …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarks the stream as being inside the single global clock …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a tick, returns a optional value corresponding to a …\nEagerly samples the optional as fast as possible, …\nGiven a time interval, returns a stream corresponding to …\nCount the cardinality of each input and periodically …\nStructure for tracking expressions known to have …\nTags the expression as commutative.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a tick, returns a singleton value corresponding to a …\nEagerly samples the singleton as fast as possible, …\nGiven a time interval, returns a stream corresponding to …\nThe weaker of the two orderings.\nHelper trait for determining the weakest of two orderings.\nMarks the stream as having no order, which means that the …\nAn ordered sequence stream of elements of type <code>T</code>.\nMarks the stream as being totally ordered, which means …\nExplicitly “casts” the stream to a type with a …\nAllow this stream through if the other stream has …\nAllow this stream through if the other stream is empty, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a time interval, returns a stream corresponding to …\nGiven a tick, returns a stream corresponding to a batch of …\nGiven a timeout duration, returns an <code>Optional</code>  which will …")
searchState.loadedDescShard("hydro_lang", 0, "Graph visualization utilities for Hydro IR\nCreates a quoted expression for Hydro.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks the stream as being bounded, which means that it is …\nA marker trait indicating whether a stream’s length is …\nMarks the stream as being unbounded, which means that it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a GraphApi instance for this built flow\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompiles the flow into DFIR using placeholders for the …\nRepresents a forward reference in the graph that will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of ID used to switch between different subgraphs at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebugging utilities for Hydro IR graph visualization.\nGraph generation API for built flows\nGraph output format\nOpen DOT graph in browser\nWrite DOT graph to file\nGenerate DOT graph as string\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate all graph types and save to files with a given …\nGenerate all graph files based on GraphConfig\nGenerate graph based on GraphConfig, delegating to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen mermaid graph in browser\nWrite mermaid graph to file\nGenerate mermaid graph as string\nOpen ReactFlow graph in browser\nWrite ReactFlow graph to file\nGenerate ReactFlow graph as string\nOpens Hydro IR leaves as a single DOT diagram.\nOpens Hydro IR leaves as a single mermaid diagram.\nOpens Hydro IR leaves as a ReactFlow.js visualization in a …\nHelper function to create a complete HTML file with …\nSaves Hydro IR leaves as a DOT/Graphviz file. If no …\nSaves Hydro IR leaves as a Mermaid diagram file. If no …\nSaves Hydro IR leaves as a ReactFlow.js JSON file. If no …\nDOT/Graphviz graph writer for Hydro IR.\nEscapes a string for use in a DOT graph label.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen DOT/Graphviz visualization in browser for a BuiltFlow\nMermaid graph writer for Hydro IR.\nEscapes a string for use in a mermaid graph label.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen mermaid visualization in browser for a BuiltFlow\nReactFlow.js graph writer for Hydro IR. Outputs JSON that …\nReturns the argument unchanged.\nCreate ReactFlow JSON from Hydro IR with type names\nCalls <code>U::from(self)</code>.\nOpen ReactFlow visualization in browser for a BuiltFlow\nOpen ReactFlow visualization in browser using the …\nSave ReactFlow JSON to file using the consolidated debug …\nError type emitted by writing.\nCommon error type used by all graph writers.\nTypes of edges in Hydro IR.\nGraph structure tracker for Hydro IR rendering.\nTrait for writing textual representations of Hydro IR …\nTypes of nodes in Hydro IR for styling purposes.\nConfiguration for graph writing.\nBase struct for text-based graph writers that use …\nLabel for a graph node - can be either a static string or …\nA static string label\nA label with an operation name and expression arguments\nFunction to extract an op_name from a print_root() result …\nExtract a short, readable label from the full token stream …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new writer with default configuration.\nCreate a new writer with the given configuration.\nCreate a static label\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a label for an operation with multiple expression\nWrite an edge between nodes with optional labeling.\nEnd the graph. Last method called.\nEnd writing a location grouping.\nBegin writing a location grouping (process/cluster).\nWrite a node within a location.\nWrite a node definition with styling.\nBegin the graph. First method called.\nWrite an indented line using the current indentation level.\nHTML template for ReactFlow visualization\nDot (Graphviz) graphs.\nConfiguration for graph generation in examples.\nEnum for choosing between mermaid, dot, and reactflow …\nMermaid graphs.\nReactflow.js interactive graphs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGraph format to generate and display\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse full/long labels instead of short ones\nDon’t show location groups\nDon’t show metadata in graph nodes\nDon’t include tee IDs in nodes\n<code>ToString::to_string</code>, but without panic on OOM.\nDebug displays the type’s tokens.\nDebug displays the type’s tokens.\nAn leaf in a Hydro graph, which is an pipeline that doesn…\nAn intermediate node in a Hydro graph, which consumes data …\nA source in a Hydro graph, where data enters the graph.\nAST visitor that simplifies q! macro expansions\nBuild the graph structure by traversing the IR tree.\nBuild the graph structure recursively for this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nCore graph writing logic that works with any GraphWrite …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a stream with values emitted at a fixed …\nGenerates a stream with values emitted at a fixed interval …\nGiven the ordering guarantees of the input, determines the …\nA free variable representing the cluster’s own ID. When …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarks the stream as being inside the single global clock …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an optional value corresponding to the latest …\nGiven a tick, returns a optional value corresponding to a …\nTransforms the optional value by applying a function <code>f</code> to …\nEagerly samples the optional as fast as possible, …\nGiven a time interval, returns a stream corresponding to …\nStructure for tracking expressions known to have …\nTags the expression as commutative.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a singleton value corresponding to the latest …\nGiven a tick, returns a singleton value corresponding to a …\nEagerly samples the singleton as fast as possible, …\nGiven a time interval, returns a stream corresponding to …\nMarks the stream as having non-deterministic message …\nMarks the stream as having deterministic message …\nThe weaker of the two orderings.\nThe weaker of the two retry guarantees.\nHelper trait for determining the weakest of two orderings.\nHelper trait for determining the weakest of two retry …\nMarks the stream as having no order, which means that the …\nAn ordered sequence stream of elements of type <code>T</code>.\nMarks the stream as being totally ordered, which means …\nGiven a stream of pairs <code>(K, V1)</code> and a bounded stream of …\nExplicitly “casts” the stream to a type with a …\nExplicitly “casts” the stream to a type with a …\nProduces a new stream that first emits the elements of the …\nClone each element of the stream; akin to …\nAllow this stream through if the argument (a Bounded …\nAllow this stream through if the argument (a Bounded …\nComputes the number of elements in the stream as a …\nForms the cross-product (Cartesian product, cross-join) of …\nGenerates a stream that maps each input element <code>i</code> to a …\nReturns a stream with the current count tupled with each …\nCreates a stream containing only the elements of the input …\nAn operator that both filters and maps. It yields only the …\nOutputs everything in this stream that is <em>not</em> contained in …\nComputes the first element in the stream as an <code>Optional</code>, …\nFor each item <code>i</code> in the input stream, transform <code>i</code> using <code>f</code> …\nLike <code>Stream::flat_map_ordered</code>, but allows the …\nFor each item <code>i</code> in the input stream, treat <code>i</code> as an <code>Iterator</code>…\nLike <code>Stream::flatten_ordered</code>, but allows the …\nCombines elements of the stream into a <code>Singleton</code>, by …\nCombines elements of the stream into a <code>Singleton</code>, by …\nCombines elements of the stream into a <code>Singleton</code>, by …\nCombines elements of the stream into a <code>Singleton</code>, by …\nA special case of <code>Stream::fold</code>, in the spirit of SQL’s …\nA special case of <code>Stream::fold_commutative</code>, in the spirit …\nA special case of <code>Stream::fold_commutative_idempotent</code>, in …\nA special case of <code>Stream::fold_idempotent</code>, in the spirit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn operator which allows you to “inspect” each element …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven two streams of pairs <code>(K, V1)</code> and <code>(K, V2)</code>, produces a …\nGiven a stream of pairs <code>(K, V)</code>, produces a new stream of …\nComputes the last element in the stream as an <code>Optional</code>, …\nProduces a stream based on invoking <code>f</code> on each element in …\nComputes the maximum element in the stream as an <code>Optional</code>, …\nComputes the maximum element in the stream as an <code>Optional</code>, …\nComputes the minimum element in the stream as an <code>Optional</code>, …\nCombines elements of the stream into an <code>Optional</code>, by …\nCombines elements of the stream into a <code>Optional</code>, by …\nCombines elements of the stream into an <code>Optional</code>, by …\nCombines elements of the stream into an <code>Optional</code>, by …\nA special case of <code>Stream::reduce</code>, in the spirit of SQL’s …\nA special case of <code>Stream::reduce_commutative</code>, in the …\nA special case of <code>Stream::reduce_commutative_idempotent</code>, …\nA special case of <code>Stream::reduce_idempotent</code>, in the spirit …\nConsumes a stream of <code>Future&lt;T&gt;</code>, produces a new stream of …\nConsumes a stream of <code>Future&lt;T&gt;</code>, produces a new stream of …\nGiven a time interval, returns a stream corresponding to …\nApplies a function to each element of the stream, …\nProduces a new stream that emits the input elements in …\nReturns a stream corresponding to the latest batch of …\nGiven a tick, returns a stream corresponding to a batch of …\nGiven a timeout duration, returns an <code>Optional</code>  which will …\nProduces a new stream that interleaves the elements of the …\nTakes one stream as input and filters out any duplicate …")
---
source: hydro_test/src/cluster/simple_cluster.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)) , () > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , d) | println ! ("node received: ({}, {:?})" , id , d) }),
        input: Map {
            f: | (sender_id , b) | (ClusterId :: < _ > :: from_raw (sender_id . raw_id / 3usize as u32) , b),
            input: Network {
                from_key: None,
                to_location: Process(
                    0,
                ),
                to_key: None,
                serialize_fn: Some(
                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) > (& b) . unwrap ()) },
                ),
                input: Inspect {
                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) , () > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < () > :: from_raw ({ __hydro_lang_cluster_self_id_1 / 3usize as u32 }) ; move | n | println ! ("cluster received: {:?} (self cluster id: {})" , n , CLUSTER_SELF_ID__free) }),
                    input: Network {
                        from_key: None,
                        to_location: Cluster(
                            1,
                        ),
                        to_key: None,
                        serialize_fn: Some(
                            :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: ClusterId < _ > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                        ),
                        instantiate_fn: <network instantiate>,
                        deserialize_fn: Some(
                            | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) > (& res . unwrap ()) . unwrap () },
                        ),
                        input: Map {
                            f: | (orig_dest , tuple) | { let orig_dest_id = orig_dest . raw_id ; let new_dest_id = (orig_dest_id * 3usize as u32) + (tuple . 1 as usize % 3usize) as u32 ; (ClusterId :: < () > :: from_raw (new_dest_id) , tuple) },
                            input: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)) > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , n) | (id , (id , n)) }),
                                input: Delta {
                                    inner: CrossProduct {
                                        left: Persist {
                                            inner: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < & hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; | & id | id }),
                                                input: Source {
                                                    source: Iter(
                                                        { let all_ids = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < () >] > (__hydro_lang_cluster_ids_1) } ; & all_ids [0 .. all_ids . len () / 3usize] },
                                                    ),
                                                    location_kind: Process(
                                                        0,
                                                    ),
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Process(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            & hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () >,
                                                        ),
                                                        cardinality: None,
                                                        cpu_usage: None,
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Process(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () >,
                                                    ),
                                                    cardinality: None,
                                                    cpu_usage: None,
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Process(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () >,
                                                ),
                                                cardinality: None,
                                                cpu_usage: None,
                                            },
                                        },
                                        right: Persist {
                                            inner: Source {
                                                source: Iter(
                                                    { use crate :: __staged :: cluster :: simple_cluster :: * ; 0 .. 5 },
                                                ),
                                                location_kind: Process(
                                                    0,
                                                ),
                                                metadata: HydroIrMetadata {
                                                    location_kind: Process(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        i32,
                                                    ),
                                                    cardinality: None,
                                                    cpu_usage: None,
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Process(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    i32,
                                                ),
                                                cardinality: None,
                                                cpu_usage: None,
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Process(
                                                0,
                                            ),
                                            output_type: Some(
                                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                                            ),
                                            cardinality: None,
                                            cpu_usage: None,
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Process(
                                            0,
                                        ),
                                        output_type: Some(
                                            (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                                        ),
                                        cardinality: None,
                                        cpu_usage: None,
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Process(
                                        0,
                                    ),
                                    output_type: Some(
                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)),
                                    ),
                                    cardinality: None,
                                    cpu_usage: None,
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Process(
                                    0,
                                ),
                                output_type: Some(
                                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)),
                                ),
                                cardinality: None,
                                cpu_usage: None,
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                1,
                            ),
                            output_type: Some(
                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                            ),
                            cardinality: None,
                            cpu_usage: None,
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            1,
                        ),
                        output_type: Some(
                            (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                        ),
                        cardinality: None,
                        cpu_usage: None,
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        0,
                    ),
                    output_type: Some(
                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                    ),
                    cardinality: None,
                    cpu_usage: None,
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    0,
                ),
                output_type: Some(
                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32),
                ),
                cardinality: None,
                cpu_usage: None,
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                0,
            ),
            output_type: Some(
                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)),
            ),
            cardinality: None,
            cpu_usage: None,
        },
    },
]

---
source: hydro_test/src/cluster/simple_cluster.rs
expression: ir.surface_syntax_string()
---
1v1 = source_iter ({ let all_ids = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < () >] > (__hydro_lang_cluster_ids_1) } ; & all_ids [0 .. all_ids . len () / 3usize] });
2v1 = map (stageleft :: runtime_support :: fn1_type_hint :: < & hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; | & id | id }));
3v1 = source_iter ({ use crate :: __staged :: cluster :: simple_cluster :: * ; 0 .. 5 });
4v1 = cross_join_multiset :: < 'static , 'static > ();
5v1 = multiset_delta ();
6v1 = map (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)) > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , n) | (id , (id , n)) }));
7v1 = map (| (orig_dest , tuple) | { let orig_dest_id = orig_dest . raw_id ; let new_dest_id = (orig_dest_id * 3usize as u32) + (tuple . 1 as usize % 3usize) as u32 ; (ClusterId :: < () > :: from_raw (new_dest_id) , tuple) });
8v1 = map (:: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: ClusterId < _ > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }));
9v1 = dest_sink ({ use hydro_lang :: __staged :: deploy_runtime :: * ; let env__free = FAKE ; let p1_port__free = "port_0" ; { env__free . port (p1_port__free) . connect_local_blocking :: < ConnectedDemux < ConnectedDirect > > () . into_sink () } });
10v1 = source_stream ({ use hydro_lang :: __staged :: deploy_runtime :: * ; let env__free = FAKE ; let p2_port__free = "port_1" ; { env__free . port (p2_port__free) . connect_local_blocking :: < ConnectedTagged < ConnectedDirect > > () . into_source () } });
11v1 = map (| res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) > (& b) . unwrap ()) });
12v1 = map (| (sender_id , b) | (ClusterId :: < _ > :: from_raw (sender_id . raw_id / 3usize as u32) , b));
13v1 = for_each (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32)) , () > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , d) | println ! ("node received: ({}, {:?})" , id , d) }));

1v1 -> 2v1;
2v1 -> 4v1;
3v1 -> 4v1;
4v1 -> 5v1;
5v1 -> 6v1;
6v1 -> 7v1;
8v1 -> 9v1;
7v1 -> 8v1;
10v1 -> 11v1;
11v1 -> 12v1;
12v1 -> 13v1;

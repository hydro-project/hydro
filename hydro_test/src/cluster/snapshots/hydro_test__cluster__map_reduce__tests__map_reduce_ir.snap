---
source: hydro_test/src/cluster/map_reduce.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | (string , count) | println ! ("{}: {}" , string , count) }),
        input: ReduceKeyed {
            f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , i32 , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | total , count | * total += count }),
            input: Persist {
                inner: Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: map_reduce :: Worker > , (std :: string :: String , i32)) , (std :: string :: String , i32) > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                    input: Network {
                        from_key: None,
                        to_location: Process(
                            0,
                        ),
                        to_key: None,
                        serialize_fn: Some(
                            :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (std :: string :: String , i32) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
                        ),
                        instantiate_fn: <network instantiate>,
                        deserialize_fn: Some(
                            | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: map_reduce :: Worker > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (std :: string :: String , i32) > (& b) . unwrap ()) },
                        ),
                        input: Inspect {
                            f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | (string , count) | println ! ("partition count: {} - {}" , string , count) }),
                            input: FoldKeyed {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < i32 > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | | 0 }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , () , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | count , _ | * count += 1 }),
                                input: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , (std :: string :: String , ()) > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | string | (string , ()) }),
                                    input: Network {
                                        from_key: None,
                                        to_location: Cluster(
                                            1,
                                        ),
                                        to_key: None,
                                        serialize_fn: Some(
                                            :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: ClusterId < _ > , std :: string :: String) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                                        ),
                                        instantiate_fn: <network instantiate>,
                                        deserialize_fn: Some(
                                            | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () },
                                        ),
                                        input: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , std :: string :: String) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: map_reduce :: Worker > , std :: string :: String) > ({ use hydro_lang :: __staged :: stream :: * ; let ids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < hydro_test :: cluster :: map_reduce :: Worker >] > (__hydro_lang_cluster_ids_1) } ; | (i , w) | (ids__free [i % ids__free . len ()] , w) }),
                                            input: Enumerate {
                                                is_static: true,
                                                input: Map {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < & str , std :: string :: String > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | s | s . to_string () }),
                                                    input: Source {
                                                        source: Iter(
                                                            { use crate :: __staged :: cluster :: map_reduce :: * ; vec ! ["abc" , "abc" , "xyz" , "abc"] },
                                                        ),
                                                        location_kind: Process(
                                                            0,
                                                        ),
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Process(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                & str,
                                                            ),
                                                            cardinality: None,
                                                            cpu_usage: None,
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Process(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            std :: string :: String,
                                                        ),
                                                        cardinality: None,
                                                        cpu_usage: None,
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Process(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        (usize , std :: string :: String),
                                                    ),
                                                    cardinality: None,
                                                    cpu_usage: None,
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Process(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: map_reduce :: Worker > , std :: string :: String),
                                                ),
                                                cardinality: None,
                                                cpu_usage: None,
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                1,
                                            ),
                                            output_type: Some(
                                                std :: string :: String,
                                            ),
                                            cardinality: None,
                                            cpu_usage: None,
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            1,
                                        ),
                                        output_type: Some(
                                            (std :: string :: String , ()),
                                        ),
                                        cardinality: None,
                                        cpu_usage: None,
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        1,
                                    ),
                                    output_type: Some(
                                        (std :: string :: String , i32),
                                    ),
                                    cardinality: None,
                                    cpu_usage: None,
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    1,
                                ),
                                output_type: Some(
                                    (std :: string :: String , i32),
                                ),
                                cardinality: None,
                                cpu_usage: None,
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Process(
                                0,
                            ),
                            output_type: Some(
                                (std :: string :: String , i32),
                            ),
                            cardinality: None,
                            cpu_usage: None,
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            0,
                        ),
                        output_type: Some(
                            (std :: string :: String , i32),
                        ),
                        cardinality: None,
                        cpu_usage: None,
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        0,
                    ),
                    output_type: Some(
                        (std :: string :: String , i32),
                    ),
                    cardinality: None,
                    cpu_usage: None,
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    0,
                ),
                output_type: Some(
                    (std :: string :: String , i32),
                ),
                cardinality: None,
                cpu_usage: None,
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                0,
            ),
            output_type: Some(
                (std :: string :: String , i32),
            ),
            cardinality: None,
            cpu_usage: None,
        },
    },
]

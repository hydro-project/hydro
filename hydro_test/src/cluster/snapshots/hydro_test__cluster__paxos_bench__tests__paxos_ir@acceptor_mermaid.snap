---
source: hydro_test/src/cluster/paxos_bench.rs
expression: "preview.dfir_for(&acceptors).to_mermaid(&WriteConfig\n{\n    no_subgraphs: true, no_pull_push: true, no_handoffs: true,\n    op_text_no_imports: true, ..WriteConfig::default()\n})"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1["<div style=text-align:center>(1v1)</div> <code><br>source_iter({<br>    [&quot;Acceptors say hello&quot;]<br>})</code>"]:::otherClass
2v1["<div style=text-align:center>(2v1)</div> <code><br>for_each({<br>    |s| println!(&quot;{}&quot;, s)<br>})</code>"]:::otherClass
3v1["<div style=text-align:center>(3v1)</div> <code><br>source_stream(DUMMY_SOURCE)</code>"]:::otherClass
4v1["<div style=text-align:center>(4v1)</div> <code><br>map(|res| {<br>    let (id, b) = res.unwrap();<br>    (<br>        hydro_lang::location::MemberId::&lt;<br>            hydro_test::__staged::cluster::paxos::Proposer,<br>        &gt;::from_raw(id),<br>        hydro_lang::runtime_support::bincode::deserialize::&lt;<br>            hydro_test::__staged::cluster::paxos::Ballot,<br>        &gt;(&amp;b)<br>            .unwrap(),<br>    )<br>})</code>"]:::otherClass
5v1["<div style=text-align:center>(5v1)</div> <code><br>map({<br>    |(_, v)| v<br>})</code>"]:::otherClass
6v1["<div style=text-align:center>(6v1)</div> <code><br>tee()</code>"]:::otherClass
7v1["<div style=text-align:center>(7v1)</div> <code><br>inspect({<br>    |p1a| println!(&quot;Acceptor received P1a: {:?}&quot;, p1a)<br>})</code>"]:::otherClass
8v1["<div style=text-align:center>(8v1)</div> <code><br>reduce::&lt;<br>    'static,<br>&gt;({<br>    |curr, new| {<br>        if new &gt; *curr {<br>            *curr = new;<br>        }<br>    }<br>})</code>"]:::otherClass
9v1["<div style=text-align:center>(9v1)</div> <code><br>source_iter({<br>    let e__free = {<br>        Ballot {<br>            num: 0,<br>            proposer_id: MemberId::from_raw(0),<br>        }<br>    };<br>    [e__free]<br>})</code>"]:::otherClass
10v1["<div style=text-align:center>(10v1)</div> <code><br>persist::&lt;'static&gt;()</code>"]:::otherClass
11v1["<div style=text-align:center>(11v1)</div> <code><br>chain()</code>"]:::otherClass
12v1["<div style=text-align:center>(12v1)</div> <code><br>tee()</code>"]:::otherClass
13v1["<div style=text-align:center>(13v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
14v1["<div style=text-align:center>(14v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
15v1["<div style=text-align:center>(15v1)</div> <code><br>map({<br>    |((ballot, max_ballot), log)| (<br>        ballot.proposer_id,<br>        (ballot, if ballot == max_ballot { Ok(log) } else { Err(max_ballot) }),<br>    )<br>})</code>"]:::otherClass
16v1["<div style=text-align:center>(16v1)</div> <code><br>map(|(id, data)| {<br>    (<br>        id.raw_id,<br>        hydro_lang::runtime_support::bincode::serialize(&amp;data).unwrap().into(),<br>    )<br>})</code>"]:::otherClass
17v1["<div style=text-align:center>(17v1)</div> <code><br>dest_sink(DUMMY_SINK)</code>"]:::otherClass
18v1["<div style=text-align:center>(18v1)</div> <code><br>source_stream(DUMMY_SOURCE)</code>"]:::otherClass
19v1["<div style=text-align:center>(19v1)</div> <code><br>map(|res| {<br>    let (id, b) = res.unwrap();<br>    (<br>        hydro_lang::location::MemberId::&lt;<br>            hydro_test::__staged::cluster::paxos::Proposer,<br>        &gt;::from_raw(id),<br>        hydro_lang::runtime_support::bincode::deserialize::&lt;<br>            hydro_test::__staged::cluster::paxos::P2a&lt;<br>                hydro_test::__staged::cluster::kv_replica::KvPayload&lt;<br>                    u32,<br>                    (<br>                        hydro_test::__staged::__deps::hydro_lang::location::member_id::MemberId&lt;<br>                            hydro_test::__staged::cluster::paxos_bench::Client,<br>                        &gt;,<br>                        u32,<br>                    ),<br>                &gt;,<br>                hydro_test::__staged::cluster::paxos::Proposer,<br>            &gt;,<br>        &gt;(&amp;b)<br>            .unwrap(),<br>    )<br>})</code>"]:::otherClass
20v1["<div style=text-align:center>(20v1)</div> <code><br>map({<br>    |(_, v)| v<br>})</code>"]:::otherClass
21v1["<div style=text-align:center>(21v1)</div> <code><br>tee()</code>"]:::otherClass
22v1["<div style=text-align:center>(22v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
23v1["<div style=text-align:center>(23v1)</div> <code><br>map({<br>    |(p2a, max_ballot)| (<br>        p2a.sender,<br>        (<br>            (p2a.slot, p2a.ballot),<br>            if p2a.ballot == max_ballot { Ok(()) } else { Err(max_ballot) },<br>        ),<br>    )<br>})</code>"]:::otherClass
24v1["<div style=text-align:center>(24v1)</div> <code><br>map(|(id, data)| {<br>    (<br>        id.raw_id,<br>        hydro_lang::runtime_support::bincode::serialize(&amp;data).unwrap().into(),<br>    )<br>})</code>"]:::otherClass
25v1["<div style=text-align:center>(25v1)</div> <code><br>dest_sink(DUMMY_SINK)</code>"]:::otherClass
26v1["<div style=text-align:center>(26v1)</div> <code><br>tee()</code>"]:::otherClass
27v1["<div style=text-align:center>(27v1)</div> <code><br>map({<br>    |v| Some(v)<br>})</code>"]:::otherClass
28v1["<div style=text-align:center>(28v1)</div> <code><br>source_iter([::std::option::Option::None])</code>"]:::otherClass
29v1["<div style=text-align:center>(29v1)</div> <code><br>persist::&lt;'static&gt;()</code>"]:::otherClass
30v1["<div style=text-align:center>(30v1)</div> <code><br>chain()</code>"]:::otherClass
31v1["<div style=text-align:center>(31v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
32v1["<div style=text-align:center>(32v1)</div> <code><br>filter_map({<br>    |(p2a, max_ballot)| {<br>        if p2a.ballot &gt;= max_ballot {<br>            Some((<br>                p2a.slot,<br>                LogValue {<br>                    ballot: p2a.ballot,<br>                    value: p2a.value,<br>                },<br>            ))<br>        } else {<br>            None<br>        }<br>    }<br>})</code>"]:::otherClass
33v1["<div style=text-align:center>(33v1)</div> <code><br>chain()</code>"]:::otherClass
34v1["<div style=text-align:center>(34v1)</div> <code><br>map(|x| (Some(x), None))</code>"]:::otherClass
35v1["<div style=text-align:center>(35v1)</div> <code><br>map(|watermark| (None, Some(watermark)))</code>"]:::otherClass
36v1["<div style=text-align:center>(36v1)</div> <code><br>fold::&lt;<br>    'static,<br>&gt;(<br>    || (::std::collections::HashMap::new(), None),<br>    {<br>        let __reduce_keyed_fn = {<br>            |prev_entry, entry| {<br>                if entry.ballot &gt; prev_entry.ballot {<br>                    *prev_entry = LogValue {<br>                        ballot: entry.ballot,<br>                        value: entry.value,<br>                    };<br>                }<br>            }<br>        };<br>        move |(map, opt_curr_watermark), (opt_payload, opt_watermark)| {<br>            if let Some((k, v)) = opt_payload {<br>                if let Some(curr_watermark) = *opt_curr_watermark {<br>                    if k &lt;= curr_watermark {<br>                        return;<br>                    }<br>                }<br>                match map.entry(k) {<br>                    ::std::collections::hash_map::Entry::Vacant(e) =&gt; {<br>                        e.insert(v);<br>                    }<br>                    ::std::collections::hash_map::Entry::Occupied(mut e) =&gt; {<br>                        __reduce_keyed_fn(e.get_mut(), v);<br>                    }<br>                }<br>            } else {<br>                let watermark = opt_watermark.unwrap();<br>                if let Some(curr_watermark) = *opt_curr_watermark {<br>                    if watermark &lt;= curr_watermark {<br>                        return;<br>                    }<br>                }<br>                *opt_curr_watermark = opt_watermark;<br>                map.retain(|k, _| *k &gt; watermark);<br>            }<br>        }<br>    },<br>)</code>"]:::otherClass
37v1["<div style=text-align:center>(37v1)</div> <code><br>flat_map(|(map, _curr_watermark)| map)</code>"]:::otherClass
38v1["<div style=text-align:center>(38v1)</div> <code><br>fold::&lt;<br>    'tick,<br>&gt;(<br>    {<br>        || HashMap::new()<br>    },<br>    {<br>        |map, (slot, entry)| {<br>            map.insert(slot, entry);<br>        }<br>    },<br>)</code>"]:::otherClass
39v1["<div style=text-align:center>(39v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
40v1["<div style=text-align:center>(40v1)</div> <code><br>source_stream(DUMMY_SOURCE)</code>"]:::otherClass
41v1["<div style=text-align:center>(41v1)</div> <code><br>map(|res| {<br>    let (id, b) = res.unwrap();<br>    (<br>        hydro_lang::location::MemberId::&lt;<br>            hydro_test::__staged::cluster::kv_replica::Replica,<br>        &gt;::from_raw(id),<br>        hydro_lang::runtime_support::bincode::deserialize::&lt;usize&gt;(&amp;b).unwrap(),<br>    )<br>})</code>"]:::otherClass
42v1["<div style=text-align:center>(42v1)</div> <code><br>reduce_keyed::&lt;<br>    'static,<br>&gt;({<br>    |curr_seq, seq| {<br>        if seq &gt; *curr_seq {<br>            *curr_seq = seq;<br>        }<br>    }<br>})</code>"]:::otherClass
43v1["<div style=text-align:center>(43v1)</div> <code><br>tee()</code>"]:::otherClass
44v1["<div style=text-align:center>(44v1)</div> <code><br>fold::&lt;<br>    'tick,<br>&gt;(<br>    {<br>        || 0usize<br>    },<br>    {<br>        |count, _| *count += 1<br>    },<br>)</code>"]:::otherClass
45v1["<div style=text-align:center>(45v1)</div> <code><br>filter_map({<br>    let f__free = 1usize;<br>    move |num_received| if num_received == f__free + 1 { Some(true) } else { None }<br>})</code>"]:::otherClass
46v1["<div style=text-align:center>(46v1)</div> <code><br>map({<br>    |_u| ()<br>})</code>"]:::otherClass
47v1["<div style=text-align:center>(47v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
48v1["<div style=text-align:center>(48v1)</div> <code><br>map({<br>    |(d, _signal)| d<br>})</code>"]:::otherClass
49v1["<div style=text-align:center>(49v1)</div> <code><br>map({<br>    |(_sender, seq)| seq<br>})</code>"]:::otherClass
50v1["<div style=text-align:center>(50v1)</div> <code><br>reduce::&lt;<br>    'tick,<br>&gt;({<br>    |curr, new| {<br>        if new &lt; *curr {<br>            *curr = new;<br>        }<br>    }<br>})</code>"]:::otherClass
1v1-->2v1
3v1-->4v1
4v1-->5v1
5v1-->6v1
6v1-->7v1
7v1--x8v1; linkStyle 5 stroke:red
9v1-->10v1
8v1--x|0|11v1; linkStyle 7 stroke:red
10v1-->|1|11v1
11v1-->12v1
6v1-->|input|13v1
12v1--x|single|13v1; linkStyle 11 stroke:red
13v1-->|input|14v1
39v1--x|single|14v1; linkStyle 13 stroke:red
14v1-->15v1
16v1-->17v1
15v1-->16v1
18v1-->19v1
19v1-->20v1
20v1-->21v1
21v1-->|input|22v1
12v1--x|single|22v1; linkStyle 21 stroke:red
22v1-->23v1
24v1-->25v1
23v1-->24v1
50v1-->26v1
26v1-->27v1
28v1-->29v1
27v1--x|0|30v1; linkStyle 28 stroke:red
29v1-->|1|30v1
21v1-->|input|31v1
12v1--x|single|31v1; linkStyle 31 stroke:red
31v1-->32v1
34v1--x|0|33v1; linkStyle 33 stroke:red
32v1-->34v1
35v1-->|1|33v1
26v1-->35v1
36v1-->37v1
33v1--x36v1; linkStyle 38 stroke:red
37v1--x38v1; linkStyle 39 stroke:red
30v1-->|input|39v1
38v1--x|single|39v1; linkStyle 41 stroke:red
40v1-->41v1
41v1--x42v1; linkStyle 43 stroke:red
42v1-->43v1
43v1--x44v1; linkStyle 45 stroke:red
44v1-->45v1
45v1-->46v1
43v1-->|input|47v1
46v1--x|single|47v1; linkStyle 49 stroke:red
47v1-->48v1
48v1-->49v1
49v1--x50v1; linkStyle 52 stroke:red
2v1
16v1
17v1
24v1
25v1
35v1
34v1
subgraph var_reduce_keyed_watermark_chain_304 ["var <tt>reduce_keyed_watermark_chain_304</tt>"]
    style var_reduce_keyed_watermark_chain_304 fill:transparent
    33v1
end
subgraph var_stream_2 ["var <tt>stream_2</tt>"]
    style var_stream_2 fill:transparent
    1v1
end
subgraph var_stream_256 ["var <tt>stream_256</tt>"]
    style var_stream_256 fill:transparent
    18v1
    19v1
end
subgraph var_stream_257 ["var <tt>stream_257</tt>"]
    style var_stream_257 fill:transparent
    20v1
end
subgraph var_stream_258 ["var <tt>stream_258</tt>"]
    style var_stream_258 fill:transparent
    21v1
end
subgraph var_stream_260 ["var <tt>stream_260</tt>"]
    style var_stream_260 fill:transparent
    22v1
end
subgraph var_stream_261 ["var <tt>stream_261</tt>"]
    style var_stream_261 fill:transparent
    23v1
end
subgraph var_stream_294 ["var <tt>stream_294</tt>"]
    style var_stream_294 fill:transparent
    26v1
end
subgraph var_stream_295 ["var <tt>stream_295</tt>"]
    style var_stream_295 fill:transparent
    27v1
end
subgraph var_stream_296 ["var <tt>stream_296</tt>"]
    style var_stream_296 fill:transparent
    28v1
end
subgraph var_stream_297 ["var <tt>stream_297</tt>"]
    style var_stream_297 fill:transparent
    29v1
end
subgraph var_stream_298 ["var <tt>stream_298</tt>"]
    style var_stream_298 fill:transparent
    30v1
end
subgraph var_stream_301 ["var <tt>stream_301</tt>"]
    style var_stream_301 fill:transparent
    31v1
end
subgraph var_stream_302 ["var <tt>stream_302</tt>"]
    style var_stream_302 fill:transparent
    32v1
end
subgraph var_stream_304 ["var <tt>stream_304</tt>"]
    style var_stream_304 fill:transparent
    36v1
    37v1
end
subgraph var_stream_305 ["var <tt>stream_305</tt>"]
    style var_stream_305 fill:transparent
    38v1
end
subgraph var_stream_306 ["var <tt>stream_306</tt>"]
    style var_stream_306 fill:transparent
    39v1
end
subgraph var_stream_372 ["var <tt>stream_372</tt>"]
    style var_stream_372 fill:transparent
    40v1
    41v1
end
subgraph var_stream_373 ["var <tt>stream_373</tt>"]
    style var_stream_373 fill:transparent
    42v1
end
subgraph var_stream_374 ["var <tt>stream_374</tt>"]
    style var_stream_374 fill:transparent
    43v1
end
subgraph var_stream_376 ["var <tt>stream_376</tt>"]
    style var_stream_376 fill:transparent
    44v1
end
subgraph var_stream_377 ["var <tt>stream_377</tt>"]
    style var_stream_377 fill:transparent
    45v1
end
subgraph var_stream_378 ["var <tt>stream_378</tt>"]
    style var_stream_378 fill:transparent
    46v1
end
subgraph var_stream_379 ["var <tt>stream_379</tt>"]
    style var_stream_379 fill:transparent
    47v1
end
subgraph var_stream_380 ["var <tt>stream_380</tt>"]
    style var_stream_380 fill:transparent
    48v1
end
subgraph var_stream_381 ["var <tt>stream_381</tt>"]
    style var_stream_381 fill:transparent
    49v1
end
subgraph var_stream_382 ["var <tt>stream_382</tt>"]
    style var_stream_382 fill:transparent
    50v1
end
subgraph var_stream_74 ["var <tt>stream_74</tt>"]
    style var_stream_74 fill:transparent
    3v1
    4v1
end
subgraph var_stream_75 ["var <tt>stream_75</tt>"]
    style var_stream_75 fill:transparent
    5v1
end
subgraph var_stream_76 ["var <tt>stream_76</tt>"]
    style var_stream_76 fill:transparent
    6v1
end
subgraph var_stream_78 ["var <tt>stream_78</tt>"]
    style var_stream_78 fill:transparent
    7v1
end
subgraph var_stream_79 ["var <tt>stream_79</tt>"]
    style var_stream_79 fill:transparent
    8v1
end
subgraph var_stream_80 ["var <tt>stream_80</tt>"]
    style var_stream_80 fill:transparent
    9v1
end
subgraph var_stream_81 ["var <tt>stream_81</tt>"]
    style var_stream_81 fill:transparent
    10v1
end
subgraph var_stream_82 ["var <tt>stream_82</tt>"]
    style var_stream_82 fill:transparent
    11v1
end
subgraph var_stream_83 ["var <tt>stream_83</tt>"]
    style var_stream_83 fill:transparent
    12v1
end
subgraph var_stream_84 ["var <tt>stream_84</tt>"]
    style var_stream_84 fill:transparent
    13v1
end
subgraph var_stream_86 ["var <tt>stream_86</tt>"]
    style var_stream_86 fill:transparent
    14v1
end
subgraph var_stream_87 ["var <tt>stream_87</tt>"]
    style var_stream_87 fill:transparent
    15v1
end

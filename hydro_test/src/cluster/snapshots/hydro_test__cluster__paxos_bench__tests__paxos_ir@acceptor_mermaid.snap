---
source: hydro_test/src/cluster/paxos_bench.rs
expression: "preview.dfir_for(&acceptors).to_mermaid(&WriteConfig\n{\n    no_subgraphs: true, no_pull_push: true, no_handoffs: true,\n    op_text_no_imports: true, ..WriteConfig::default()\n})"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1["<div style=text-align:center>(1v1)</div> <code><br>source_iter({<br>    [&quot;Acceptors say hello&quot;]<br>})</code>"]:::otherClass
2v1["<div style=text-align:center>(2v1)</div> <code><br>for_each({<br>    |s| println!(&quot;{}&quot;, s)<br>})</code>"]:::otherClass
3v1["<div style=text-align:center>(3v1)</div> <code><br>source_stream(DUMMY_SOURCE)</code>"]:::otherClass
4v1["<div style=text-align:center>(4v1)</div> <code><br>map(|res| {<br>    let (id, b) = res.unwrap();<br>    (<br>        hydro_lang::ClusterId::&lt;<br>            hydro_test::__staged::cluster::paxos::Proposer,<br>        &gt;::from_raw(id),<br>        hydro_lang::runtime_support::bincode::deserialize::&lt;<br>            hydro_test::__staged::cluster::paxos::Ballot,<br>        &gt;(&amp;b)<br>            .unwrap(),<br>    )<br>})</code>"]:::otherClass
5v1["<div style=text-align:center>(5v1)</div> <code><br>map({<br>    |(_, b)| b<br>})</code>"]:::otherClass
6v1["<div style=text-align:center>(6v1)</div> <code><br>tee()</code>"]:::otherClass
7v1["<div style=text-align:center>(7v1)</div> <code><br>inspect({<br>    |p1a| println!(&quot;Acceptor received P1a: {:?}&quot;, p1a)<br>})</code>"]:::otherClass
8v1["<div style=text-align:center>(8v1)</div> <code><br>reduce::&lt;<br>    'static,<br>&gt;({<br>    |curr, new| {<br>        if new &gt; *curr {<br>            *curr = new;<br>        }<br>    }<br>})</code>"]:::otherClass
9v1["<div style=text-align:center>(9v1)</div> <code><br>source_iter({<br>    let e__free = {<br>        Ballot {<br>            num: 0,<br>            proposer_id: ClusterId::from_raw(0),<br>        }<br>    };<br>    [e__free]<br>})</code>"]:::otherClass
10v1["<div style=text-align:center>(10v1)</div> <code><br>persist::&lt;'static&gt;()</code>"]:::otherClass
11v1["<div style=text-align:center>(11v1)</div> <code><br>chain()</code>"]:::otherClass
12v1["<div style=text-align:center>(12v1)</div> <code><br>tee()</code>"]:::otherClass
13v1["<div style=text-align:center>(13v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
14v1["<div style=text-align:center>(14v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
15v1["<div style=text-align:center>(15v1)</div> <code><br>map({<br>    |((ballot, max_ballot), log)| (<br>        ballot.proposer_id,<br>        (ballot, if ballot == max_ballot { Ok(log) } else { Err(max_ballot) }),<br>    )<br>})</code>"]:::otherClass
16v1["<div style=text-align:center>(16v1)</div> <code><br>map(|(id, data)| {<br>    (<br>        id.raw_id,<br>        hydro_lang::runtime_support::bincode::serialize(&amp;data).unwrap().into(),<br>    )<br>})</code>"]:::otherClass
17v1["<div style=text-align:center>(17v1)</div> <code><br>dest_sink(DUMMY_SINK)</code>"]:::otherClass
18v1["<div style=text-align:center>(18v1)</div> <code><br>source_stream(DUMMY_SOURCE)</code>"]:::otherClass
19v1["<div style=text-align:center>(19v1)</div> <code><br>map(|res| {<br>    let (id, b) = res.unwrap();<br>    (<br>        hydro_lang::ClusterId::&lt;<br>            hydro_test::__staged::cluster::paxos::Proposer,<br>        &gt;::from_raw(id),<br>        hydro_lang::runtime_support::bincode::deserialize::&lt;<br>            hydro_test::__staged::cluster::paxos::P2a&lt;<br>                hydro_test::__staged::cluster::kv_replica::KvPayload&lt;<br>                    u32,<br>                    (<br>                        hydro_test::__staged::__deps::hydro_lang::location::cluster::cluster_id::ClusterId&lt;<br>                            hydro_test::__staged::cluster::paxos_bench::Client,<br>                        &gt;,<br>                        u32,<br>                    ),<br>                &gt;,<br>                hydro_test::__staged::cluster::paxos::Proposer,<br>            &gt;,<br>        &gt;(&amp;b)<br>            .unwrap(),<br>    )<br>})</code>"]:::otherClass
20v1["<div style=text-align:center>(20v1)</div> <code><br>map({<br>    |(_, b)| b<br>})</code>"]:::otherClass
21v1["<div style=text-align:center>(21v1)</div> <code><br>tee()</code>"]:::otherClass
22v1["<div style=text-align:center>(22v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
23v1["<div style=text-align:center>(23v1)</div> <code><br>map({<br>    |(p2a, max_ballot)| (<br>        p2a.sender,<br>        (<br>            (p2a.slot, p2a.ballot),<br>            if p2a.ballot == max_ballot { Ok(()) } else { Err(max_ballot) },<br>        ),<br>    )<br>})</code>"]:::otherClass
24v1["<div style=text-align:center>(24v1)</div> <code><br>map(|(id, data)| {<br>    (<br>        id.raw_id,<br>        hydro_lang::runtime_support::bincode::serialize(&amp;data).unwrap().into(),<br>    )<br>})</code>"]:::otherClass
25v1["<div style=text-align:center>(25v1)</div> <code><br>dest_sink(DUMMY_SINK)</code>"]:::otherClass
26v1["<div style=text-align:center>(26v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
27v1["<div style=text-align:center>(27v1)</div> <code><br>filter_map({<br>    |(p2a, max_ballot)| {<br>        if p2a.ballot &gt;= max_ballot { Some(CheckpointOrP2a::P2a(p2a)) } else { None }<br>    }<br>})</code>"]:::otherClass
28v1["<div style=text-align:center>(28v1)</div> <code><br>multiset_delta()</code>"]:::otherClass
29v1["<div style=text-align:center>(29v1)</div> <code><br>map({<br>    |min_seq| CheckpointOrP2a::Checkpoint(min_seq)<br>})</code>"]:::otherClass
30v1["<div style=text-align:center>(30v1)</div> <code><br>chain()</code>"]:::otherClass
31v1["<div style=text-align:center>(31v1)</div> <code><br>fold::&lt;<br>    'static,<br>&gt;(<br>    {<br>        || (None, HashMap::new())<br>    },<br>    {<br>        |(prev_checkpoint, log), checkpoint_or_p2a| {<br>            match checkpoint_or_p2a {<br>                CheckpointOrP2a::Checkpoint(new_checkpoint) =&gt; {<br>                    if prev_checkpoint<br>                        .map(|prev| new_checkpoint &gt; prev)<br>                        .unwrap_or(true)<br>                    {<br>                        for slot in (prev_checkpoint.unwrap_or(0))..new_checkpoint {<br>                            log.remove(&amp;slot);<br>                        }<br>                        *prev_checkpoint = Some(new_checkpoint);<br>                    }<br>                }<br>                CheckpointOrP2a::P2a(p2a) =&gt; {<br>                    if prev_checkpoint.map(|prev| p2a.slot &gt; prev).unwrap_or(true)<br>                        &amp;&amp; log<br>                            .get(&amp;p2a.slot)<br>                            .map(|prev_p2a: &amp;LogValue&lt;_&gt;| p2a.ballot &gt; prev_p2a.ballot)<br>                            .unwrap_or(true)<br>                    {<br>                        log.insert(<br>                            p2a.slot,<br>                            LogValue {<br>                                ballot: p2a.ballot,<br>                                value: p2a.value,<br>                            },<br>                        );<br>                    }<br>                }<br>            }<br>        }<br>    },<br>)</code>"]:::otherClass
32v1["<div style=text-align:center>(32v1)</div> <code><br>source_stream(DUMMY_SOURCE)</code>"]:::otherClass
33v1["<div style=text-align:center>(33v1)</div> <code><br>map(|res| {<br>    let (id, b) = res.unwrap();<br>    (<br>        hydro_lang::ClusterId::&lt;<br>            hydro_test::__staged::cluster::kv_replica::Replica,<br>        &gt;::from_raw(id),<br>        hydro_lang::runtime_support::bincode::deserialize::&lt;usize&gt;(&amp;b).unwrap(),<br>    )<br>})</code>"]:::otherClass
34v1["<div style=text-align:center>(34v1)</div> <code><br>reduce_keyed::&lt;<br>    'static,<br>&gt;({<br>    |curr_seq, seq| {<br>        if seq &gt; *curr_seq {<br>            *curr_seq = seq;<br>        }<br>    }<br>})</code>"]:::otherClass
35v1["<div style=text-align:center>(35v1)</div> <code><br>tee()</code>"]:::otherClass
36v1["<div style=text-align:center>(36v1)</div> <code><br>fold::&lt;<br>    'tick,<br>&gt;(<br>    {<br>        || 0usize<br>    },<br>    {<br>        |count, _| *count += 1<br>    },<br>)</code>"]:::otherClass
37v1["<div style=text-align:center>(37v1)</div> <code><br>filter_map({<br>    let f__free = 1usize;<br>    move |num_received| if num_received == f__free + 1 { Some(true) } else { None }<br>})</code>"]:::otherClass
38v1["<div style=text-align:center>(38v1)</div> <code><br>map({<br>    |_u| ()<br>})</code>"]:::otherClass
39v1["<div style=text-align:center>(39v1)</div> <code><br>cross_singleton()</code>"]:::otherClass
40v1["<div style=text-align:center>(40v1)</div> <code><br>map({<br>    |(d, _signal)| d<br>})</code>"]:::otherClass
41v1["<div style=text-align:center>(41v1)</div> <code><br>map({<br>    |(_sender, seq)| seq<br>})</code>"]:::otherClass
42v1["<div style=text-align:center>(42v1)</div> <code><br>reduce::&lt;<br>    'tick,<br>&gt;({<br>    |curr, new| {<br>        if new &lt; *curr {<br>            *curr = new;<br>        }<br>    }<br>})</code>"]:::otherClass
1v1-->2v1
3v1-->4v1
4v1-->5v1
5v1-->6v1
6v1-->7v1
7v1--x8v1; linkStyle 5 stroke:red
9v1-->10v1
8v1--x|0|11v1; linkStyle 7 stroke:red
10v1-->|1|11v1
11v1-->12v1
6v1-->|input|13v1
12v1--x|single|13v1; linkStyle 11 stroke:red
13v1-->|input|14v1
31v1--x|single|14v1; linkStyle 13 stroke:red
14v1-->15v1
16v1-->17v1
15v1-->16v1
18v1-->19v1
19v1-->20v1
20v1-->21v1
21v1-->|input|22v1
12v1--x|single|22v1; linkStyle 21 stroke:red
22v1-->23v1
24v1-->25v1
23v1-->24v1
21v1-->|input|26v1
12v1--x|single|26v1; linkStyle 26 stroke:red
26v1-->27v1
42v1-->28v1
28v1-->29v1
27v1--x|0|30v1; linkStyle 30 stroke:red
29v1-->|1|30v1
30v1--x31v1; linkStyle 32 stroke:red
32v1-->33v1
33v1--x34v1; linkStyle 34 stroke:red
34v1-->35v1
35v1--x36v1; linkStyle 36 stroke:red
36v1-->37v1
37v1-->38v1
35v1-->|input|39v1
38v1--x|single|39v1; linkStyle 40 stroke:red
39v1-->40v1
40v1-->41v1
41v1--x42v1; linkStyle 43 stroke:red
2v1
16v1
17v1
24v1
25v1
subgraph var_stream_2 ["var <tt>stream_2</tt>"]
    style var_stream_2 fill:transparent
    1v1
end
subgraph var_stream_237 ["var <tt>stream_237</tt>"]
    style var_stream_237 fill:transparent
    18v1
    19v1
end
subgraph var_stream_238 ["var <tt>stream_238</tt>"]
    style var_stream_238 fill:transparent
    20v1
end
subgraph var_stream_239 ["var <tt>stream_239</tt>"]
    style var_stream_239 fill:transparent
    21v1
end
subgraph var_stream_241 ["var <tt>stream_241</tt>"]
    style var_stream_241 fill:transparent
    22v1
end
subgraph var_stream_242 ["var <tt>stream_242</tt>"]
    style var_stream_242 fill:transparent
    23v1
end
subgraph var_stream_275 ["var <tt>stream_275</tt>"]
    style var_stream_275 fill:transparent
    26v1
end
subgraph var_stream_276 ["var <tt>stream_276</tt>"]
    style var_stream_276 fill:transparent
    27v1
end
subgraph var_stream_278 ["var <tt>stream_278</tt>"]
    style var_stream_278 fill:transparent
    28v1
end
subgraph var_stream_279 ["var <tt>stream_279</tt>"]
    style var_stream_279 fill:transparent
    29v1
end
subgraph var_stream_280 ["var <tt>stream_280</tt>"]
    style var_stream_280 fill:transparent
    30v1
end
subgraph var_stream_281 ["var <tt>stream_281</tt>"]
    style var_stream_281 fill:transparent
    31v1
end
subgraph var_stream_339 ["var <tt>stream_339</tt>"]
    style var_stream_339 fill:transparent
    32v1
    33v1
end
subgraph var_stream_340 ["var <tt>stream_340</tt>"]
    style var_stream_340 fill:transparent
    34v1
end
subgraph var_stream_341 ["var <tt>stream_341</tt>"]
    style var_stream_341 fill:transparent
    35v1
end
subgraph var_stream_343 ["var <tt>stream_343</tt>"]
    style var_stream_343 fill:transparent
    36v1
end
subgraph var_stream_344 ["var <tt>stream_344</tt>"]
    style var_stream_344 fill:transparent
    37v1
end
subgraph var_stream_345 ["var <tt>stream_345</tt>"]
    style var_stream_345 fill:transparent
    38v1
end
subgraph var_stream_346 ["var <tt>stream_346</tt>"]
    style var_stream_346 fill:transparent
    39v1
end
subgraph var_stream_347 ["var <tt>stream_347</tt>"]
    style var_stream_347 fill:transparent
    40v1
end
subgraph var_stream_348 ["var <tt>stream_348</tt>"]
    style var_stream_348 fill:transparent
    41v1
end
subgraph var_stream_349 ["var <tt>stream_349</tt>"]
    style var_stream_349 fill:transparent
    42v1
end
subgraph var_stream_66 ["var <tt>stream_66</tt>"]
    style var_stream_66 fill:transparent
    3v1
    4v1
end
subgraph var_stream_67 ["var <tt>stream_67</tt>"]
    style var_stream_67 fill:transparent
    5v1
end
subgraph var_stream_68 ["var <tt>stream_68</tt>"]
    style var_stream_68 fill:transparent
    6v1
end
subgraph var_stream_70 ["var <tt>stream_70</tt>"]
    style var_stream_70 fill:transparent
    7v1
end
subgraph var_stream_71 ["var <tt>stream_71</tt>"]
    style var_stream_71 fill:transparent
    8v1
end
subgraph var_stream_72 ["var <tt>stream_72</tt>"]
    style var_stream_72 fill:transparent
    9v1
end
subgraph var_stream_73 ["var <tt>stream_73</tt>"]
    style var_stream_73 fill:transparent
    10v1
end
subgraph var_stream_74 ["var <tt>stream_74</tt>"]
    style var_stream_74 fill:transparent
    11v1
end
subgraph var_stream_75 ["var <tt>stream_75</tt>"]
    style var_stream_75 fill:transparent
    12v1
end
subgraph var_stream_76 ["var <tt>stream_76</tt>"]
    style var_stream_76 fill:transparent
    13v1
end
subgraph var_stream_78 ["var <tt>stream_78</tt>"]
    style var_stream_78 fill:transparent
    14v1
end
subgraph var_stream_79 ["var <tt>stream_79</tt>"]
    style var_stream_79 fill:transparent
    15v1
end

---
source: hydro_test/src/cluster/simple_cluster.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)) , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , d) | println ! ("node received: ({}, {:?})" , id , d) }),
        input: Unpersist {
            inner: Network {
                serialize_fn: Some(
                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: location :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) > (& b) . unwrap ()) },
                ),
                input: Persist {
                    inner: Inspect {
                        f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: location :: MemberId :: < () > :: from_raw (__hydro_lang_cluster_self_id_1) ; move | n | println ! ("cluster received: {:?} (self cluster id: {})" , n , CLUSTER_SELF_ID__free) }),
                        input: Unpersist {
                            inner: Network {
                                serialize_fn: Some(
                                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: MemberId < _ > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                                ),
                                instantiate_fn: <network instantiate>,
                                deserialize_fn: Some(
                                    | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) > (& res . unwrap ()) . unwrap () },
                                ),
                                input: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)) > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , n) | (id , (id , n)) }),
                                    input: CrossProduct {
                                        left: FilterMap {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent) , core :: option :: Option < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > > > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; | (i , e) | match e { MembershipEvent :: Joined => Some (i) , MembershipEvent :: Left => None , } }),
                                            input: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < & hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; | id | (* id , MembershipEvent :: Joined) }),
                                                input: Persist {
                                                    inner: Source {
                                                        source: Iter(
                                                            { use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; let underlying_memberids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: location :: MemberId < () >] > (__hydro_lang_cluster_ids_1) } ; underlying_memberids__free },
                                                        ),
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Process(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                & hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () >,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Process(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            & hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () >,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Process(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Process(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () >,
                                                ),
                                            },
                                        },
                                        right: Persist {
                                            inner: Source {
                                                source: Iter(
                                                    { use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; 0 .. 5 },
                                                ),
                                                metadata: HydroIrMetadata {
                                                    location_kind: Process(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        i32,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Process(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    i32,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Process(
                                                0,
                                            ),
                                            output_type: Some(
                                                (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Process(
                                            0,
                                        ),
                                        output_type: Some(
                                            (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        1,
                                    ),
                                    output_type: Some(
                                        (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    1,
                                ),
                                output_type: Some(
                                    (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                1,
                            ),
                            output_type: Some(
                                (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            1,
                        ),
                        output_type: Some(
                            (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        0,
                    ),
                    output_type: Some(
                        (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    0,
                ),
                output_type: Some(
                    (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)),
                ),
            },
        },
        op_metadata: HydroIrOpMetadata,
    },
]

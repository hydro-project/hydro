---
source: hydro_test/src/cluster/simple_cluster.rs
expression: ir.surface_syntax_string()
---
1v1 = source_stream ({ use hydro_lang :: __staged :: deploy_runtime :: * ; let c2_port__free = "port_0" ; let env__free = FAKE ; { env__free . port (c2_port__free) . connect_local_blocking :: < ConnectedDirect > () . into_source () } });
2v1 = map (| res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) > (& res . unwrap ()) . unwrap () });
3v1 = _counter ("10" , stageleft :: runtime_support :: type_hint :: < core :: time :: Duration > ({ use crate :: __staged :: cluster :: simple_cluster :: tests :: * ; std :: time :: Duration :: from_secs (1) }));
4v1 = inspect (stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) , () > ({ use crate :: __staged :: cluster :: simple_cluster :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < () > :: from_raw (__hydro_lang_cluster_self_id_1) ; move | n | println ! ("cluster received: {:?} (self cluster id: {})" , n , CLUSTER_SELF_ID__free) }));
5v1 = map (:: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < () > , i32) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }));
6v1 = dest_sink ({ use hydro_lang :: __staged :: deploy_runtime :: * ; let c1_port__free = "port_1" ; let env__free = FAKE ; { env__free . port (c1_port__free) . connect_local_blocking :: < ConnectedDirect > () . into_sink () } });

1v1 -> 2v1;
2v1 -> 3v1;
3v1 -> 4v1;
5v1 -> 6v1;
4v1 -> 5v1;

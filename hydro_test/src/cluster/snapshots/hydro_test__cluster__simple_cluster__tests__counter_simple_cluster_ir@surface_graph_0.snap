---
source: hydro_test/src/cluster/simple_cluster.rs
expression: ir.surface_syntax_string()
---
1v1 = source_iter (unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: MemberId < () >] > (__hydro_lang_cluster_ids_1) });
2v1 = _counter ("0" , stageleft :: runtime_support :: type_hint :: < core :: time :: Duration > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: tests :: * ; std :: time :: Duration :: from_secs (1) }));
3v1 = map (stageleft :: runtime_support :: fn1_type_hint :: < & hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; | & id | id }));
4v1 = source_iter ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; 0 .. 5 });
5v1 = _counter ("3" , stageleft :: runtime_support :: type_hint :: < core :: time :: Duration > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: tests :: * ; std :: time :: Duration :: from_secs (1) }));
6v1 = cross_join_multiset :: < 'static , 'static > ();
7v1 = _counter ("5" , stageleft :: runtime_support :: type_hint :: < core :: time :: Duration > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: tests :: * ; std :: time :: Duration :: from_secs (1) }));
8v1 = multiset_delta ();
9v1 = _counter ("7" , stageleft :: runtime_support :: type_hint :: < core :: time :: Duration > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: tests :: * ; std :: time :: Duration :: from_secs (1) }));
10v1 = map (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , i32) , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , i32)) > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , n) | (id , (id , n)) }));
11v1 = map (:: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: MemberId < _ > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , i32)) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }));
12v1 = dest_sink (DUMMY_SINK);
13v1 = source_stream (DUMMY_SOURCE);
14v1 = map (| res | { let (id , b) = res . unwrap () ; (hydro_lang :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , i32) > (& b) . unwrap ()) });
15v1 = _counter ("13" , stageleft :: runtime_support :: type_hint :: < core :: time :: Duration > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: tests :: * ; std :: time :: Duration :: from_secs (1) }));
16v1 = for_each (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: cluster :: cluster_id :: MemberId < () > , i32)) , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: simple_cluster :: * ; | (id , d) | println ! ("node received: ({}, {:?})" , id , d) }));

1v1 -> 2v1;
2v1 -> 3v1;
4v1 -> 5v1;
3v1 -> 6v1;
5v1 -> 6v1;
6v1 -> 7v1;
7v1 -> 8v1;
8v1 -> 9v1;
9v1 -> 10v1;
11v1 -> 12v1;
10v1 -> 11v1;
13v1 -> 14v1;
14v1 -> 15v1;
15v1 -> 16v1;

---
source: hydro_test/src/cluster/compartmentalized_paxos_bench.rs
expression: built.ir()
snapshot_kind: text
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < & str , () > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | s | println ! ("{}" , s) }),
        input: Source {
            source: Iter(
                { use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; ["Proposers say hello"] },
            ),
            location_kind: Cluster(
                0,
            ),
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    & str,
                ),
            },
        },
    },
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < & str , () > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | s | println ! ("{}" , s) }),
        input: Source {
            source: Iter(
                { use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; ["Proxy leaders say hello"] },
            ),
            location_kind: Cluster(
                1,
            ),
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    1,
                ),
                output_type: Some(
                    & str,
                ),
            },
        },
    },
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < & str , () > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | s | println ! ("{}" , s) }),
        input: Source {
            source: Iter(
                { use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; ["Acceptors say hello"] },
            ),
            location_kind: Cluster(
                2,
            ),
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    2,
                ),
                output_type: Some(
                    & str,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_4,
        },
        location_kind: Tick(
            1,
            Cluster(
                0,
            ),
        ),
        input: DeferTick {
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , u32) , u32 > ({ use crate :: __staged :: cluster :: paxos :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (__hydro_lang_cluster_self_id_0) ; move | (received_max_ballot , ballot_num) | { if received_max_ballot > (Ballot { num : ballot_num , proposer_id : CLUSTER_SELF_ID__free , }) { received_max_ballot . num + 1 } else { ballot_num } } }),
                input: CrossSingleton {
                    left: Tee {
                        inner: <tee 0>: Chain {
                            first: Reduce {
                                f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new > * curr { * curr = new ; } } }),
                                input: Persist {
                                    inner: Chain {
                                        first: Chain {
                                            first: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_1,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                    ),
                                                },
                                            },
                                            second: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_0,
                                                },
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                ),
                                            },
                                        },
                                        second: CycleSource {
                                            ident: Ident {
                                                sym: cycle_2,
                                            },
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                hydro_test :: cluster :: paxos :: Ballot,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            hydro_test :: cluster :: paxos :: Ballot,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: paxos :: Ballot,
                                    ),
                                },
                            },
                            second: Persist {
                                inner: Source {
                                    source: Iter(
                                        { use hydro_lang :: __staged :: location :: * ; let e__free = { use crate :: __staged :: cluster :: paxos :: * ; Ballot { num : 0 , proposer_id : ClusterId :: from_raw (0) } } ; [e__free] },
                                    ),
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            hydro_test :: cluster :: paxos :: Ballot,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: paxos :: Ballot,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    hydro_test :: cluster :: paxos :: Ballot,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                hydro_test :: cluster :: paxos :: Ballot,
                            ),
                        },
                    },
                    right: Tee {
                        inner: <tee 1>: Chain {
                            first: CycleSource {
                                ident: Ident {
                                    sym: cycle_4,
                                },
                                location_kind: Tick(
                                    1,
                                    Cluster(
                                        0,
                                    ),
                                ),
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        u32,
                                    ),
                                },
                            },
                            second: Persist {
                                inner: Source {
                                    source: Iter(
                                        { use hydro_lang :: __staged :: location :: * ; let e__free = { use crate :: __staged :: cluster :: paxos :: * ; 0 } ; [e__free] },
                                    ),
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            u32,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        u32,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    u32,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                u32,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            0,
                        ),
                        output_type: Some(
                            (hydro_test :: cluster :: paxos :: Ballot , u32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        0,
                    ),
                    output_type: Some(
                        u32,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    u32,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_2,
        },
        location_kind: Cluster(
            0,
        ),
        input: Tee {
            inner: <tee 2>: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                input: Network {
                    from_location: Cluster(
                        0,
                    ),
                    from_key: None,
                    to_location: Cluster(
                        0,
                    ),
                    to_key: None,
                    serialize_fn: Some(
                        | (id , data) : (hydro_lang :: ClusterId < _ > , hydro_test :: cluster :: paxos :: Ballot) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < hydro_test :: cluster :: paxos :: Ballot > (& data) . unwrap () . into ()) },
                    ),
                    instantiate_fn: <network instantiate>,
                    deserialize_fn: Some(
                        | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: cluster :: paxos :: Ballot > (& b) . unwrap ()) },
                    ),
                    input: FlatMap {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , std :: iter :: Map < std :: slice :: Iter < hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > > , _ > > ({ use hydro_lang :: __staged :: stream :: * ; let ids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < hydro_test :: cluster :: paxos :: Proposer >] > (__hydro_lang_cluster_ids_0) } ; | b | ids__free . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) }),
                        input: Map {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , ()) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: optional :: * ; | (d , _signal) | d }),
                            input: CrossSingleton {
                                left: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , ()) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: singleton :: * ; | (d , _signal) | d }),
                                    input: CrossSingleton {
                                        left: Tee {
                                            inner: <tee 3>: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < u32 , hydro_test :: cluster :: paxos :: Ballot > ({ use crate :: __staged :: cluster :: paxos :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (__hydro_lang_cluster_self_id_0) ; move | num | Ballot { num , proposer_id : CLUSTER_SELF_ID__free } }),
                                                input: Tee {
                                                    inner: <tee 1>,
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            u32,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                ),
                                            },
                                        },
                                        right: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < () , () > ({ use hydro_lang :: __staged :: singleton :: * ; | _u | () }),
                                            input: Tee {
                                                inner: <tee 4>: CycleSource {
                                                    ident: Ident {
                                                        sym: cycle_3,
                                                    },
                                                    location_kind: Tick(
                                                        1,
                                                        Cluster(
                                                            0,
                                                        ),
                                                    ),
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            (),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        (),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    (),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                (hydro_test :: cluster :: paxos :: Ballot , ()),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            hydro_test :: cluster :: paxos :: Ballot,
                                        ),
                                    },
                                },
                                right: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < tokio :: time :: Instant , () > ({ use hydro_lang :: __staged :: optional :: * ; | _u | () }),
                                    input: Source {
                                        source: Stream(
                                            { use hydro_lang :: __staged :: location :: * ; let interval__free = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_send_timeout__free = 1u64 ; Duration :: from_secs (i_am_leader_send_timeout__free) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval (interval__free)) },
                                        ),
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                tokio :: time :: Instant,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            (),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        (hydro_test :: cluster :: paxos :: Ballot , ()),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    hydro_test :: cluster :: paxos :: Ballot,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            0,
                        ),
                        output_type: Some(
                            hydro_test :: cluster :: paxos :: Ballot,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        0,
                    ),
                    output_type: Some(
                        hydro_test :: cluster :: paxos :: Ballot,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    hydro_test :: cluster :: paxos :: Ballot,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_5,
        },
        location_kind: Tick(
            1,
            Cluster(
                0,
            ),
        ),
        input: DeferTick {
            input: AntiJoin {
                pos: Tee {
                    inner: <tee 5>: Chain {
                        first: CycleSource {
                            ident: Ident {
                                sym: cycle_5,
                            },
                            location_kind: Tick(
                                1,
                                Cluster(
                                    0,
                                ),
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                ),
                            },
                        },
                        second: Tee {
                            inner: <tee 6>: Inspect {
                                f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >) , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | p1b | println ! ("Proposer received P1b: {:?}" , p1b) }),
                                input: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > , (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >)) , (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >) > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                    input: Network {
                                        from_location: Cluster(
                                            2,
                                        ),
                                        from_key: None,
                                        to_location: Cluster(
                                            0,
                                        ),
                                        to_key: None,
                                        serialize_fn: Some(
                                            | (id , data) : (hydro_lang :: ClusterId < _ > , (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >)) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >) > (& data) . unwrap () . into ()) },
                                        ),
                                        instantiate_fn: <network instantiate>,
                                        deserialize_fn: Some(
                                            | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Acceptor > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >) > (& b) . unwrap ()) },
                                        ),
                                        input: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < ((hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >)) > ({ use crate :: __staged :: cluster :: paxos :: * ; | ((ballot , max_ballot) , log) | (ballot . proposer_id , (ballot , if ballot == max_ballot { Ok (log) } else { Err (max_ballot) })) }),
                                            input: CrossSingleton {
                                                left: CrossSingleton {
                                                    left: Tee {
                                                        inner: <tee 7>: Map {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                                            input: Network {
                                                                from_location: Cluster(
                                                                    0,
                                                                ),
                                                                from_key: None,
                                                                to_location: Cluster(
                                                                    2,
                                                                ),
                                                                to_key: None,
                                                                serialize_fn: Some(
                                                                    | (id , data) : (hydro_lang :: ClusterId < _ > , hydro_test :: cluster :: paxos :: Ballot) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < hydro_test :: cluster :: paxos :: Ballot > (& data) . unwrap () . into ()) },
                                                                ),
                                                                instantiate_fn: <network instantiate>,
                                                                deserialize_fn: Some(
                                                                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: cluster :: paxos :: Ballot > (& b) . unwrap ()) },
                                                                ),
                                                                input: FlatMap {
                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , std :: iter :: Map < std :: slice :: Iter < hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > > , _ > > ({ use hydro_lang :: __staged :: stream :: * ; let ids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor >] > (__hydro_lang_cluster_ids_2) } ; | b | ids__free . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) }),
                                                                    input: Inspect {
                                                                        f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | _ | println ! ("Proposer leader expired, sending P1a") }),
                                                                        input: Map {
                                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , ()) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: singleton :: * ; | (d , _signal) | d }),
                                                                            input: CrossSingleton {
                                                                                left: Tee {
                                                                                    inner: <tee 3>,
                                                                                    metadata: HydroIrMetadata {
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                        output_type: Some(
                                                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                right: Map {
                                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < () , () > ({ use hydro_lang :: __staged :: singleton :: * ; | _u | () }),
                                                                                    input: Map {
                                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (() , ()) , () > ({ use hydro_lang :: __staged :: optional :: * ; | (d , _signal) | d }),
                                                                                        input: CrossSingleton {
                                                                                            left: Map {
                                                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < (() , ()) , () > ({ use hydro_lang :: __staged :: optional :: * ; | (d , _signal) | d }),
                                                                                                input: CrossSingleton {
                                                                                                    left: FilterMap {
                                                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < core :: option :: Option < tokio :: time :: Instant > , core :: option :: Option < () > > ({ use hydro_lang :: __staged :: stream :: * ; let duration__free = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout__free = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout__free) } ; move | latest_received | { if let Some (latest_received) = latest_received { if Instant :: now () . duration_since (latest_received) > duration__free { Some (()) } else { None } } else { Some (()) } } }),
                                                                                                        input: Fold {
                                                                                                            init: stageleft :: runtime_support :: fn0_type_hint :: < core :: option :: Option < tokio :: time :: Instant > > ({ use hydro_lang :: __staged :: stream :: * ; | | None }),
                                                                                                            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < core :: option :: Option < tokio :: time :: Instant > , hydro_test :: cluster :: paxos :: Ballot , () > ({ use hydro_lang :: __staged :: stream :: * ; | latest , _ | { * latest = Some (Instant :: now ()) ; } }),
                                                                                                            input: Persist {
                                                                                                                inner: Tee {
                                                                                                                    inner: <tee 2>,
                                                                                                                    metadata: HydroIrMetadata {
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                        output_type: Some(
                                                                                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                                metadata: HydroIrMetadata {
                                                                                                                    location_kind: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                    output_type: Some(
                                                                                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    core :: option :: Option < tokio :: time :: Instant >,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                (),
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    right: Map {
                                                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < usize , () > ({ use hydro_lang :: __staged :: optional :: * ; | _u | () }),
                                                                                                        input: Filter {
                                                                                                            f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < usize , bool > ({ use hydro_lang :: __staged :: optional :: * ; | c | * c == 0 }),
                                                                                                            input: Fold {
                                                                                                                init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                                                                                                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , () , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                                                                                                                input: Tee {
                                                                                                                    inner: <tee 4>,
                                                                                                                    metadata: HydroIrMetadata {
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                        output_type: Some(
                                                                                                                            (),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                                metadata: HydroIrMetadata {
                                                                                                                    location_kind: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                    output_type: Some(
                                                                                                                        usize,
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    usize,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                (),
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            (() , ()),
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        (),
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            right: Map {
                                                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < tokio :: time :: Instant , () > ({ use hydro_lang :: __staged :: optional :: * ; | _u | () }),
                                                                                                input: Source {
                                                                                                    source: Stream(
                                                                                                        { use hydro_lang :: __staged :: location :: * ; let delay__free = { use crate :: __staged :: cluster :: paxos :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (__hydro_lang_cluster_self_id_0) ; let i_am_leader_check_timeout_delay_multiplier__free = 1usize ; Duration :: from_secs ((CLUSTER_SELF_ID__free . raw_id * i_am_leader_check_timeout_delay_multiplier__free as u32) . into ()) } ; let interval__free = { use crate :: __staged :: cluster :: paxos :: * ; let i_am_leader_check_timeout__free = 1u64 ; Duration :: from_secs (i_am_leader_check_timeout__free) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval_at (tokio :: time :: Instant :: now () + delay__free , interval__free)) },
                                                                                                    ),
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            tokio :: time :: Instant,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        (),
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            metadata: HydroIrMetadata {
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                output_type: Some(
                                                                                                    (() , ()),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                (),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    metadata: HydroIrMetadata {
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                        output_type: Some(
                                                                                            (),
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                metadata: HydroIrMetadata {
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    output_type: Some(
                                                                                        (hydro_test :: cluster :: paxos :: Ballot , ()),
                                                                                    ),
                                                                                },
                                                                            },
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                                output_type: Some(
                                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                                ),
                                                                            },
                                                                        },
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                            output_type: Some(
                                                                                hydro_test :: cluster :: paxos :: Ballot,
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                        output_type: Some(
                                                                            (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > , hydro_test :: cluster :: paxos :: Ballot),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        2,
                                                                    ),
                                                                    output_type: Some(
                                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    2,
                                                                ),
                                                                output_type: Some(
                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                2,
                                                            ),
                                                            output_type: Some(
                                                                hydro_test :: cluster :: paxos :: Ballot,
                                                            ),
                                                        },
                                                    },
                                                    right: Tee {
                                                        inner: <tee 8>: Chain {
                                                            first: Reduce {
                                                                f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new > * curr { * curr = new ; } } }),
                                                                input: Persist {
                                                                    inner: Inspect {
                                                                        f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | p1a | println ! ("Acceptor received P1a: {:?}" , p1a) }),
                                                                        input: Tee {
                                                                            inner: <tee 7>,
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Cluster(
                                                                                    2,
                                                                                ),
                                                                                output_type: Some(
                                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                                ),
                                                                            },
                                                                        },
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                2,
                                                                            ),
                                                                            output_type: Some(
                                                                                hydro_test :: cluster :: paxos :: Ballot,
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            2,
                                                                        ),
                                                                        output_type: Some(
                                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        2,
                                                                    ),
                                                                    output_type: Some(
                                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                                    ),
                                                                },
                                                            },
                                                            second: Persist {
                                                                inner: Source {
                                                                    source: Iter(
                                                                        { use hydro_lang :: __staged :: location :: * ; let e__free = { use crate :: __staged :: cluster :: paxos :: * ; Ballot { num : 0 , proposer_id : ClusterId :: from_raw (0) } } ; [e__free] },
                                                                    ),
                                                                    location_kind: Cluster(
                                                                        2,
                                                                    ),
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            2,
                                                                        ),
                                                                        output_type: Some(
                                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        2,
                                                                    ),
                                                                    output_type: Some(
                                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    2,
                                                                ),
                                                                output_type: Some(
                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                2,
                                                            ),
                                                            output_type: Some(
                                                                hydro_test :: cluster :: paxos :: Ballot,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            2,
                                                        ),
                                                        output_type: Some(
                                                            (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot),
                                                        ),
                                                    },
                                                },
                                                right: CycleSource {
                                                    ident: Ident {
                                                        sym: cycle_0,
                                                    },
                                                    location_kind: Tick(
                                                        3,
                                                        Cluster(
                                                            2,
                                                        ),
                                                    ),
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            2,
                                                        ),
                                                        output_type: Some(
                                                            (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        2,
                                                    ),
                                                    output_type: Some(
                                                        ((hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                                output_type: Some(
                                                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >)),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Tick(
                                    1,
                                    Cluster(
                                        0,
                                    ),
                                ),
                                output_type: Some(
                                    (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            0,
                        ),
                        output_type: Some(
                            (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                        ),
                    },
                },
                neg: FilterMap {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , (usize , usize)) , core :: option :: Option < hydro_test :: cluster :: paxos :: Ballot > > ({ use hydro_std :: __staged :: quorum :: * ; let min__free = 1usize ; move | (key , (success , _error)) | if success >= min__free { Some (key) } else { None } }),
                    input: Tee {
                        inner: <tee 9>: FoldKeyed {
                            init: stageleft :: runtime_support :: fn0_type_hint :: < (usize , usize) > ({ use hydro_std :: __staged :: quorum :: * ; move | | (0 , 0) }),
                            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (usize , usize) , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot > , () > ({ use hydro_std :: __staged :: quorum :: * ; move | accum , value | { if value . is_ok () { accum . 0 += 1 ; } else { accum . 1 += 1 ; } } }),
                            input: Tee {
                                inner: <tee 5>,
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    (hydro_test :: cluster :: paxos :: Ballot , (usize , usize)),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                (hydro_test :: cluster :: paxos :: Ballot , (usize , usize)),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            0,
                        ),
                        output_type: Some(
                            hydro_test :: cluster :: paxos :: Ballot,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        0,
                    ),
                    output_type: Some(
                        (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_3,
        },
        location_kind: Tick(
            1,
            Cluster(
                0,
            ),
        ),
        input: Tee {
            inner: <tee 10>: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (() , ()) , () > ({ use hydro_lang :: __staged :: optional :: * ; | (d , _signal) | d }),
                input: CrossSingleton {
                    left: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | _ | () }),
                        input: Tee {
                            inner: <tee 11>: FilterMap {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < ((hydro_test :: cluster :: paxos :: Ballot , std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >) , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > > > ({ use crate :: __staged :: cluster :: paxos :: * ; move | ((quorum_ballot , quorum_accepted) , my_ballot) | if quorum_ballot == my_ballot { Some (quorum_accepted) } else { None } }),
                                input: CrossSingleton {
                                    left: Reduce {
                                        f: { let key_fn = stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >) , hydro_test :: cluster :: paxos :: Ballot > ({ use crate :: __staged :: cluster :: paxos :: * ; | t | t . 0 }) ; move | curr , new | { if key_fn (& new) > key_fn (& * curr) { * curr = new ; } } },
                                        input: FoldKeyed {
                                            init: stageleft :: runtime_support :: fn0_type_hint :: < std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > > ({ use crate :: __staged :: cluster :: paxos :: * ; | | vec ! [] }),
                                            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > , (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | logs , log | { logs . push (log) ; } }),
                                            input: Persist {
                                                inner: FilterMap {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >) , core :: option :: Option < (hydro_test :: cluster :: paxos :: Ballot , (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)) > > ({ use hydro_std :: __staged :: quorum :: * ; move | (key , res) | match res { Ok (v) => Some ((key , v)) , Err (_) => None , } }),
                                                    input: AntiJoin {
                                                        pos: Tee {
                                                            inner: <tee 5>,
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                                                ),
                                                            },
                                                        },
                                                        neg: FilterMap {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , (usize , usize)) , core :: option :: Option < hydro_test :: cluster :: paxos :: Ballot > > ({ use hydro_std :: __staged :: quorum :: * ; let min__free = 1usize ; move | (key , (success , _error)) | if success < min__free { Some (key) } else { None } }),
                                                            input: Tee {
                                                                inner: <tee 9>,
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                    output_type: Some(
                                                                        (hydro_test :: cluster :: paxos :: Ballot , (usize , usize)),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            (hydro_test :: cluster :: paxos :: Ballot , (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        (hydro_test :: cluster :: paxos :: Ballot , (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    (hydro_test :: cluster :: paxos :: Ballot , std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                (hydro_test :: cluster :: paxos :: Ballot , std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >),
                                            ),
                                        },
                                    },
                                    right: Tee {
                                        inner: <tee 3>,
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                hydro_test :: cluster :: paxos :: Ballot,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            ((hydro_test :: cluster :: paxos :: Ballot , std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >) , hydro_test :: cluster :: paxos :: Ballot),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                (),
                            ),
                        },
                    },
                    right: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < () , () > ({ use hydro_lang :: __staged :: optional :: * ; | _u | () }),
                        input: Tee {
                            inner: <tee 12>: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot) , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | _ | () }),
                                input: Filter {
                                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot) , bool > ({ use crate :: __staged :: cluster :: paxos :: * ; | (received_max_ballot , cur_ballot) | * received_max_ballot <= * cur_ballot }),
                                    input: CrossSingleton {
                                        left: Tee {
                                            inner: <tee 0>,
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                ),
                                            },
                                        },
                                        right: Tee {
                                            inner: <tee 3>,
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        (),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    (),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                (),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            0,
                        ),
                        output_type: Some(
                            (() , ()),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        0,
                    ),
                    output_type: Some(
                        (),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    (),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Cluster(
            0,
        ),
        input: Map {
            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot > ({ use crate :: __staged :: cluster :: paxos :: * ; | (_ , ballot) | ballot }),
            input: FilterMap {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >) , core :: option :: Option < (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot) > > ({ use hydro_std :: __staged :: quorum :: * ; move | (key , res) | match res { Ok (_) => None , Err (e) => Some ((key , e)) , } }),
                input: Tee {
                    inner: <tee 6>,
                    metadata: HydroIrMetadata {
                        location_kind: Tick(
                            1,
                            Cluster(
                                0,
                            ),
                        ),
                        output_type: Some(
                            (hydro_test :: cluster :: paxos :: Ballot , core :: result :: Result < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: Ballot >),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Tick(
                        1,
                        Cluster(
                            0,
                        ),
                    ),
                    output_type: Some(
                        (hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Tick(
                    1,
                    Cluster(
                        0,
                    ),
                ),
                output_type: Some(
                    hydro_test :: cluster :: paxos :: Ballot,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Tick(
            8,
            Cluster(
                3,
            ),
        ),
        input: DeferTick {
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , ()) , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use hydro_lang :: __staged :: stream :: * ; | (d , _signal) | d }),
                input: CrossSingleton {
                    left: Tee {
                        inner: <tee 13>: Chain {
                            first: CycleSource {
                                ident: Ident {
                                    sym: cycle_1,
                                },
                                location_kind: Tick(
                                    8,
                                    Cluster(
                                        3,
                                    ),
                                ),
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                    ),
                                },
                            },
                            second: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < (u32 , u32) , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use crate :: __staged :: cluster :: compartmentalized_paxos_bench :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < hydro_test :: cluster :: bench_client :: Client > :: from_raw (__hydro_lang_cluster_self_id_3) ; move | (key , value) | KvPayload { key , value : (CLUSTER_SELF_ID__free , value) } }),
                                input: CycleSource {
                                    ident: Ident {
                                        sym: cycle_0,
                                    },
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            (u32 , u32),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                            ),
                        },
                    },
                    right: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < usize , () > ({ use hydro_lang :: __staged :: stream :: * ; | _u | () }),
                        input: Filter {
                            f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < usize , bool > ({ use hydro_lang :: __staged :: stream :: * ; | c | * c == 0 }),
                            input: Fold {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                                input: Tee {
                                    inner: <tee 14>: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > > ({ use crate :: __staged :: cluster :: compartmentalized_paxos_with_client :: * ; | ballot : Ballot | ballot . proposer_id }),
                                        input: Reduce {
                                            f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , hydro_test :: cluster :: paxos :: Ballot , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new > * curr { * curr = new ; } } }),
                                            input: Persist {
                                                inner: Inspect {
                                                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , () > ({ use crate :: __staged :: cluster :: compartmentalized_paxos_with_client :: * ; | ballot | println ! ("Client notified that leader was elected: {:?}" , ballot) }),
                                                    input: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                                        input: Network {
                                                            from_location: Cluster(
                                                                0,
                                                            ),
                                                            from_key: None,
                                                            to_location: Cluster(
                                                                3,
                                                            ),
                                                            to_key: None,
                                                            serialize_fn: Some(
                                                                | (id , data) : (hydro_lang :: ClusterId < _ > , hydro_test :: cluster :: paxos :: Ballot) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < hydro_test :: cluster :: paxos :: Ballot > (& data) . unwrap () . into ()) },
                                                            ),
                                                            instantiate_fn: <network instantiate>,
                                                            deserialize_fn: Some(
                                                                | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: cluster :: paxos :: Ballot > (& b) . unwrap ()) },
                                                            ),
                                                            input: FlatMap {
                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: cluster :: paxos :: Ballot , std :: iter :: Map < std :: slice :: Iter < hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > > , _ > > ({ use hydro_lang :: __staged :: stream :: * ; let ids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < hydro_test :: cluster :: bench_client :: Client >] > (__hydro_lang_cluster_ids_3) } ; | b | ids__free . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) }),
                                                                input: Map {
                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: Ballot , ()) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: singleton :: * ; | (d , _signal) | d }),
                                                                    input: CrossSingleton {
                                                                        left: Tee {
                                                                            inner: <tee 3>,
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                                output_type: Some(
                                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                                ),
                                                                            },
                                                                        },
                                                                        right: Map {
                                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < () , () > ({ use hydro_lang :: __staged :: singleton :: * ; | _u | () }),
                                                                            input: Tee {
                                                                                inner: <tee 15>: Map {
                                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (() , ()) , () > ({ use hydro_lang :: __staged :: optional :: * ; | (d , _signal) | d }),
                                                                                    input: CrossSingleton {
                                                                                        left: Tee {
                                                                                            inner: <tee 10>,
                                                                                            metadata: HydroIrMetadata {
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                output_type: Some(
                                                                                                    (),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        right: Map {
                                                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < usize , () > ({ use hydro_lang :: __staged :: optional :: * ; | _u | () }),
                                                                                            input: Filter {
                                                                                                f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < usize , bool > ({ use hydro_lang :: __staged :: optional :: * ; | c | * c == 0 }),
                                                                                                input: Fold {
                                                                                                    init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                                                                                                    acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , () , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                                                                                                    input: DeferTick {
                                                                                                        input: Tee {
                                                                                                            inner: <tee 10>,
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    (),
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                (),
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            usize,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        usize,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            metadata: HydroIrMetadata {
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                output_type: Some(
                                                                                                    (),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                (() , ()),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    metadata: HydroIrMetadata {
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                        output_type: Some(
                                                                                            (),
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                metadata: HydroIrMetadata {
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    output_type: Some(
                                                                                        (),
                                                                                    ),
                                                                                },
                                                                            },
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                                output_type: Some(
                                                                                    (),
                                                                                ),
                                                                            },
                                                                        },
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                            output_type: Some(
                                                                                (hydro_test :: cluster :: paxos :: Ballot , ()),
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                        output_type: Some(
                                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                    output_type: Some(
                                                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , hydro_test :: cluster :: paxos :: Ballot),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    3,
                                                                ),
                                                                output_type: Some(
                                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                3,
                                                            ),
                                                            output_type: Some(
                                                                hydro_test :: cluster :: paxos :: Ballot,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        3,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: paxos :: Ballot,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                3,
                                            ),
                                            output_type: Some(
                                                hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer >,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer >,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        usize,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    usize,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , ()),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    3,
                ),
                output_type: Some(
                    hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_6,
        },
        location_kind: Tick(
            1,
            Cluster(
                0,
            ),
        ),
        input: DeferTick {
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , usize) , usize > ({ use crate :: __staged :: cluster :: paxos :: * ; | (num_payloads , base_slot) | base_slot + num_payloads }),
                input: CrossSingleton {
                    left: Tee {
                        inner: <tee 16>: Fold {
                            init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , (usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                            input: Tee {
                                inner: <tee 17>: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) , usize) , (usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) > ({ use crate :: __staged :: cluster :: paxos :: * ; | ((index , payload) , base_slot) | (base_slot + index , payload) }),
                                    input: CrossSingleton {
                                        left: Enumerate {
                                            is_static: false,
                                            input: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , ()) , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use hydro_lang :: __staged :: stream :: * ; | (d , _signal) | d }),
                                                input: CrossSingleton {
                                                    left: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                                        input: Network {
                                                            from_location: Cluster(
                                                                3,
                                                            ),
                                                            from_key: None,
                                                            to_location: Cluster(
                                                                0,
                                                            ),
                                                            to_key: None,
                                                            serialize_fn: Some(
                                                                | (id , data) : (hydro_lang :: ClusterId < _ > , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > (& data) . unwrap () . into ()) },
                                                            ),
                                                            instantiate_fn: <network instantiate>,
                                                            deserialize_fn: Some(
                                                                | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: bench_client :: Client > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > (& b) . unwrap ()) },
                                                            ),
                                                            input: Map {
                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer >) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos_with_client :: * ; move | (payload , leader_id) | (leader_id , payload) }),
                                                                input: CrossSingleton {
                                                                    left: Tee {
                                                                        inner: <tee 13>,
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                3,
                                                                            ),
                                                                            output_type: Some(
                                                                                hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                                            ),
                                                                        },
                                                                    },
                                                                    right: Tee {
                                                                        inner: <tee 14>,
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                3,
                                                                            ),
                                                                            output_type: Some(
                                                                                hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer >,
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            3,
                                                                        ),
                                                                        output_type: Some(
                                                                            (hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer >),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        3,
                                                                    ),
                                                                    output_type: Some(
                                                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                            ),
                                                        },
                                                    },
                                                    right: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < () , () > ({ use hydro_lang :: __staged :: stream :: * ; | _u | () }),
                                                        input: Tee {
                                                            inner: <tee 10>,
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    (),
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                (),
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            (hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , ()),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    (usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >),
                                                ),
                                            },
                                        },
                                        right: Tee {
                                            inner: <tee 18>: Chain {
                                                first: Map {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < usize , usize > ({ use crate :: __staged :: cluster :: paxos :: * ; | max_slot | max_slot + 1 }),
                                                    input: Tee {
                                                        inner: <tee 19>: Reduce {
                                                            f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , usize , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new > * curr { * curr = new ; } } }),
                                                            input: Map {
                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , usize > ({ use crate :: __staged :: cluster :: paxos :: * ; | (slot , _) | slot }),
                                                                input: Tee {
                                                                    inner: <tee 20>: Map {
                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , (usize , core :: option :: Option < hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)) , (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) > ({ use crate :: __staged :: cluster :: paxos :: * ; | (slot , (count , entry)) | (slot , (count , entry . unwrap ())) }),
                                                                        input: FoldKeyed {
                                                                            init: stageleft :: runtime_support :: fn0_type_hint :: < (usize , core :: option :: Option < hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > ({ use crate :: __staged :: cluster :: paxos :: * ; | | (0 , None) }),
                                                                            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (usize , core :: option :: Option < hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | curr_entry , new_entry | { if let Some (curr_entry_payload) = & mut curr_entry . 1 { let same_values = new_entry . value == curr_entry_payload . value ; let higher_ballot = new_entry . ballot > curr_entry_payload . ballot ; if same_values { curr_entry . 0 += 1 ; } if higher_ballot { curr_entry_payload . ballot = new_entry . ballot ; if ! same_values { curr_entry . 0 = 1 ; curr_entry_payload . value = new_entry . value ; } } } else { * curr_entry = (1 , Some (new_entry)) ; } } }),
                                                                            input: FlatMap {
                                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > > > ({ use hydro_lang :: __staged :: stream :: * ; | d | d }),
                                                                                input: Map {
                                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > > > ({ use crate :: __staged :: cluster :: paxos :: * ; | (_checkpoint , log) | log }),
                                                                                    input: Tee {
                                                                                        inner: <tee 21>: FlatMap {
                                                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > , std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > > ({ use hydro_lang :: __staged :: optional :: * ; | v | v }),
                                                                                            input: Tee {
                                                                                                inner: <tee 11>,
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        std :: vec :: Vec < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) >,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            metadata: HydroIrMetadata {
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                output_type: Some(
                                                                                                    (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    metadata: HydroIrMetadata {
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                        output_type: Some(
                                                                                            std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >,
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                metadata: HydroIrMetadata {
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    output_type: Some(
                                                                                        (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                                    ),
                                                                                },
                                                                            },
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                                output_type: Some(
                                                                                    (usize , (usize , core :: option :: Option < hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >)),
                                                                                ),
                                                                            },
                                                                        },
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                0,
                                                                            ),
                                                                            output_type: Some(
                                                                                (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                        output_type: Some(
                                                                            (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                    output_type: Some(
                                                                        usize,
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    usize,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                usize,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            usize,
                                                        ),
                                                    },
                                                },
                                                second: Chain {
                                                    first: CycleSource {
                                                        ident: Ident {
                                                            sym: cycle_6,
                                                        },
                                                        location_kind: Tick(
                                                            1,
                                                            Cluster(
                                                                0,
                                                            ),
                                                        ),
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                usize,
                                                            ),
                                                        },
                                                    },
                                                    second: Persist {
                                                        inner: Source {
                                                            source: Iter(
                                                                { use hydro_lang :: __staged :: location :: * ; let e__free = { use crate :: __staged :: cluster :: paxos :: * ; 0 } ; [e__free] },
                                                            ),
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    usize,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                usize,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            usize,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        usize,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    0,
                                                ),
                                                output_type: Some(
                                                    usize,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                ((usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) , usize),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            (usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        0,
                                    ),
                                    output_type: Some(
                                        (usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    0,
                                ),
                                output_type: Some(
                                    usize,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                usize,
                            ),
                        },
                    },
                    right: Tee {
                        inner: <tee 18>,
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                0,
                            ),
                            output_type: Some(
                                usize,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            0,
                        ),
                        output_type: Some(
                            (usize , usize),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        0,
                    ),
                    output_type: Some(
                        usize,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    usize,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Tick(
            2,
            Cluster(
                1,
            ),
        ),
        input: DeferTick {
            input: AntiJoin {
                pos: Tee {
                    inner: <tee 22>: Chain {
                        first: CycleSource {
                            ident: Ident {
                                sym: cycle_0,
                            },
                            location_kind: Tick(
                                2,
                                Cluster(
                                    1,
                                ),
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    1,
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                                ),
                            },
                        },
                        second: Tee {
                            inner: <tee 23>: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >)) , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >) > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                input: Network {
                                    from_location: Cluster(
                                        2,
                                    ),
                                    from_key: None,
                                    to_location: Cluster(
                                        1,
                                    ),
                                    to_key: None,
                                    serialize_fn: Some(
                                        | (id , data) : (hydro_lang :: ClusterId < _ > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >)) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >) > (& data) . unwrap () . into ()) },
                                    ),
                                    instantiate_fn: <network instantiate>,
                                    deserialize_fn: Some(
                                        | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Acceptor > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >) > (& b) . unwrap ()) },
                                    ),
                                    input: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , hydro_test :: cluster :: paxos :: Ballot) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >)) > ({ use crate :: __staged :: cluster :: paxos :: * ; | (p2a , max_ballot) | (p2a . sender , ((p2a . slot , p2a . ballot) , if p2a . ballot == max_ballot { Ok (()) } else { Err (max_ballot) })) }),
                                        input: CrossSingleton {
                                            left: Tee {
                                                inner: <tee 24>: Map {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >) , hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                                    input: Network {
                                                        from_location: Cluster(
                                                            1,
                                                        ),
                                                        from_key: None,
                                                        to_location: Cluster(
                                                            2,
                                                        ),
                                                        to_key: None,
                                                        serialize_fn: Some(
                                                            | (id , data) : (hydro_lang :: ClusterId < _ > , hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > > (& data) . unwrap () . into ()) },
                                                        ),
                                                        instantiate_fn: <network instantiate>,
                                                        deserialize_fn: Some(
                                                            | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > > (& b) . unwrap ()) },
                                                        ),
                                                        input: FlatMap {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) , std :: vec :: Vec < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > , hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >) > > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; let num_acceptor_cols__free = 1usize ; let num_acceptor_rows__free = 1usize ; let num_proxy_leaders__free = 1usize ; move | ((slot , ballot) , payload) | { let row = slot % num_acceptor_rows__free ; let mut p2as = Vec :: new () ; for i in 0 .. num_acceptor_cols__free { p2as . push ((ClusterId :: < Acceptor > :: from_raw ((row * num_acceptor_cols__free + i) as u32) , P2a { sender : ClusterId :: < ProxyLeader > :: from_raw ((slot % num_proxy_leaders__free) as u32 ,) , slot , ballot , value : payload . clone () , } ,)) ; } p2as } }),
                                                            input: Tee {
                                                                inner: <tee 25>: Map {
                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                                                    input: Network {
                                                                        from_location: Cluster(
                                                                            0,
                                                                        ),
                                                                        from_key: None,
                                                                        to_location: Cluster(
                                                                            1,
                                                                        ),
                                                                        to_key: None,
                                                                        serialize_fn: Some(
                                                                            | (id , data) : (hydro_lang :: ClusterId < _ > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > (& data) . unwrap () . into ()) },
                                                                        ),
                                                                        instantiate_fn: <network instantiate>,
                                                                        deserialize_fn: Some(
                                                                            | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: paxos :: Proposer > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > (& b) . unwrap ()) },
                                                                        ),
                                                                        input: Chain {
                                                                            first: Map {
                                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) , hydro_test :: cluster :: paxos :: Ballot) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; let num_proxy_leaders__free = 1usize ; move | ((slot , payload) , ballot) | (ClusterId :: < ProxyLeader > :: from_raw ((slot % num_proxy_leaders__free) as u32) , ((slot , ballot) , Some (payload))) }),
                                                                                input: CrossSingleton {
                                                                                    left: Tee {
                                                                                        inner: <tee 17>,
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                (usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    right: Tee {
                                                                                        inner: <tee 3>,
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                hydro_test :: cluster :: paxos :: Ballot,
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    metadata: HydroIrMetadata {
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                        output_type: Some(
                                                                                            ((usize , hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >) , hydro_test :: cluster :: paxos :: Ballot),
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                metadata: HydroIrMetadata {
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    output_type: Some(
                                                                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                                    ),
                                                                                },
                                                                            },
                                                                            second: Map {
                                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; let num_proxy_leaders__free = 1usize ; move | ((slot , ballot) , payload) | (ClusterId :: < ProxyLeader > :: from_raw ((slot % num_proxy_leaders__free) as u32) , ((slot , ballot) , payload)) }),
                                                                                input: Chain {
                                                                                    first: FilterMap {
                                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (((usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < usize >) , core :: option :: Option < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > > ({ use crate :: __staged :: cluster :: paxos :: * ; let f__free = 1usize ; move | (((slot , (count , entry)) , ballot) , checkpoint) | { if count > f__free { return None ; } else if let Some (checkpoint) = checkpoint { if slot <= checkpoint { return None ; } } Some (((slot , ballot) , entry . value)) } }),
                                                                                        input: CrossSingleton {
                                                                                            left: CrossSingleton {
                                                                                                left: Tee {
                                                                                                    inner: <tee 20>,
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                right: Tee {
                                                                                                    inner: <tee 3>,
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            hydro_test :: cluster :: paxos :: Ballot,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        ((usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , hydro_test :: cluster :: paxos :: Ballot),
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            right: Tee {
                                                                                                inner: <tee 26>: Chain {
                                                                                                    first: Map {
                                                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < usize , core :: option :: Option < usize > > ({ use hydro_lang :: __staged :: optional :: * ; | v | Some (v) }),
                                                                                                        input: Reduce {
                                                                                                            f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , usize , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new > * curr { * curr = new ; } } }),
                                                                                                            input: FilterMap {
                                                                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , core :: option :: Option < usize > > ({ use crate :: __staged :: cluster :: paxos :: * ; | (checkpoint , _log) | checkpoint }),
                                                                                                                input: Tee {
                                                                                                                    inner: <tee 21>,
                                                                                                                    metadata: HydroIrMetadata {
                                                                                                                        location_kind: Cluster(
                                                                                                                            0,
                                                                                                                        ),
                                                                                                                        output_type: Some(
                                                                                                                            (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                },
                                                                                                                metadata: HydroIrMetadata {
                                                                                                                    location_kind: Cluster(
                                                                                                                        0,
                                                                                                                    ),
                                                                                                                    output_type: Some(
                                                                                                                        usize,
                                                                                                                    ),
                                                                                                                },
                                                                                                            },
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    usize,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                core :: option :: Option < usize >,
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    second: Persist {
                                                                                                        inner: Source {
                                                                                                            source: Iter(
                                                                                                                [:: std :: option :: Option :: None],
                                                                                                            ),
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    core :: option :: Option < usize >,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                core :: option :: Option < usize >,
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            core :: option :: Option < usize >,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        core :: option :: Option < usize >,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            metadata: HydroIrMetadata {
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                output_type: Some(
                                                                                                    (((usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < usize >),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    second: Map {
                                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , hydro_test :: cluster :: paxos :: Ballot) , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > ({ use crate :: __staged :: cluster :: paxos :: * ; move | (slot , ballot) | ((slot , ballot) , None) }),
                                                                                        input: CrossSingleton {
                                                                                            left: Difference {
                                                                                                pos: FlatMap {
                                                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , core :: option :: Option < usize >) , std :: ops :: Range < usize > > ({ use crate :: __staged :: cluster :: paxos :: * ; | (max_slot , checkpoint) | { if let Some (checkpoint) = checkpoint { (checkpoint + 1) .. max_slot } else { 0 .. max_slot } } }),
                                                                                                    input: CrossSingleton {
                                                                                                        left: Tee {
                                                                                                            inner: <tee 19>,
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    usize,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        right: Tee {
                                                                                                            inner: <tee 26>,
                                                                                                            metadata: HydroIrMetadata {
                                                                                                                location_kind: Cluster(
                                                                                                                    0,
                                                                                                                ),
                                                                                                                output_type: Some(
                                                                                                                    core :: option :: Option < usize >,
                                                                                                                ),
                                                                                                            },
                                                                                                        },
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                (usize , core :: option :: Option < usize >),
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            usize,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                neg: Map {
                                                                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , usize > ({ use crate :: __staged :: cluster :: paxos :: * ; | (slot , _) | slot }),
                                                                                                    input: Tee {
                                                                                                        inner: <tee 20>,
                                                                                                        metadata: HydroIrMetadata {
                                                                                                            location_kind: Cluster(
                                                                                                                0,
                                                                                                            ),
                                                                                                            output_type: Some(
                                                                                                                (usize , (usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                                                            ),
                                                                                                        },
                                                                                                    },
                                                                                                    metadata: HydroIrMetadata {
                                                                                                        location_kind: Cluster(
                                                                                                            0,
                                                                                                        ),
                                                                                                        output_type: Some(
                                                                                                            usize,
                                                                                                        ),
                                                                                                    },
                                                                                                },
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        usize,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            right: Tee {
                                                                                                inner: <tee 3>,
                                                                                                metadata: HydroIrMetadata {
                                                                                                    location_kind: Cluster(
                                                                                                        0,
                                                                                                    ),
                                                                                                    output_type: Some(
                                                                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                                                                    ),
                                                                                                },
                                                                                            },
                                                                                            metadata: HydroIrMetadata {
                                                                                                location_kind: Cluster(
                                                                                                    0,
                                                                                                ),
                                                                                                output_type: Some(
                                                                                                    (usize , hydro_test :: cluster :: paxos :: Ballot),
                                                                                                ),
                                                                                            },
                                                                                        },
                                                                                        metadata: HydroIrMetadata {
                                                                                            location_kind: Cluster(
                                                                                                0,
                                                                                            ),
                                                                                            output_type: Some(
                                                                                                ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                                            ),
                                                                                        },
                                                                                    },
                                                                                    metadata: HydroIrMetadata {
                                                                                        location_kind: Cluster(
                                                                                            0,
                                                                                        ),
                                                                                        output_type: Some(
                                                                                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                metadata: HydroIrMetadata {
                                                                                    location_kind: Cluster(
                                                                                        0,
                                                                                    ),
                                                                                    output_type: Some(
                                                                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                                    ),
                                                                                },
                                                                            },
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Cluster(
                                                                                    0,
                                                                                ),
                                                                                output_type: Some(
                                                                                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                                                ),
                                                                            },
                                                                        },
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Cluster(
                                                                                1,
                                                                            ),
                                                                            output_type: Some(
                                                                                ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            1,
                                                                        ),
                                                                        output_type: Some(
                                                                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        1,
                                                                    ),
                                                                    output_type: Some(
                                                                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    1,
                                                                ),
                                                                output_type: Some(
                                                                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > , hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >),
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                2,
                                                            ),
                                                            output_type: Some(
                                                                hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            2,
                                                        ),
                                                        output_type: Some(
                                                            hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        2,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                                                    ),
                                                },
                                            },
                                            right: Tee {
                                                inner: <tee 8>,
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        2,
                                                    ),
                                                    output_type: Some(
                                                        hydro_test :: cluster :: paxos :: Ballot,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                                output_type: Some(
                                                    (hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , hydro_test :: cluster :: paxos :: Ballot),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                2,
                                            ),
                                            output_type: Some(
                                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >)),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            1,
                                        ),
                                        output_type: Some(
                                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        1,
                                    ),
                                    output_type: Some(
                                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Tick(
                                    2,
                                    Cluster(
                                        1,
                                    ),
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                1,
                            ),
                            output_type: Some(
                                ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            1,
                        ),
                        output_type: Some(
                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                        ),
                    },
                },
                neg: Tee {
                    inner: <tee 27>: FilterMap {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , (usize , usize)) , core :: option :: Option < (usize , hydro_test :: cluster :: paxos :: Ballot) > > ({ use hydro_std :: __staged :: quorum :: * ; let min__free = 1usize ; move | (key , (success , _error)) | if success >= min__free { Some (key) } else { None } }),
                        input: Tee {
                            inner: <tee 28>: FoldKeyed {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < (usize , usize) > ({ use hydro_std :: __staged :: quorum :: * ; move | | (0 , 0) }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (usize , usize) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot > , () > ({ use hydro_std :: __staged :: quorum :: * ; move | accum , value | { if value . is_ok () { accum . 0 += 1 ; } else { accum . 1 += 1 ; } } }),
                                input: Tee {
                                    inner: <tee 22>,
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            1,
                                        ),
                                        output_type: Some(
                                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        1,
                                    ),
                                    output_type: Some(
                                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , (usize , usize)),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    1,
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , (usize , usize)),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                1,
                            ),
                            output_type: Some(
                                (usize , hydro_test :: cluster :: paxos :: Ballot),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            1,
                        ),
                        output_type: Some(
                            (usize , hydro_test :: cluster :: paxos :: Ballot),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        1,
                    ),
                    output_type: Some(
                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    1,
                ),
                output_type: Some(
                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Tick(
            2,
            Cluster(
                1,
            ),
        ),
        input: DeferTick {
            input: AntiJoin {
                pos: Tee {
                    inner: <tee 29>: Chain {
                        first: CycleSource {
                            ident: Ident {
                                sym: cycle_1,
                            },
                            location_kind: Tick(
                                2,
                                Cluster(
                                    1,
                                ),
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    1,
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                ),
                            },
                        },
                        second: Tee {
                            inner: <tee 25>,
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    1,
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                1,
                            ),
                            output_type: Some(
                                ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            1,
                        ),
                        output_type: Some(
                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                        ),
                    },
                },
                neg: Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , ()) , (usize , hydro_test :: cluster :: paxos :: Ballot) > ({ use hydro_std :: __staged :: request_response :: * ; | (key , _) | key }),
                    input: Tee {
                        inner: <tee 30>: Map {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , hydro_test :: cluster :: paxos :: Ballot) , ((usize , hydro_test :: cluster :: paxos :: Ballot) , ()) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | k | (k , ()) }),
                            input: Tee {
                                inner: <tee 27>,
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        1,
                                    ),
                                    output_type: Some(
                                        (usize , hydro_test :: cluster :: paxos :: Ballot),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Tick(
                                    2,
                                    Cluster(
                                        1,
                                    ),
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , ()),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                1,
                            ),
                            output_type: Some(
                                ((usize , hydro_test :: cluster :: paxos :: Ballot) , ()),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            1,
                        ),
                        output_type: Some(
                            (usize , hydro_test :: cluster :: paxos :: Ballot),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        1,
                    ),
                    output_type: Some(
                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    1,
                ),
                output_type: Some(
                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Tick(
            3,
            Cluster(
                2,
            ),
        ),
        input: Fold {
            init: stageleft :: runtime_support :: fn0_type_hint :: < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) > ({ use crate :: __staged :: cluster :: paxos :: * ; | | (None , HashMap :: new ()) }),
            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >) , hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | (prev_checkpoint , log) , checkpoint_or_p2a | { match checkpoint_or_p2a { CheckpointOrP2a :: Checkpoint (new_checkpoint) => { if prev_checkpoint . map (| prev | new_checkpoint > prev) . unwrap_or (true) { for slot in (prev_checkpoint . unwrap_or (0)) .. new_checkpoint { log . remove (& slot) ; } * prev_checkpoint = Some (new_checkpoint) ; } } CheckpointOrP2a :: P2a (p2a) => { if prev_checkpoint . map (| prev | p2a . slot > prev) . unwrap_or (true) && log . get (& p2a . slot) . map (| prev_p2a : & LogValue < _ > | p2a . ballot > prev_p2a . ballot) . unwrap_or (true) { log . insert (p2a . slot , LogValue { ballot : p2a . ballot , value : p2a . value , } ,) ; } } } } }),
            input: Persist {
                inner: Chain {
                    first: FilterMap {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > > > ({ use crate :: __staged :: cluster :: paxos :: * ; | (p2a , max_ballot) | if p2a . ballot >= max_ballot { Some (CheckpointOrP2a :: P2a (p2a)) } else { None } }),
                        input: CrossSingleton {
                            left: Tee {
                                inner: <tee 24>,
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        2,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                                    ),
                                },
                            },
                            right: Tee {
                                inner: <tee 8>,
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        2,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: paxos :: Ballot,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    2,
                                ),
                                output_type: Some(
                                    (hydro_test :: cluster :: paxos :: P2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , hydro_test :: cluster :: paxos :: Ballot),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                2,
                            ),
                            output_type: Some(
                                hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                            ),
                        },
                    },
                    second: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < usize , hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > > ({ use crate :: __staged :: cluster :: paxos :: * ; | min_seq | CheckpointOrP2a :: Checkpoint (min_seq) }),
                        input: Delta {
                            inner: Reduce {
                                f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , usize , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new < * curr { * curr = new ; } } }),
                                input: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize) , usize > ({ use crate :: __staged :: cluster :: paxos :: * ; | (_sender , seq) | seq }),
                                    input: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < ((hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize) , ()) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize) > ({ use hydro_lang :: __staged :: stream :: * ; | (d , _signal) | d }),
                                        input: CrossSingleton {
                                            left: Tee {
                                                inner: <tee 31>: ReduceKeyed {
                                                    f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , usize , () > ({ use crate :: __staged :: cluster :: paxos :: * ; | curr_seq , seq | { if seq > * curr_seq { * curr_seq = seq ; } } }),
                                                    input: Persist {
                                                        inner: Network {
                                                            from_location: Cluster(
                                                                4,
                                                            ),
                                                            from_key: None,
                                                            to_location: Cluster(
                                                                2,
                                                            ),
                                                            to_key: None,
                                                            serialize_fn: Some(
                                                                | (id , data) : (hydro_lang :: ClusterId < _ > , usize) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < usize > (& data) . unwrap () . into ()) },
                                                            ),
                                                            instantiate_fn: <network instantiate>,
                                                            deserialize_fn: Some(
                                                                | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: kv_replica :: Replica > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < usize > (& b) . unwrap ()) },
                                                            ),
                                                            input: FlatMap {
                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < usize , std :: iter :: Map < std :: slice :: Iter < hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > > , _ > > ({ use hydro_lang :: __staged :: stream :: * ; let ids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor >] > (__hydro_lang_cluster_ids_2) } ; | b | ids__free . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) }),
                                                                input: CycleSource {
                                                                    ident: Ident {
                                                                        sym: cycle_0,
                                                                    },
                                                                    location_kind: Cluster(
                                                                        4,
                                                                    ),
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            4,
                                                                        ),
                                                                        output_type: Some(
                                                                            usize,
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        4,
                                                                    ),
                                                                    output_type: Some(
                                                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Acceptor > , usize),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    2,
                                                                ),
                                                                output_type: Some(
                                                                    usize,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                2,
                                                            ),
                                                            output_type: Some(
                                                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize),
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            2,
                                                        ),
                                                        output_type: Some(
                                                            (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        2,
                                                    ),
                                                    output_type: Some(
                                                        (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize),
                                                    ),
                                                },
                                            },
                                            right: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < bool , () > ({ use hydro_lang :: __staged :: stream :: * ; | _u | () }),
                                                input: FilterMap {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < usize , core :: option :: Option < bool > > ({ use crate :: __staged :: cluster :: paxos :: * ; let f__free = 1usize ; move | num_received | if num_received == f__free + 1 { Some (true) } else { None } }),
                                                    input: Fold {
                                                        init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                                                        acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize) , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                                                        input: Tee {
                                                            inner: <tee 31>,
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    2,
                                                                ),
                                                                output_type: Some(
                                                                    (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize),
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                2,
                                                            ),
                                                            output_type: Some(
                                                                usize,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            2,
                                                        ),
                                                        output_type: Some(
                                                            bool,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        2,
                                                    ),
                                                    output_type: Some(
                                                        (),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                                output_type: Some(
                                                    ((hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize) , ()),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                2,
                                            ),
                                            output_type: Some(
                                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , usize),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            2,
                                        ),
                                        output_type: Some(
                                            usize,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        2,
                                    ),
                                    output_type: Some(
                                        usize,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    2,
                                ),
                                output_type: Some(
                                    usize,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                2,
                            ),
                            output_type: Some(
                                hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            2,
                        ),
                        output_type: Some(
                            hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        2,
                    ),
                    output_type: Some(
                        hydro_test :: cluster :: paxos :: CheckpointOrP2a < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader >,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Tick(
                    3,
                    Cluster(
                        2,
                    ),
                ),
                output_type: Some(
                    (core :: option :: Option < usize > , std :: collections :: hash_map :: HashMap < usize , hydro_test :: cluster :: paxos :: LogValue < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > >),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            0,
        ),
        input: Map {
            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
            input: Network {
                from_location: Cluster(
                    1,
                ),
                from_key: None,
                to_location: Cluster(
                    0,
                ),
                to_key: None,
                serialize_fn: Some(
                    | (id , data) : (hydro_lang :: ClusterId < _ > , hydro_test :: cluster :: paxos :: Ballot) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < hydro_test :: cluster :: paxos :: Ballot > (& data) . unwrap () . into ()) },
                ),
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: cluster :: paxos :: Ballot > (& b) . unwrap ()) },
                ),
                input: Inspect {
                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot) , () > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | (_ , ballot) | println ! ("Failed P2b: {:?}" , ballot) }),
                    input: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot) , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | (_ , ballot) | (ballot . proposer_id , ballot) }),
                        input: FilterMap {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >) , core :: option :: Option < ((usize , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot) > > ({ use hydro_std :: __staged :: quorum :: * ; move | (key , res) | match res { Ok (_) => None , Err (e) => Some ((key , e)) , } }),
                            input: Tee {
                                inner: <tee 23>,
                                metadata: HydroIrMetadata {
                                    location_kind: Tick(
                                        2,
                                        Cluster(
                                            1,
                                        ),
                                    ),
                                    output_type: Some(
                                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: result :: Result < () , hydro_test :: cluster :: paxos :: Ballot >),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Tick(
                                    2,
                                    Cluster(
                                        1,
                                    ),
                                ),
                                output_type: Some(
                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , hydro_test :: cluster :: paxos :: Ballot),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Tick(
                                2,
                                Cluster(
                                    1,
                                ),
                            ),
                            output_type: Some(
                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Tick(
                            2,
                            Cluster(
                                1,
                            ),
                        ),
                        output_type: Some(
                            (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: paxos :: Proposer > , hydro_test :: cluster :: paxos :: Ballot),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        0,
                    ),
                    output_type: Some(
                        hydro_test :: cluster :: paxos :: Ballot,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    0,
                ),
                output_type: Some(
                    hydro_test :: cluster :: paxos :: Ballot,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_1,
        },
        location_kind: Tick(
            9,
            Cluster(
                4,
            ),
        ),
        input: DeferTick {
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (sorted_payload , _) | { sorted_payload } }),
                input: Filter {
                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , bool > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (sorted_payload , highest_seq) | sorted_payload . seq > * highest_seq }),
                    input: CrossSingleton {
                        left: Tee {
                            inner: <tee 32>: Sort {
                                input: Chain {
                                    first: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) , hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (slot , kv) | SequencedKv { seq : slot , kv } }),
                                        input: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > , (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) , (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                            input: Network {
                                                from_location: Cluster(
                                                    1,
                                                ),
                                                from_key: None,
                                                to_location: Cluster(
                                                    4,
                                                ),
                                                to_key: None,
                                                serialize_fn: Some(
                                                    | (id , data) : (hydro_lang :: ClusterId < _ > , (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > (& data) . unwrap () . into ()) },
                                                ),
                                                instantiate_fn: <network instantiate>,
                                                deserialize_fn: Some(
                                                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: compartmentalized_paxos :: ProxyLeader > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > (& b) . unwrap ()) },
                                                ),
                                                input: FlatMap {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) , std :: iter :: Map < std :: slice :: Iter < hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > > , _ > > ({ use hydro_lang :: __staged :: stream :: * ; let ids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica >] > (__hydro_lang_cluster_ids_4) } ; | b | ids__free . iter () . map (move | id | (:: std :: clone :: Clone :: clone (id) , :: std :: clone :: Clone :: clone (& b))) }),
                                                    input: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > , ())) , (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos :: * ; | ((slot , _ballot) , (value , _)) | (slot , value) }),
                                                        input: Map {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > , ())) , ((usize , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > , ())) > ({ use hydro_std :: __staged :: request_response :: * ; | (key , (meta , resp)) | (key , (meta , resp)) }),
                                                            input: Join {
                                                                left: Tee {
                                                                    inner: <tee 29>,
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            1,
                                                                        ),
                                                                        output_type: Some(
                                                                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                                        ),
                                                                    },
                                                                },
                                                                right: Tee {
                                                                    inner: <tee 30>,
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            1,
                                                                        ),
                                                                        output_type: Some(
                                                                            ((usize , hydro_test :: cluster :: paxos :: Ballot) , ()),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        1,
                                                                    ),
                                                                    output_type: Some(
                                                                        ((usize , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > , ())),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    1,
                                                                ),
                                                                output_type: Some(
                                                                    ((usize , hydro_test :: cluster :: paxos :: Ballot) , (core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > , ())),
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Tick(
                                                                2,
                                                                Cluster(
                                                                    1,
                                                                ),
                                                            ),
                                                            output_type: Some(
                                                                (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            1,
                                                        ),
                                                        output_type: Some(
                                                            (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >)),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        4,
                                                    ),
                                                    output_type: Some(
                                                        (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    4,
                                                ),
                                                output_type: Some(
                                                    (usize , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > >),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                4,
                                            ),
                                            output_type: Some(
                                                hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                            ),
                                        },
                                    },
                                    second: CycleSource {
                                        ident: Ident {
                                            sym: cycle_1,
                                        },
                                        location_kind: Tick(
                                            9,
                                            Cluster(
                                                4,
                                            ),
                                        ),
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                4,
                                            ),
                                            output_type: Some(
                                                hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            4,
                                        ),
                                        output_type: Some(
                                            hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        4,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    4,
                                ),
                                output_type: Some(
                                    hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                ),
                            },
                        },
                        right: Tee {
                            inner: <tee 33>: Fold {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | | 0 }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , () > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | new_next_slot , (sorted_payload , next_slot) | { if sorted_payload . seq == std :: cmp :: max (* new_next_slot , next_slot) { * new_next_slot = sorted_payload . seq + 1 ; } } }),
                                input: CrossSingleton {
                                    left: Tee {
                                        inner: <tee 32>,
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                4,
                                            ),
                                            output_type: Some(
                                                hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                            ),
                                        },
                                    },
                                    right: Tee {
                                        inner: <tee 34>: Chain {
                                            first: CycleSource {
                                                ident: Ident {
                                                    sym: cycle_2,
                                                },
                                                location_kind: Tick(
                                                    9,
                                                    Cluster(
                                                        4,
                                                    ),
                                                ),
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        4,
                                                    ),
                                                    output_type: Some(
                                                        usize,
                                                    ),
                                                },
                                            },
                                            second: Persist {
                                                inner: Source {
                                                    source: Iter(
                                                        { use hydro_lang :: __staged :: location :: * ; let e__free = { use crate :: __staged :: cluster :: kv_replica :: * ; 0 } ; [e__free] },
                                                    ),
                                                    location_kind: Cluster(
                                                        4,
                                                    ),
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            4,
                                                        ),
                                                        output_type: Some(
                                                            usize,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        4,
                                                    ),
                                                    output_type: Some(
                                                        usize,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    4,
                                                ),
                                                output_type: Some(
                                                    usize,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                4,
                                            ),
                                            output_type: Some(
                                                usize,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            4,
                                        ),
                                        output_type: Some(
                                            (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        4,
                                    ),
                                    output_type: Some(
                                        usize,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    4,
                                ),
                                output_type: Some(
                                    usize,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                4,
                            ),
                            output_type: Some(
                                (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            4,
                        ),
                        output_type: Some(
                            (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        4,
                    ),
                    output_type: Some(
                        hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    4,
                ),
                output_type: Some(
                    hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_2,
        },
        location_kind: Tick(
            9,
            Cluster(
                4,
            ),
        ),
        input: DeferTick {
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: collections :: hash_map :: HashMap < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , usize > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (_kv_store , next_slot) | next_slot }),
                input: Fold {
                    init: stageleft :: runtime_support :: fn0_type_hint :: < (std :: collections :: hash_map :: HashMap < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | | (HashMap :: new () , 0) }),
                    acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (std :: collections :: hash_map :: HashMap < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , () > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (kv_store , next_slot) , payload | { if let Some (kv) = payload . kv { kv_store . insert (kv . key , kv . value) ; } * next_slot = payload . seq + 1 ; } }),
                    input: Persist {
                        inner: Tee {
                            inner: <tee 35>: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (sorted_payload , _) | { sorted_payload } }),
                                input: Filter {
                                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize) , bool > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | (sorted_payload , highest_seq) | sorted_payload . seq < * highest_seq }),
                                    input: CrossSingleton {
                                        left: Tee {
                                            inner: <tee 32>,
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    4,
                                                ),
                                                output_type: Some(
                                                    hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                ),
                                            },
                                        },
                                        right: Tee {
                                            inner: <tee 33>,
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    4,
                                                ),
                                                output_type: Some(
                                                    usize,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                4,
                                            ),
                                            output_type: Some(
                                                (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            4,
                                        ),
                                        output_type: Some(
                                            (hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        4,
                                    ),
                                    output_type: Some(
                                        hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    4,
                                ),
                                output_type: Some(
                                    hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                4,
                            ),
                            output_type: Some(
                                hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            4,
                        ),
                        output_type: Some(
                            (std :: collections :: hash_map :: HashMap < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , usize),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        4,
                    ),
                    output_type: Some(
                        usize,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    4,
                ),
                output_type: Some(
                    usize,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_3,
        },
        location_kind: Tick(
            9,
            Cluster(
                4,
            ),
        ),
        input: DeferTick {
            input: Tee {
                inner: <tee 36>: FilterMap {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < (core :: option :: Option < usize > , usize) , core :: option :: Option < usize > > ({ use crate :: __staged :: cluster :: kv_replica :: * ; let checkpoint_frequency__free = 1usize ; move | (max_checkpointed_seq , next_slot) | if max_checkpointed_seq . map (| m | next_slot - m >= checkpoint_frequency__free) . unwrap_or (true) { Some (next_slot) } else { None } }),
                    input: CrossSingleton {
                        left: Chain {
                            first: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < usize , core :: option :: Option < usize > > ({ use hydro_lang :: __staged :: optional :: * ; | v | Some (v) }),
                                input: Reduce {
                                    f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , usize , () > ({ use hydro_lang :: __staged :: stream :: * ; | curr , new | { if new > * curr { * curr = new ; } } }),
                                    input: Persist {
                                        inner: CycleSource {
                                            ident: Ident {
                                                sym: cycle_3,
                                            },
                                            location_kind: Tick(
                                                9,
                                                Cluster(
                                                    4,
                                                ),
                                            ),
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    4,
                                                ),
                                                output_type: Some(
                                                    usize,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                4,
                                            ),
                                            output_type: Some(
                                                usize,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            4,
                                        ),
                                        output_type: Some(
                                            usize,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        4,
                                    ),
                                    output_type: Some(
                                        core :: option :: Option < usize >,
                                    ),
                                },
                            },
                            second: Persist {
                                inner: Source {
                                    source: Iter(
                                        [:: std :: option :: Option :: None],
                                    ),
                                    location_kind: Cluster(
                                        4,
                                    ),
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            4,
                                        ),
                                        output_type: Some(
                                            core :: option :: Option < usize >,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        4,
                                    ),
                                    output_type: Some(
                                        core :: option :: Option < usize >,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    4,
                                ),
                                output_type: Some(
                                    core :: option :: Option < usize >,
                                ),
                            },
                        },
                        right: Tee {
                            inner: <tee 34>,
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    4,
                                ),
                                output_type: Some(
                                    usize,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                4,
                            ),
                            output_type: Some(
                                (core :: option :: Option < usize > , usize),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            4,
                        ),
                        output_type: Some(
                            usize,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        4,
                    ),
                    output_type: Some(
                        usize,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    4,
                ),
                output_type: Some(
                    usize,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            4,
        ),
        input: Tee {
            inner: <tee 36>,
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    4,
                ),
                output_type: Some(
                    usize,
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_3,
        },
        location_kind: Tick(
            10,
            Cluster(
                3,
            ),
        ),
        input: DeferTick {
            input: Difference {
                pos: Tee {
                    inner: <tee 37>: FilterMap {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < ((u32 , u32) , (usize , usize)) , core :: option :: Option < (u32 , u32) > > ({ use hydro_std :: __staged :: quorum :: * ; let min__free = 2usize ; move | (key , (success , _error)) | if success >= min__free { Some (key) } else { None } }),
                        input: Tee {
                            inner: <tee 38>: FoldKeyed {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < (usize , usize) > ({ use hydro_std :: __staged :: quorum :: * ; move | | (0 , 0) }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (usize , usize) , core :: result :: Result < () , () > , () > ({ use hydro_std :: __staged :: quorum :: * ; move | accum , value | { if value . is_ok () { accum . 0 += 1 ; } else { accum . 1 += 1 ; } } }),
                                input: Tee {
                                    inner: <tee 39>: Chain {
                                        first: CycleSource {
                                            ident: Ident {
                                                sym: cycle_2,
                                            },
                                            location_kind: Tick(
                                                10,
                                                Cluster(
                                                    3,
                                                ),
                                            ),
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                                output_type: Some(
                                                    ((u32 , u32) , core :: result :: Result < () , () >),
                                                ),
                                            },
                                        },
                                        second: Tee {
                                            inner: <tee 40>: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: kv_replica :: Replica > , ((u32 , u32) , core :: result :: Result < () , () >)) , ((u32 , u32) , core :: result :: Result < () , () >) > ({ use hydro_lang :: __staged :: stream :: * ; | (_ , b) | b }),
                                                input: Network {
                                                    from_location: Cluster(
                                                        4,
                                                    ),
                                                    from_key: None,
                                                    to_location: Cluster(
                                                        3,
                                                    ),
                                                    to_key: None,
                                                    serialize_fn: Some(
                                                        | (id , data) : (hydro_lang :: ClusterId < _ > , ((u32 , u32) , core :: result :: Result < () , () >)) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize :: < ((u32 , u32) , core :: result :: Result < () , () >) > (& data) . unwrap () . into ()) },
                                                    ),
                                                    instantiate_fn: <network instantiate>,
                                                    deserialize_fn: Some(
                                                        | res | { let (id , b) = res . unwrap () ; (hydro_lang :: ClusterId :: < hydro_test :: cluster :: kv_replica :: Replica > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < ((u32 , u32) , core :: result :: Result < () , () >) > (& b) . unwrap ()) },
                                                    ),
                                                    input: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , ((u32 , u32) , core :: result :: Result < () , () >)) > ({ use crate :: __staged :: cluster :: compartmentalized_paxos_bench :: * ; | payload | (payload . value . 0 , ((payload . key , payload . value . 1) , Ok (()))) }),
                                                        input: FilterMap {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > , core :: option :: Option < hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) > > > ({ use crate :: __staged :: cluster :: kv_replica :: * ; | payload | payload . kv }),
                                                            input: Tee {
                                                                inner: <tee 35>,
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        4,
                                                                    ),
                                                                    output_type: Some(
                                                                        hydro_test :: cluster :: kv_replica :: SequencedKv < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    4,
                                                                ),
                                                                output_type: Some(
                                                                    hydro_test :: cluster :: kv_replica :: KvPayload < u32 , (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , u32) >,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                4,
                                                            ),
                                                            output_type: Some(
                                                                (hydro_lang :: location :: cluster :: cluster_id :: ClusterId < hydro_test :: cluster :: bench_client :: Client > , ((u32 , u32) , core :: result :: Result < () , () >)),
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            ((u32 , u32) , core :: result :: Result < () , () >),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        3,
                                                    ),
                                                    output_type: Some(
                                                        ((u32 , u32) , core :: result :: Result < () , () >),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Tick(
                                                    10,
                                                    Cluster(
                                                        3,
                                                    ),
                                                ),
                                                output_type: Some(
                                                    ((u32 , u32) , core :: result :: Result < () , () >),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                3,
                                            ),
                                            output_type: Some(
                                                ((u32 , u32) , core :: result :: Result < () , () >),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            ((u32 , u32) , core :: result :: Result < () , () >),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        ((u32 , u32) , (usize , usize)),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    ((u32 , u32) , (usize , usize)),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (u32 , u32),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (u32 , u32),
                        ),
                    },
                },
                neg: Tee {
                    inner: <tee 41>: FilterMap {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < ((u32 , u32) , (usize , usize)) , core :: option :: Option < (u32 , u32) > > ({ use hydro_std :: __staged :: quorum :: * ; let max__free = 1usize ; move | (key , (success , error)) | if (success + error) >= max__free { Some (key) } else { None } }),
                        input: Tee {
                            inner: <tee 38>,
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    ((u32 , u32) , (usize , usize)),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (u32 , u32),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (u32 , u32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        (u32 , u32),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    3,
                ),
                output_type: Some(
                    (u32 , u32),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_2,
        },
        location_kind: Tick(
            10,
            Cluster(
                3,
            ),
        ),
        input: DeferTick {
            input: AntiJoin {
                pos: Tee {
                    inner: <tee 39>,
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            ((u32 , u32) , core :: result :: Result < () , () >),
                        ),
                    },
                },
                neg: Tee {
                    inner: <tee 41>,
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (u32 , u32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        ((u32 , u32) , core :: result :: Result < () , () >),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    3,
                ),
                output_type: Some(
                    ((u32 , u32) , core :: result :: Result < () , () >),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_0,
        },
        location_kind: Cluster(
            3,
        ),
        input: Chain {
            first: FlatMap {
                f: stageleft :: runtime_support :: fn1_type_hint :: < () , std :: iter :: Map < std :: ops :: Range < usize > , _ > > ({ use crate :: __staged :: cluster :: bench_client :: * ; let CLUSTER_SELF_ID__free = hydro_lang :: ClusterId :: < hydro_test :: cluster :: bench_client :: Client > :: from_raw (__hydro_lang_cluster_self_id_3) ; let num_clients_per_node__free = 1usize ; move | _ | (0 .. num_clients_per_node__free) . map (move | i | ((CLUSTER_SELF_ID__free . raw_id * (num_clients_per_node__free as u32)) + i as u32 , 0)) }),
                input: Tee {
                    inner: <tee 42>: Source {
                        source: Iter(
                            { use hydro_lang :: __staged :: location :: tick :: * ; let e__free = { use crate :: __staged :: cluster :: bench_client :: * ; () } ; [e__free] },
                        ),
                        location_kind: Cluster(
                            3,
                        ),
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        (u32 , u32),
                    ),
                },
            },
            second: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < (u32 , u32) , (u32 , u32) > ({ use crate :: __staged :: cluster :: bench_client :: * ; | payload | (payload . 0 , payload . 1 + 1) }),
                input: Tee {
                    inner: <tee 43>: Difference {
                        pos: Tee {
                            inner: <tee 37>,
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (u32 , u32),
                                ),
                            },
                        },
                        neg: CycleSource {
                            ident: Ident {
                                sym: cycle_3,
                            },
                            location_kind: Tick(
                                10,
                                Cluster(
                                    3,
                                ),
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (u32 , u32),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (u32 , u32),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (u32 , u32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        (u32 , u32),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    3,
                ),
                output_type: Some(
                    (u32 , u32),
                ),
            },
        },
    },
    CycleSink {
        ident: Ident {
            sym: cycle_4,
        },
        location_kind: Tick(
            0,
            Cluster(
                3,
            ),
        ),
        input: DeferTick {
            input: ReduceKeyed {
                f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < tokio :: time :: Instant , tokio :: time :: Instant , () > ({ use crate :: __staged :: cluster :: bench_client :: * ; | curr_time , new_time | { if new_time > * curr_time { * curr_time = new_time ; } } }),
                input: Chain {
                    first: Chain {
                        first: Tee {
                            inner: <tee 44>: CycleSource {
                                ident: Ident {
                                    sym: cycle_4,
                                },
                                location_kind: Tick(
                                    0,
                                    Cluster(
                                        3,
                                    ),
                                ),
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        (usize , tokio :: time :: Instant),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (usize , tokio :: time :: Instant),
                                ),
                            },
                        },
                        second: FlatMap {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < tokio :: time :: Instant , std :: iter :: Map < std :: ops :: Range < usize > , _ > > ({ use crate :: __staged :: cluster :: bench_client :: * ; let num_clients_per_node__free = 1usize ; move | now | (0 .. num_clients_per_node__free) . map (move | virtual_id | (virtual_id , now)) }),
                            input: Map {
                                f: stageleft :: runtime_support :: fn1_type_hint :: < () , tokio :: time :: Instant > ({ use crate :: __staged :: cluster :: bench_client :: * ; | _ | Instant :: now () }),
                                input: Tee {
                                    inner: <tee 42>,
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            (),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        tokio :: time :: Instant,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (usize , tokio :: time :: Instant),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (usize , tokio :: time :: Instant),
                            ),
                        },
                    },
                    second: Tee {
                        inner: <tee 45>: Map {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < (u32 , u32) , (usize , tokio :: time :: Instant) > ({ use crate :: __staged :: cluster :: bench_client :: * ; | (key , _prev_count) | (key as usize , Instant :: now ()) }),
                            input: Tee {
                                inner: <tee 43>,
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        (u32 , u32),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (usize , tokio :: time :: Instant),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                (usize , tokio :: time :: Instant),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (usize , tokio :: time :: Instant),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        (usize , tokio :: time :: Instant),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    3,
                ),
                output_type: Some(
                    (usize , tokio :: time :: Instant),
                ),
            },
        },
    },
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) , () > ({ use crate :: __staged :: cluster :: bench_client :: * ; move | (latencies , throughput) | { let mut latencies_mut = latencies . borrow_mut () ; if latencies_mut . len () > 0 { let middle_idx = latencies_mut . len () / 2 ; let (_ , median , _) = latencies_mut . select_nth_unstable (middle_idx) ; println ! ("Median latency: {}ms" , median . as_micros () as f64 / 1000.0) ; } println ! ("Throughput: {} requests/s" , throughput) ; } }),
        input: Map {
            f: stageleft :: runtime_support :: fn1_type_hint :: < ((std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) , ()) , (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) > ({ use hydro_lang :: __staged :: singleton :: * ; | (d , _signal) | d }),
            input: CrossSingleton {
                left: CrossSingleton {
                    left: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) , std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > > ({ use crate :: __staged :: cluster :: bench_client :: * ; | (latencies , _) | latencies }),
                        input: Fold {
                            init: stageleft :: runtime_support :: fn0_type_hint :: < (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) > ({ use crate :: __staged :: cluster :: bench_client :: * ; let median_latency_window_size__free = 1usize ; move | | (Rc :: new (RefCell :: new (Vec :: < Duration > :: with_capacity (median_latency_window_size__free))) , 0usize ,) }),
                            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) , core :: time :: Duration , () > ({ use crate :: __staged :: cluster :: bench_client :: * ; let median_latency_window_size__free = 1usize ; move | (latencies , write_index) , latency | { let mut latencies_mut = latencies . borrow_mut () ; if * write_index < latencies_mut . len () { latencies_mut [* write_index] = latency ; } else { latencies_mut . push (latency) ; } * write_index = (* write_index + 1) % median_latency_window_size__free ; } }),
                            input: Persist {
                                inner: FlatMap {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < core :: option :: Option < core :: time :: Duration > , core :: option :: Option < core :: time :: Duration > > ({ use hydro_lang :: __staged :: stream :: * ; | d | d }),
                                    input: Chain {
                                        first: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , (tokio :: time :: Instant , tokio :: time :: Instant)) , core :: option :: Option < core :: time :: Duration > > ({ use crate :: __staged :: cluster :: bench_client :: * ; | (_virtual_id , (prev_time , curr_time)) | Some (curr_time . duration_since (prev_time)) }),
                                            input: Join {
                                                left: Tee {
                                                    inner: <tee 44>,
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            (usize , tokio :: time :: Instant),
                                                        ),
                                                    },
                                                },
                                                right: Tee {
                                                    inner: <tee 45>,
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            (usize , tokio :: time :: Instant),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        3,
                                                    ),
                                                    output_type: Some(
                                                        (usize , (tokio :: time :: Instant , tokio :: time :: Instant)),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                                output_type: Some(
                                                    core :: option :: Option < core :: time :: Duration >,
                                                ),
                                            },
                                        },
                                        second: DeferTick {
                                            input: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < tokio :: time :: Instant , core :: option :: Option < core :: time :: Duration > > ({ use crate :: __staged :: cluster :: bench_client :: * ; | _ | None }),
                                                input: Tee {
                                                    inner: <tee 46>: Source {
                                                        source: Stream(
                                                            { use hydro_lang :: __staged :: location :: * ; let interval__free = { use crate :: __staged :: cluster :: bench_client :: * ; Duration :: from_secs (1) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval (interval__free)) },
                                                        ),
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                3,
                                                            ),
                                                            output_type: Some(
                                                                tokio :: time :: Instant,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            tokio :: time :: Instant,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        3,
                                                    ),
                                                    output_type: Some(
                                                        core :: option :: Option < core :: time :: Duration >,
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                                output_type: Some(
                                                    core :: option :: Option < core :: time :: Duration >,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                3,
                                            ),
                                            output_type: Some(
                                                core :: option :: Option < core :: time :: Duration >,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            core :: time :: Duration,
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        core :: time :: Duration,
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > >,
                            ),
                        },
                    },
                    right: Fold {
                        init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use crate :: __staged :: cluster :: bench_client :: * ; | | 0 }),
                        acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , (usize , bool) , () > ({ use crate :: __staged :: cluster :: bench_client :: * ; | total , (batch_size , reset) | { if reset { * total = 0 ; } else { * total += batch_size ; } } }),
                        input: Persist {
                            inner: Chain {
                                first: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < usize , (usize , bool) > ({ use crate :: __staged :: cluster :: bench_client :: * ; | batch_size | (batch_size , false) }),
                                    input: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , ()) , usize > ({ use hydro_lang :: __staged :: singleton :: * ; | (d , _signal) | d }),
                                        input: CrossSingleton {
                                            left: Fold {
                                                init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , (u32 , u32) , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                                                input: Tee {
                                                    inner: <tee 43>,
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            (u32 , u32),
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        3,
                                                    ),
                                                    output_type: Some(
                                                        usize,
                                                    ),
                                                },
                                            },
                                            right: Map {
                                                f: stageleft :: runtime_support :: fn1_type_hint :: < usize , () > ({ use hydro_lang :: __staged :: singleton :: * ; | _u | () }),
                                                input: Filter {
                                                    f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < usize , bool > ({ use hydro_lang :: __staged :: singleton :: * ; | c | * c == 0 }),
                                                    input: Fold {
                                                        init: stageleft :: runtime_support :: fn0_type_hint :: < usize > ({ use hydro_lang :: __staged :: stream :: * ; | | 0usize }),
                                                        acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < usize , tokio :: time :: Instant , () > ({ use hydro_lang :: __staged :: stream :: * ; | count , _ | * count += 1 }),
                                                        input: Tee {
                                                            inner: <tee 46>,
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    3,
                                                                ),
                                                                output_type: Some(
                                                                    tokio :: time :: Instant,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Cluster(
                                                                3,
                                                            ),
                                                            output_type: Some(
                                                                usize,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Cluster(
                                                            3,
                                                        ),
                                                        output_type: Some(
                                                            usize,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        3,
                                                    ),
                                                    output_type: Some(
                                                        (),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                                output_type: Some(
                                                    (usize , ()),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                3,
                                            ),
                                            output_type: Some(
                                                usize,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            (usize , bool),
                                        ),
                                    },
                                },
                                second: DeferTick {
                                    input: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < tokio :: time :: Instant , (usize , bool) > ({ use crate :: __staged :: cluster :: bench_client :: * ; | _ | (0 , true) }),
                                        input: Tee {
                                            inner: <tee 46>,
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    3,
                                                ),
                                                output_type: Some(
                                                    tokio :: time :: Instant,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                3,
                                            ),
                                            output_type: Some(
                                                (usize , bool),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            3,
                                        ),
                                        output_type: Some(
                                            (usize , bool),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        3,
                                    ),
                                    output_type: Some(
                                        (usize , bool),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    3,
                                ),
                                output_type: Some(
                                    (usize , bool),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                usize,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize),
                        ),
                    },
                },
                right: Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < tokio :: time :: Instant , () > ({ use hydro_lang :: __staged :: singleton :: * ; | _u | () }),
                    input: Tee {
                        inner: <tee 46>,
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                3,
                            ),
                            output_type: Some(
                                tokio :: time :: Instant,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Cluster(
                            3,
                        ),
                        output_type: Some(
                            (),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        3,
                    ),
                    output_type: Some(
                        ((std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize) , ()),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    3,
                ),
                output_type: Some(
                    (std :: rc :: Rc < core :: cell :: RefCell < std :: vec :: Vec < core :: time :: Duration > > > , usize),
                ),
            },
        },
    },
]

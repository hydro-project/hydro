---
source: hydro_test/src/cluster/map_reduce.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | (string , count) | println ! ("{}: {}" , string , count) }),
        input: ReduceKeyed {
            f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , i32 , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | total , count | * total += count }),
            input: Persist {
                inner: Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , (std :: string :: String , i32)) , (std :: string :: String , i32) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: keyed_stream :: * ; | (_ , v) | v }),
                    input: Network {
                        serialize_fn: Some(
                            :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (std :: string :: String , i32) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
                        ),
                        instantiate_fn: <network instantiate>,
                        deserialize_fn: Some(
                            | res | { let (id , b) = res . unwrap () ; (hydro_lang :: MemberId :: < hydro_test :: __staged :: cluster :: map_reduce :: Worker > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (std :: string :: String , i32) > (& b) . unwrap ()) },
                        ),
                        input: Inspect {
                            f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | (string , count) | println ! ("partition count: {} - {}" , string , count) }),
                            input: FoldKeyed {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < i32 > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | | 0 }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , () , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | count , _ | * count += 1 }),
                                input: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , (std :: string :: String , ()) > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | string | (string , ()) }),
                                    input: Network {
                                        serialize_fn: Some(
                                            :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: MemberId < _ > , std :: string :: String) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                                        ),
                                        instantiate_fn: <network instantiate>,
                                        deserialize_fn: Some(
                                            | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () },
                                        ),
                                        input: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < ((usize , std :: string :: String) , std :: vec :: Vec < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > >) , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , std :: string :: String) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | (data , members) | (members [data . 0 % members . len ()] , data . 1) }),
                                            input: CrossSingleton {
                                                left: Enumerate {
                                                    is_static: true,
                                                    input: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < & str , std :: string :: String > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; | s | s . to_string () }),
                                                        input: Source {
                                                            source: Iter(
                                                                { use crate :: __staged :: __deps :: * ; use crate :: __staged :: cluster :: map_reduce :: * ; vec ! ["abc" , "abc" , "xyz" , "abc"] },
                                                            ),
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Process(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    & str,
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Process(
                                                                0,
                                                            ),
                                                            output_type: Some(
                                                                std :: string :: String,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Process(
                                                            0,
                                                        ),
                                                        output_type: Some(
                                                            (usize , std :: string :: String),
                                                        ),
                                                    },
                                                },
                                                right: Fold {
                                                    init: stageleft :: runtime_support :: fn0_type_hint :: < std :: vec :: Vec < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: * ; | | vec ! [] }),
                                                    acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < std :: vec :: Vec < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , () > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: * ; | acc , v | { acc . push (v) ; } }),
                                                    input: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , ()) , hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: keyed_singleton :: * ; | (k , _) | k }),
                                                        input: FilterMap {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , bool) , core :: option :: Option < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , ()) > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: keyed_singleton :: * ; let f__free = stageleft :: runtime_support :: fn1_type_hint :: < bool , core :: option :: Option < () > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | v | if v { Some (()) } else { None } }) ; { let orig = f__free ; move | (k , v) | orig (v) . map (| v | (k , v)) } }),
                                                            input: FoldKeyed {
                                                                init: stageleft :: runtime_support :: fn0_type_hint :: < bool > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | | false }),
                                                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < bool , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent , () > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | present , event | { match event { MembershipEvent :: Joined => * present = true , MembershipEvent :: Left => * present = false , } } }),
                                                                input: Persist {
                                                                    inner: Map {
                                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < & hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; | id | (* id , MembershipEvent :: Joined) }),
                                                                        input: Source {
                                                                            source: Iter(
                                                                                { use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; let underlying_memberids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker >] > (__hydro_lang_cluster_ids_1) } ; underlying_memberids__free },
                                                                            ),
                                                                            metadata: HydroIrMetadata {
                                                                                location_kind: Process(
                                                                                    0,
                                                                                ),
                                                                                output_type: Some(
                                                                                    & hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker >,
                                                                                ),
                                                                            },
                                                                        },
                                                                        metadata: HydroIrMetadata {
                                                                            location_kind: Process(
                                                                                0,
                                                                            ),
                                                                            output_type: Some(
                                                                                (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent),
                                                                            ),
                                                                        },
                                                                    },
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Process(
                                                                            0,
                                                                        ),
                                                                        output_type: Some(
                                                                            (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Process(
                                                                        0,
                                                                    ),
                                                                    output_type: Some(
                                                                        (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , bool),
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Process(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , ()),
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Tick(
                                                                0,
                                                                Process(
                                                                    0,
                                                                ),
                                                            ),
                                                            output_type: Some(
                                                                hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker >,
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Tick(
                                                            0,
                                                            Process(
                                                                0,
                                                            ),
                                                        ),
                                                        output_type: Some(
                                                            std :: vec :: Vec < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > >,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Tick(
                                                        0,
                                                        Process(
                                                            0,
                                                        ),
                                                    ),
                                                    output_type: Some(
                                                        ((usize , std :: string :: String) , std :: vec :: Vec < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > >),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Tick(
                                                    0,
                                                    Process(
                                                        0,
                                                    ),
                                                ),
                                                output_type: Some(
                                                    (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , std :: string :: String),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                1,
                                            ),
                                            output_type: Some(
                                                std :: string :: String,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            1,
                                        ),
                                        output_type: Some(
                                            (std :: string :: String , ()),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Tick(
                                        1,
                                        Cluster(
                                            1,
                                        ),
                                    ),
                                    output_type: Some(
                                        (std :: string :: String , i32),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Tick(
                                    1,
                                    Cluster(
                                        1,
                                    ),
                                ),
                                output_type: Some(
                                    (std :: string :: String , i32),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Process(
                                0,
                            ),
                            output_type: Some(
                                (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: map_reduce :: Worker > , (std :: string :: String , i32)),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            0,
                        ),
                        output_type: Some(
                            (std :: string :: String , i32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        0,
                    ),
                    output_type: Some(
                        (std :: string :: String , i32),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    0,
                ),
                output_type: Some(
                    (std :: string :: String , i32),
                ),
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                0,
            ),
            output_type: Some(
                (std :: string :: String , i32),
            ),
        },
    },
]

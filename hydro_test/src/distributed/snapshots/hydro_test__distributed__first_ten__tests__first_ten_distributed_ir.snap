---
source: hydro_test/src/distributed/first_ten.rs
expression: builder.finalize().ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; | n | println ! ("hi: {:?}" , n) }),
        input: ExternalInput {
            from_external_id: 0,
            from_key: 0,
            from_many: false,
            codec_type: hydro_test :: __staged :: __deps :: hydro_lang :: __staged :: __deps :: tokio_util :: codec :: length_delimited :: LengthDelimitedCodec,
            port_hint: Auto,
            instantiate_fn: <network instantiate>,
            deserialize_fn: Some(
                | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () },
            ),
            metadata: HydroIrMetadata {
                location_kind: Process(
                    1,
                ),
                output_type: Some(
                    std :: string :: String,
                ),
            },
        },
        op_metadata: HydroIrOpMetadata,
    },
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; | n | println ! ("{}" , n . n) }),
        input: Network {
            serialize_fn: Some(
                :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
            ),
            instantiate_fn: <network instantiate>,
            deserialize_fn: Some(
                | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork > (& res . unwrap ()) . unwrap () },
            ),
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < u32 , hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; | n | SendOverNetwork { n } }),
                input: Source {
                    source: Iter(
                        { use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; 0 .. 10 },
                    ),
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            1,
                        ),
                        output_type: Some(
                            u32,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        1,
                    ),
                    output_type: Some(
                        hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    2,
                ),
                output_type: Some(
                    hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                ),
            },
        },
        op_metadata: HydroIrOpMetadata,
    },
]

---
source: hydro_test/src/distributed/first_ten.rs
expression: builder.finalize().ir()
---
[
    ForEach {
        f: DebugExpr(
            Expr::Call {
                attrs: [],
                func: Expr::Path {
                    attrs: [],
                    qself: None,
                    path: Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: stageleft,
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: runtime_support,
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: fn1_type_hint,
                                },
                                arguments: PathArguments::AngleBracketed {
                                    colon2_token: Some(
                                        PathSep,
                                    ),
                                    lt_token: Lt,
                                    args: [
                                        GenericArgument::Type(
                                            Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: std,
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: string,
                                                                span: bytes(162..168),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: String,
                                                                span: bytes(170..176),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ),
                                        Comma,
                                        GenericArgument::Type(
                                            Type::Tuple {
                                                paren_token: Paren,
                                                elems: [],
                                            },
                                        ),
                                    ],
                                    gt_token: Gt,
                                },
                            },
                        ],
                    },
                },
                paren_token: Paren,
                args: [
                    Expr::Block {
                        attrs: [],
                        label: None,
                        block: Block {
                            brace_token: Brace,
                            stmts: [
                                Stmt::Item(
                                    Item::Use {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        use_token: Use,
                                        leading_colon: None,
                                        tree: UseTree::Path(
                                            UsePath {
                                                ident: Ident {
                                                    sym: crate,
                                                },
                                                colon2_token: PathSep,
                                                tree: UseTree::Path(
                                                    UsePath {
                                                        ident: Ident {
                                                            sym: __staged,
                                                        },
                                                        colon2_token: PathSep,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: __deps,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Glob(
                                                                    UseGlob {
                                                                        star_token: Star,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                ),
                                Stmt::Item(
                                    Item::Use {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        use_token: Use,
                                        leading_colon: None,
                                        tree: UseTree::Path(
                                            UsePath {
                                                ident: Ident {
                                                    sym: crate,
                                                },
                                                colon2_token: PathSep,
                                                tree: UseTree::Path(
                                                    UsePath {
                                                        ident: Ident {
                                                            sym: __staged,
                                                        },
                                                        colon2_token: PathSep,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: distributed,
                                                                    span: bytes(101..112),
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: first_ten,
                                                                            span: bytes(114..123),
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Glob(
                                                                            UseGlob {
                                                                                star_token: Star,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                ),
                                Stmt::Expr(
                                    Expr::Closure {
                                        attrs: [],
                                        lifetimes: None,
                                        constness: None,
                                        movability: None,
                                        asyncness: None,
                                        capture: None,
                                        or1_token: Or,
                                        inputs: [
                                            Pat::Ident {
                                                attrs: [],
                                                by_ref: None,
                                                mutability: None,
                                                ident: Ident {
                                                    sym: n,
                                                    span: bytes(126..127),
                                                },
                                                subpat: None,
                                            },
                                        ],
                                        or2_token: Or,
                                        output: ReturnType::Default,
                                        body: Expr::Macro {
                                            attrs: [],
                                            mac: Macro {
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: println,
                                                                span: bytes(130..137),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                bang_token: Not,
                                                delimiter: MacroDelimiter::Paren(
                                                    Paren,
                                                ),
                                                tokens: TokenStream [
                                                    Literal {
                                                        lit: "hi: {:?}",
                                                        span: bytes(140..150),
                                                    },
                                                    Punct {
                                                        char: ',',
                                                        spacing: Alone,
                                                        span: bytes(150..151),
                                                    },
                                                    Ident {
                                                        sym: n,
                                                        span: bytes(152..153),
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    None,
                                ),
                            ],
                        },
                    },
                ],
            },
        ),
        input: Unpersist {
            inner: Persist {
                inner: Network {
                    from_key: Some(
                        0,
                    ),
                    to_location: Process(
                        1,
                    ),
                    to_key: None,
                    serialize_fn: None,
                    instantiate_fn: <network instantiate>,
                    deserialize_fn: Some(
                        DebugExpr(
                            Expr::Closure {
                                attrs: [],
                                lifetimes: None,
                                constness: None,
                                movability: None,
                                asyncness: None,
                                capture: None,
                                or1_token: Or,
                                inputs: [
                                    Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: res,
                                        },
                                        subpat: None,
                                    },
                                ],
                                or2_token: Or,
                                output: ReturnType::Default,
                                body: Expr::Block {
                                    attrs: [],
                                    label: None,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Call {
                                                        attrs: [],
                                                        func: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_lang,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: runtime_support,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: bincode,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: deserialize,
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: Some(
                                                                                PathSep,
                                                                            ),
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: std,
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: string,
                                                                                                        span: bytes(8..14),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: String,
                                                                                                        span: bytes(16..22),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        paren_token: Paren,
                                                        args: [
                                                            Expr::Reference {
                                                                attrs: [],
                                                                and_token: And,
                                                                mutability: None,
                                                                expr: Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: res,
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: unwrap,
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: unwrap,
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                            },
                        ),
                    ),
                    input: Source {
                        source: ExternalNetwork,
                        location_kind: ExternalProcess(
                            0,
                        ),
                        metadata: HydroIrMetadata {
                            location_kind: ExternalProcess(
                                0,
                            ),
                            backtrace: [
                                hydro_test::distributed::first_ten::first_ten_distributed,
                                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                                core::ops::function::FnOnce::call_once,
                            ],
                            output_type: Some(
                                std :: string :: String,
                            ),
                            cardinality: None,
                            cpu_usage: None,
                            network_recv_cpu_usage: None,
                            id: None,
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            1,
                        ),
                        backtrace: [
                            hydro_test::distributed::first_ten::first_ten_distributed,
                            hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                            hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                            core::ops::function::FnOnce::call_once,
                        ],
                        output_type: Some(
                            std :: string :: String,
                        ),
                        cardinality: None,
                        cpu_usage: None,
                        network_recv_cpu_usage: None,
                        id: None,
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        1,
                    ),
                    backtrace: [
                        hydro_test::distributed::first_ten::first_ten_distributed,
                        hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                        hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                        core::ops::function::FnOnce::call_once,
                    ],
                    output_type: Some(
                        std :: string :: String,
                    ),
                    cardinality: None,
                    cpu_usage: None,
                    network_recv_cpu_usage: None,
                    id: None,
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    1,
                ),
                backtrace: [
                    hydro_test::distributed::first_ten::first_ten_distributed,
                    hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                    hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                    core::ops::function::FnOnce::call_once,
                ],
                output_type: Some(
                    std :: string :: String,
                ),
                cardinality: None,
                cpu_usage: None,
                network_recv_cpu_usage: None,
                id: None,
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                1,
            ),
            backtrace: [
                hydro_test::distributed::first_ten::first_ten_distributed,
                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                core::ops::function::FnOnce::call_once,
            ],
            output_type: Some(
                std :: string :: String,
            ),
            cardinality: None,
            cpu_usage: None,
            network_recv_cpu_usage: None,
            id: None,
        },
    },
    ForEach {
        f: DebugExpr(
            Expr::Call {
                attrs: [],
                func: Expr::Path {
                    attrs: [],
                    qself: None,
                    path: Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: stageleft,
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: runtime_support,
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: fn1_type_hint,
                                },
                                arguments: PathArguments::AngleBracketed {
                                    colon2_token: Some(
                                        PathSep,
                                    ),
                                    lt_token: Lt,
                                    args: [
                                        GenericArgument::Type(
                                            Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: hydro_test,
                                                                span: bytes(642..652),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: __staged,
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: distributed,
                                                                span: bytes(654..665),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: first_ten,
                                                                span: bytes(667..676),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: SendOverNetwork,
                                                                span: bytes(678..693),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ),
                                        Comma,
                                        GenericArgument::Type(
                                            Type::Tuple {
                                                paren_token: Paren,
                                                elems: [],
                                            },
                                        ),
                                    ],
                                    gt_token: Gt,
                                },
                            },
                        ],
                    },
                },
                paren_token: Paren,
                args: [
                    Expr::Block {
                        attrs: [],
                        label: None,
                        block: Block {
                            brace_token: Brace,
                            stmts: [
                                Stmt::Item(
                                    Item::Use {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        use_token: Use,
                                        leading_colon: None,
                                        tree: UseTree::Path(
                                            UsePath {
                                                ident: Ident {
                                                    sym: crate,
                                                },
                                                colon2_token: PathSep,
                                                tree: UseTree::Path(
                                                    UsePath {
                                                        ident: Ident {
                                                            sym: __staged,
                                                        },
                                                        colon2_token: PathSep,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: __deps,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Glob(
                                                                    UseGlob {
                                                                        star_token: Star,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                ),
                                Stmt::Item(
                                    Item::Use {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        use_token: Use,
                                        leading_colon: None,
                                        tree: UseTree::Path(
                                            UsePath {
                                                ident: Ident {
                                                    sym: crate,
                                                },
                                                colon2_token: PathSep,
                                                tree: UseTree::Path(
                                                    UsePath {
                                                        ident: Ident {
                                                            sym: __staged,
                                                        },
                                                        colon2_token: PathSep,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: distributed,
                                                                    span: bytes(592..603),
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: first_ten,
                                                                            span: bytes(605..614),
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Glob(
                                                                            UseGlob {
                                                                                star_token: Star,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                ),
                                Stmt::Expr(
                                    Expr::Closure {
                                        attrs: [],
                                        lifetimes: None,
                                        constness: None,
                                        movability: None,
                                        asyncness: None,
                                        capture: None,
                                        or1_token: Or,
                                        inputs: [
                                            Pat::Ident {
                                                attrs: [],
                                                by_ref: None,
                                                mutability: None,
                                                ident: Ident {
                                                    sym: n,
                                                    span: bytes(617..618),
                                                },
                                                subpat: None,
                                            },
                                        ],
                                        or2_token: Or,
                                        output: ReturnType::Default,
                                        body: Expr::Macro {
                                            attrs: [],
                                            mac: Macro {
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: println,
                                                                span: bytes(621..628),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                bang_token: Not,
                                                delimiter: MacroDelimiter::Paren(
                                                    Paren,
                                                ),
                                                tokens: TokenStream [
                                                    Literal {
                                                        lit: "{}",
                                                        span: bytes(631..635),
                                                    },
                                                    Punct {
                                                        char: ',',
                                                        spacing: Alone,
                                                        span: bytes(635..636),
                                                    },
                                                    Ident {
                                                        sym: n,
                                                        span: bytes(637..638),
                                                    },
                                                    Punct {
                                                        char: '.',
                                                        spacing: Alone,
                                                        span: bytes(638..639),
                                                    },
                                                    Ident {
                                                        sym: n,
                                                        span: bytes(639..640),
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    None,
                                ),
                            ],
                        },
                    },
                ],
            },
        ),
        input: Unpersist {
            inner: Network {
                from_key: None,
                to_location: Process(
                    2,
                ),
                to_key: None,
                serialize_fn: Some(
                    DebugExpr(
                        Expr::Call {
                            attrs: [],
                            func: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: Some(
                                        PathSep,
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: hydro_lang,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: runtime_support,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: stageleft,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: runtime_support,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: fn1_type_hint,
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: Some(
                                                    PathSep,
                                                ),
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_test,
                                                                            span: bytes(424..434),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: distributed,
                                                                            span: bytes(436..447),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: first_ten,
                                                                            span: bytes(449..458),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: SendOverNetwork,
                                                                            span: bytes(460..475),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Infer {
                                                            underscore_token: Underscore,
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                            paren_token: Paren,
                            args: [
                                Expr::Closure {
                                    attrs: [],
                                    lifetimes: None,
                                    constness: None,
                                    movability: None,
                                    asyncness: None,
                                    capture: None,
                                    or1_token: Or,
                                    inputs: [
                                        Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: data,
                                            },
                                            subpat: None,
                                        },
                                    ],
                                    or2_token: Or,
                                    output: ReturnType::Default,
                                    body: Expr::Block {
                                        attrs: [],
                                        label: None,
                                        block: Block {
                                            brace_token: Brace,
                                            stmts: [
                                                Stmt::Expr(
                                                    Expr::MethodCall {
                                                        attrs: [],
                                                        receiver: Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Call {
                                                                attrs: [],
                                                                func: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: hydro_lang,
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                            PathSep,
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: runtime_support,
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                            PathSep,
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: bincode,
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                            PathSep,
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: serialize,
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                paren_token: Paren,
                                                                args: [
                                                                    Expr::Reference {
                                                                        attrs: [],
                                                                        and_token: And,
                                                                        mutability: None,
                                                                        expr: Expr::Path {
                                                                            attrs: [],
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: data,
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: unwrap,
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                        dot_token: Dot,
                                                        method: Ident {
                                                            sym: into,
                                                        },
                                                        turbofish: None,
                                                        paren_token: Paren,
                                                        args: [],
                                                    },
                                                    None,
                                                ),
                                            ],
                                        },
                                    },
                                },
                            ],
                        },
                    ),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    DebugExpr(
                        Expr::Closure {
                            attrs: [],
                            lifetimes: None,
                            constness: None,
                            movability: None,
                            asyncness: None,
                            capture: None,
                            or1_token: Or,
                            inputs: [
                                Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: res,
                                    },
                                    subpat: None,
                                },
                            ],
                            or2_token: Or,
                            output: ReturnType::Default,
                            body: Expr::Block {
                                attrs: [],
                                label: None,
                                block: Block {
                                    brace_token: Brace,
                                    stmts: [
                                        Stmt::Expr(
                                            Expr::MethodCall {
                                                attrs: [],
                                                receiver: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: hydro_lang,
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: runtime_support,
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: bincode,
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: deserialize,
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: hydro_test,
                                                                                                    span: bytes(476..486),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: __staged,
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: distributed,
                                                                                                    span: bytes(488..499),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: first_ten,
                                                                                                    span: bytes(501..510),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: SendOverNetwork,
                                                                                                    span: bytes(512..527),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Reference {
                                                            attrs: [],
                                                            and_token: And,
                                                            mutability: None,
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: res,
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: unwrap,
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                    ],
                                                },
                                                dot_token: Dot,
                                                method: Ident {
                                                    sym: unwrap,
                                                },
                                                turbofish: None,
                                                paren_token: Paren,
                                                args: [],
                                            },
                                            None,
                                        ),
                                    ],
                                },
                            },
                        },
                    ),
                ),
                input: Map {
                    f: DebugExpr(
                        Expr::Call {
                            attrs: [],
                            func: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: stageleft,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: runtime_support,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: fn1_type_hint,
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: Some(
                                                    PathSep,
                                                ),
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: u32,
                                                                            span: bytes(316..319),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: hydro_test,
                                                                            span: bytes(320..330),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: distributed,
                                                                            span: bytes(332..343),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: first_ten,
                                                                            span: bytes(345..354),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: SendOverNetwork,
                                                                            span: bytes(356..371),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                            paren_token: Paren,
                            args: [
                                Expr::Block {
                                    attrs: [],
                                    label: None,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Item(
                                                Item::Use {
                                                    attrs: [],
                                                    vis: Visibility::Inherited,
                                                    use_token: Use,
                                                    leading_colon: None,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: crate,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: __staged,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: __deps,
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Glob(
                                                                                UseGlob {
                                                                                    star_token: Star,
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    semi_token: Semi,
                                                },
                                            ),
                                            Stmt::Item(
                                                Item::Use {
                                                    attrs: [],
                                                    vis: Visibility::Inherited,
                                                    use_token: Use,
                                                    leading_colon: None,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: crate,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: __staged,
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: distributed,
                                                                                span: bytes(265..276),
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Path(
                                                                                UsePath {
                                                                                    ident: Ident {
                                                                                        sym: first_ten,
                                                                                        span: bytes(278..287),
                                                                                    },
                                                                                    colon2_token: PathSep,
                                                                                    tree: UseTree::Glob(
                                                                                        UseGlob {
                                                                                            star_token: Star,
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    semi_token: Semi,
                                                },
                                            ),
                                            Stmt::Expr(
                                                Expr::Closure {
                                                    attrs: [],
                                                    lifetimes: None,
                                                    constness: None,
                                                    movability: None,
                                                    asyncness: None,
                                                    capture: None,
                                                    or1_token: Or,
                                                    inputs: [
                                                        Pat::Ident {
                                                            attrs: [],
                                                            by_ref: None,
                                                            mutability: None,
                                                            ident: Ident {
                                                                sym: n,
                                                                span: bytes(290..291),
                                                            },
                                                            subpat: None,
                                                        },
                                                    ],
                                                    or2_token: Or,
                                                    output: ReturnType::Default,
                                                    body: Expr::Struct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: SendOverNetwork,
                                                                        span: bytes(294..309),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        brace_token: Brace,
                                                        fields: [
                                                            FieldValue {
                                                                attrs: [],
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: n,
                                                                        span: bytes(312..313),
                                                                    },
                                                                ),
                                                                colon_token: None,
                                                                expr: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: n,
                                                                                    span: bytes(312..313),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            },
                                                        ],
                                                        dot2_token: None,
                                                        rest: None,
                                                    },
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                            ],
                        },
                    ),
                    input: Persist {
                        inner: Source {
                            source: Iter(
                                DebugExpr(
                                    Expr::Block {
                                        attrs: [],
                                        label: None,
                                        block: Block {
                                            brace_token: Brace,
                                            stmts: [
                                                Stmt::Item(
                                                    Item::Use {
                                                        attrs: [],
                                                        vis: Visibility::Inherited,
                                                        use_token: Use,
                                                        leading_colon: None,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: crate,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Path(
                                                                            UsePath {
                                                                                ident: Ident {
                                                                                    sym: __deps,
                                                                                },
                                                                                colon2_token: PathSep,
                                                                                tree: UseTree::Glob(
                                                                                    UseGlob {
                                                                                        star_token: Star,
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                ),
                                                Stmt::Item(
                                                    Item::Use {
                                                        attrs: [],
                                                        vis: Visibility::Inherited,
                                                        use_token: Use,
                                                        leading_colon: None,
                                                        tree: UseTree::Path(
                                                            UsePath {
                                                                ident: Ident {
                                                                    sym: crate,
                                                                },
                                                                colon2_token: PathSep,
                                                                tree: UseTree::Path(
                                                                    UsePath {
                                                                        ident: Ident {
                                                                            sym: __staged,
                                                                        },
                                                                        colon2_token: PathSep,
                                                                        tree: UseTree::Path(
                                                                            UsePath {
                                                                                ident: Ident {
                                                                                    sym: distributed,
                                                                                    span: bytes(214..225),
                                                                                },
                                                                                colon2_token: PathSep,
                                                                                tree: UseTree::Path(
                                                                                    UsePath {
                                                                                        ident: Ident {
                                                                                            sym: first_ten,
                                                                                            span: bytes(227..236),
                                                                                        },
                                                                                        colon2_token: PathSep,
                                                                                        tree: UseTree::Glob(
                                                                                            UseGlob {
                                                                                                star_token: Star,
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                ),
                                                Stmt::Expr(
                                                    Expr::Range {
                                                        attrs: [],
                                                        start: Some(
                                                            Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Int {
                                                                    token: 0,
                                                                },
                                                            },
                                                        ),
                                                        limits: RangeLimits::HalfOpen(
                                                            DotDot,
                                                        ),
                                                        end: Some(
                                                            Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Int {
                                                                    token: 10,
                                                                },
                                                            },
                                                        ),
                                                    },
                                                    None,
                                                ),
                                            ],
                                        },
                                    },
                                ),
                            ),
                            location_kind: Process(
                                1,
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Process(
                                    1,
                                ),
                                backtrace: [
                                    hydro_test::distributed::first_ten::first_ten_distributed,
                                    hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                                    hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                                    core::ops::function::FnOnce::call_once,
                                ],
                                output_type: Some(
                                    u32,
                                ),
                                cardinality: None,
                                cpu_usage: None,
                                network_recv_cpu_usage: None,
                                id: None,
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Process(
                                1,
                            ),
                            backtrace: [
                                hydro_test::distributed::first_ten::first_ten_distributed,
                                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                                core::ops::function::FnOnce::call_once,
                            ],
                            output_type: Some(
                                u32,
                            ),
                            cardinality: None,
                            cpu_usage: None,
                            network_recv_cpu_usage: None,
                            id: None,
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            1,
                        ),
                        backtrace: [
                            hydro_test::distributed::first_ten::first_ten_distributed,
                            hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                            hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                            core::ops::function::FnOnce::call_once,
                        ],
                        output_type: Some(
                            hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                        ),
                        cardinality: None,
                        cpu_usage: None,
                        network_recv_cpu_usage: None,
                        id: None,
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        2,
                    ),
                    backtrace: [
                        hydro_test::distributed::first_ten::first_ten_distributed,
                        hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                        hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                        core::ops::function::FnOnce::call_once,
                    ],
                    output_type: Some(
                        hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                    ),
                    cardinality: None,
                    cpu_usage: None,
                    network_recv_cpu_usage: None,
                    id: None,
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    2,
                ),
                backtrace: [
                    hydro_test::distributed::first_ten::first_ten_distributed,
                    hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                    hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                    core::ops::function::FnOnce::call_once,
                ],
                output_type: Some(
                    hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                ),
                cardinality: None,
                cpu_usage: None,
                network_recv_cpu_usage: None,
                id: None,
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                2,
            ),
            backtrace: [
                hydro_test::distributed::first_ten::first_ten_distributed,
                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir,
                hydro_test::distributed::first_ten::tests::first_ten_distributed_ir::{{closure}},
                core::ops::function::FnOnce::call_once,
            ],
            output_type: Some(
                hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
            ),
            cardinality: None,
            cpu_usage: None,
            network_recv_cpu_usage: None,
            id: None,
        },
    },
]

---
source: hydro_test/src/distributed/first_ten.rs
expression: builder.finalize().ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; | n | println ! ("hi: {:?}" , n) }),
        input: Unpersist {
            inner: Persist {
                inner: Network {
                    from_key: Some(
                        0,
                    ),
                    to_location: Process(
                        1,
                    ),
                    to_key: None,
                    serialize_fn: None,
                    instantiate_fn: <network instantiate>,
                    deserialize_fn: Some(
                        | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () },
                    ),
                    input: Source {
                        source: ExternalNetwork,
                        location_kind: ExternalProcess(
                            0,
                        ),
                        metadata: HydroIrMetadata {
                            location_kind: ExternalProcess(
                                0,
                            ),
                            output_type: Some(
                                std :: string :: String,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            1,
                        ),
                        output_type: Some(
                            std :: string :: String,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        1,
                    ),
                    output_type: Some(
                        std :: string :: String,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    1,
                ),
                output_type: Some(
                    std :: string :: String,
                ),
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                1,
            ),
            output_type: Some(
                std :: string :: String,
            ),
        },
    },
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; | n | println ! ("{}" , n . n) }),
        input: Unpersist {
            inner: Network {
                from_key: None,
                to_location: Process(
                    2,
                ),
                to_key: None,
                serialize_fn: Some(
                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    | res | { hydro_lang :: runtime_support :: bincode :: deserialize :: < hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork > (& res . unwrap ()) . unwrap () },
                ),
                input: Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < u32 , hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; | n | SendOverNetwork { n } }),
                    input: Persist {
                        inner: Source {
                            source: Iter(
                                { use crate :: __staged :: __deps :: * ; use crate :: __staged :: distributed :: first_ten :: * ; 0 .. 10 },
                            ),
                            location_kind: Process(
                                1,
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Process(
                                    1,
                                ),
                                output_type: Some(
                                    u32,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Process(
                                1,
                            ),
                            output_type: Some(
                                u32,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            1,
                        ),
                        output_type: Some(
                            hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Process(
                        2,
                    ),
                    output_type: Some(
                        hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Process(
                    2,
                ),
                output_type: Some(
                    hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
                ),
            },
        },
        metadata: HydroIrMetadata {
            location_kind: Process(
                2,
            ),
            output_type: Some(
                hydro_test :: __staged :: distributed :: first_ten :: SendOverNetwork,
            ),
        },
    },
]

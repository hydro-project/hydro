---
source: datalog_compiler/src/lib.rs
expression: rustfmt_code(&wrapped.to_token_stream().to_string())
---
fn main() {
    {
        {
            use hydroflow::tl;
            let mut df = hydroflow :: scheduled :: graph :: Hydroflow :: new_with_graph ("{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"op_1v1: recv_stream (in1_recv)\",\"version\":1},{\"value\":\"op_2v1: recv_stream (in2_recv)\",\"version\":1},{\"value\":\"op_3v1: for_each (| v | println ! (\\\"{:?}\\\" , v))\",\"version\":1},{\"value\":\"op_4v1: join ()\",\"version\":1},{\"value\":\"op_5v1: map (| (k , (v1 , v2)) | v1)\",\"version\":1},{\"value\":\"op_6v1: map (| v | ((v . 0 , v . 1) , v))\",\"version\":1},{\"value\":\"op_7v1: map (| v | ((v . 1 , v . 0) , v))\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":6,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1}],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[{\"idx\":5,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1}],\"version\":1}],\"handoffs\":[{\"value\":null,\"version\":0}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":6,\"version\":1},{\"idx\":7,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}]}\n") ;
            let mut in1_recv = in1_recv;
            let mut in2_recv = in2_recv;
            let mut sg_1v1_node_4v1_joindata = Default::default();
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                tl!(),
                tl!(),
                move |context, tl!(), tl!()| {
                    let op_1v1 = std::iter::from_fn(|| {
                        match in1_recv
                            .poll_recv(&mut std::task::Context::from_waker(&mut context.waker()))
                        {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_2v1 = std::iter::from_fn(|| {
                        match in2_recv
                            .poll_recv(&mut std::task::Context::from_waker(&mut context.waker()))
                        {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_6v1 = op_1v1.map(|v| ((v.0, v.1), v));
                    let op_7v1 = op_2v1.map(|v| ((v.1, v.0), v));
                    let op_4v1 = hydroflow::compiled::pull::SymmetricHashJoin::new(
                        op_6v1,
                        op_7v1,
                        &mut sg_1v1_node_4v1_joindata,
                    );
                    let op_5v1 = op_4v1.map(|(k, (v1, v2))| v1);
                    let op_3v1 =
                        hydroflow::compiled::for_each::ForEach::new(|v| println!("{:?}", v));
                    hydroflow::compiled::pivot::Pivot::new(op_5v1, op_3v1).run();
                },
            );
            df
        }
    }
}


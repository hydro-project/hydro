---
source: datalog_compiler/src/lib.rs
expression: rustfmt_code(&wrapped.to_token_stream().to_string())
---
fn main() {
    {
        {
            use hydroflow::tl;
            let mut df = hydroflow :: scheduled :: graph :: Hydroflow :: new_with_graph ("{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":\"op_1v1: recv_stream (in_recv)\",\"version\":1},{\"value\":\"op_2v1: for_each (| v | println ! (\\\"{:?}\\\" , v))\",\"version\":1}],\"edges\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":2,\"version\":1}],\"version\":1}],\"handoffs\":[{\"value\":null,\"version\":0}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":1,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}]}\n") ;
            let mut in_recv = in_recv;
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                tl!(),
                tl!(),
                move |context, tl!(), tl!()| {
                    let op_1v1 = std::iter::from_fn(|| {
                        match in_recv
                            .poll_recv(&mut std::task::Context::from_waker(&mut context.waker()))
                        {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_2v1 =
                        hydroflow::compiled::for_each::ForEach::new(|v| println!("{:?}", v));
                    hydroflow::compiled::pivot::Pivot::new(op_1v1, op_2v1).run();
                },
            );
            df
        }
    }
}


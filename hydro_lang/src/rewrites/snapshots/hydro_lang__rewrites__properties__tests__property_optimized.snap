---
source: hydro_lang/src/rewrites/properties.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: rewrites :: properties :: tests :: * ; | (string , count) | println ! ("{}: {}" , string , count) }),
        input: FoldKeyed {
            init: stageleft :: runtime_support :: fn0_type_hint :: < i32 > ({ use crate :: __staged :: rewrites :: properties :: tests :: * ; | | 0 }),
            acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , () , () > ({ use crate :: __staged :: rewrites :: properties :: tests :: * ; | count : & mut i32 , _ | * count += 1 }),
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , (std :: string :: String , ()) > ({ use crate :: __staged :: rewrites :: properties :: tests :: * ; | string : String | (string , ()) }),
                input: Source {
                    source: Iter(
                        { use crate :: __staged :: rewrites :: properties :: tests :: * ; vec ! [] },
                    ),
                    location_kind: Process(
                        0,
                    ),
                    metadata: HydroNodeMetadata {
                        id: Some(
                            0,
                        ),
                        location_kind: Process(
                            0,
                        ),
                        output_type: Some(
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: std,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: string,
                                                span: bytes(90..96),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: String,
                                                span: bytes(98..104),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                },
                metadata: HydroNodeMetadata {
                    id: Some(
                        2,
                    ),
                    location_kind: Process(
                        0,
                    ),
                    output_type: Some(
                        Type::Tuple {
                            paren_token: Paren,
                            elems: [
                                Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: std,
                                                },
                                                arguments: PathArguments::None,
                                            },
                                            PathSep,
                                            PathSegment {
                                                ident: Ident {
                                                    sym: string,
                                                    span: bytes(225..231),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                            PathSep,
                                            PathSegment {
                                                ident: Ident {
                                                    sym: String,
                                                    span: bytes(233..239),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                                Comma,
                                Type::Tuple {
                                    paren_token: Paren,
                                    elems: [],
                                },
                            ],
                        },
                    ),
                },
            },
            metadata: HydroNodeMetadata {
                id: Some(
                    4,
                ),
                location_kind: Process(
                    0,
                ),
                output_type: Some(
                    Type::Tuple {
                        paren_token: Paren,
                        elems: [
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: std,
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: string,
                                                span: bytes(379..385),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: String,
                                                span: bytes(387..393),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                            Comma,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: i32,
                                                span: bytes(395..398),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                ),
            },
        },
    },
]

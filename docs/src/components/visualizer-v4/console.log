main.js:1550 Download the React DevTools for a better development experience: https://reactjs.org/link/react-devtools
vis.js:69 Loading visualizer-v4 components...
vis.js:75 Loading VisState...
vis.js:399 🖥️ Window dimensions: {width: 1124, height: 1029}
vis.js:412 📐 Calculated canvas height: 949
vis.js:75 Loading FlowGraph...
vis.js:75 Loading shared config...
vis.js:75 Loading JSONParser...
vis.js:75 Loading layout...
vis.js:75 Loading InfoPanel...
vis.js:75 Loading LayoutControls...
vis.js:75 Loading FileDropZone...
vis.js:168 Processing uploaded file: {edges: Array(8), hierarchyChoices: Array(2), legend: {…}, nodeAssignments: {…}, nodeTypeConfig: {…}, …}
vis.js:193 ✅ File loaded successfully
ELKBridge.ts:29 [ELKBridge] 🆕 Created fresh ELK instance: ELKNode (1754939966917)
VisualizationEngine.ts:524 [VisualizationEngine] 🚀 VisualizationEngine initialized
VisualizationEngine.ts:524 [VisualizationEngine] 🔧 Config: {"autoLayout":true,"layoutDebounceMs":300,"enableLogging":true,"layoutConfig":{"algorithm":"mrtree","enableSmartCollapse":true}}
VisualizationEngine.ts:524 [VisualizationEngine] 📊 Initial layoutCount: 0
VisualizationEngine.ts:524 [VisualizationEngine] 📊 Layout requested
VisualizationEngine.ts:524 [VisualizationEngine] 🔄 State: initial → laying_out
ELKBridge.ts:43 [ELKBridge] 🚀 Starting ELK layout from VisState
ELKBridge.ts:48 [ELKBridge] 🧹 Clearing existing edge layouts for ReactFlow automatic routing
ELKBridge.ts:304 [ELKBridge] 🔄 Using CANONICAL flat ELK pattern
ELKBridge.ts:330 [ELKBridge] ✅ CANONICAL flat graph: 11 nodes, 8 edges
ELKBridge.ts:185 [ELKBridge] 🔍 ELK Input Graph Structure:
ELKBridge.ts:185 [ELKBridge] 📊 Root: 11 children
ELKBridge.ts:198 [ELKBridge] ✅ No existing positions in ELK input (good for fresh layout)
ELKBridge.ts:205 [ELKBridge] 📦 All container dimensions:
ELKBridge.ts:205 [ELKBridge] 📦 5: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 7: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 0: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 1: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 4: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 8: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 6: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 2: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 3: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 loc_0: 200x194
ELKBridge.ts:205 [ELKBridge] 📦 loc_1: 200x194
ELKBridge.ts:212 [ELKBridge] ⚙️  Layout options: {
  "elk.algorithm": "mrtree",
  "elk.direction": "DOWN",
  "elk.hierarchyHandling": "INCLUDE_CHILDREN",
  "elk.mrtree.spacing.nodeNode": "75",
  "elk.mrtree.spacing.levelSeparation": "60",
  "elk.spacing.nodeNode": "75",
  "elk.spacing.edgeNode": "0",
  "elk.spacing.edgeEdge": "10",
  "elk.spacing.componentComponent": "60",
  "elk.layered.spacing.nodeNodeBetweenLayers": "25",
  "elk.nodeSize.constraints": "FIXED_SIZE",
  "elk.nodeSize.options": "DEFAULT_MINIMUM_SIZE",
  "elk.json.shapeCoords": "ROOT",
  "elk.json.edgeCoords": "ROOT"
}
vis.js:399 🖥️ Window dimensions: {width: 1124, height: 1029}
vis.js:412 📐 Calculated canvas height: 949
ELKBridge.ts:87 [ELKBridge] 🔍 Large graph detected, logging input structure...
ELKBridge.ts:87 [ELKBridge] 📊 Total containers: 11
ELKBridge.ts:87 [ELKBridge] 📊 Total edges: 8
ELKBridge.ts:124 [ELKBridge] 🎯 ELK Output Results:
ELKBridge.ts:124 [ELKBridge] 📍 5: pos=(120,792) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 7: pos=(120,1062) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 0: pos=(120,117) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 1: pos=(120,252) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 4: pos=(120,657) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 8: pos=(120,1197) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 6: pos=(120,927) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 2: pos=(120,387) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 3: pos=(120,522) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 loc_0: pos=(375,117) size=200x194
ELKBridge.ts:124 [ELKBridge] 📍 loc_1: pos=(650,117) size=200x194
ELKBridge.ts:131 [ELKBridge] 🔗 ELK Edge Results:
ELKBridge.ts:131 [ELKBridge] 📊 Total edges from ELK: 8
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e0: 1 sections, start=(210,177), end=(210,252)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e1: 1 sections, start=(210,312), end=(210,387)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e2: 1 sections, start=(210,447), end=(210,522)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e3: 1 sections, start=(210,582), end=(210,657)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e4: 1 sections, start=(210,717), end=(210,792)
ELKBridge.ts:131 [ELKBridge] 🔗 ... and 3 more edges
ELKBridge.ts:152 [ELKBridge] 📐 Actual ELK spacing: avg=-129.0px, range=-180-75px
 [ELKBridge] 🔷 Found 5 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 5: ELK=(120, 792) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 7 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 7: ELK=(120, 1062) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 0 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 0: ELK=(120, 117) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 1 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 1: ELK=(120, 252) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 4 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 4: ELK=(120, 657) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 8 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 8: ELK=(120, 1197) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 6 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 6: ELK=(120, 927) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 2 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 2: ELK=(120, 387) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🔷 Found 3 as node, using updateNodeFromELK
 [ELKBridge] � Setting node layout for 3: ELK=(120, 522) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
 [ELKBridge] 🏗️ Found loc_0 as container in VisState, using updateContainerFromELK
 [ELKBridge] 🏗️ Found loc_1 as container in VisState, using updateContainerFromELK
 [ELKBridge] ✅ Using ReactFlow automatic edge routing - no ELK routing processing needed
 [VisualizationEngine] 🔍 SMART COLLAPSE DEBUG:
 [VisualizationEngine]   - enableSmartCollapse: true
 [VisualizationEngine]   - layoutCount: 0
 [VisualizationEngine]   - condition met: true
 [VisualizationEngine] 🧠 Running smart collapse after initial layout
 [VisualizationEngine] 🧠 Starting smart collapse algorithm
 [VisualizationEngine] 📊 Found 2 containers for smart collapse analysis
 [VisualizationEngine] 📏 Container loc_0 area calculation: 200x238 = 47600, collapsed=false
 [VisualizationEngine] 📏 Container loc_1 area calculation: 200x238 = 47600, collapsed=false
 [VisualizationEngine] 📐 Container areas: loc_0=47600, loc_1=47600
 [VisualizationEngine] 📱 Viewport: 1200x800 (960000 total area)
 [VisualizationEngine] 💰 Container area budget: 672000 (70% of viewport)
 [VisualizationEngine] ✅ Keeping loc_0 expanded (area: 47600, total used: 47600)
 [VisualizationEngine] ✅ Keeping loc_1 expanded (area: 47600, total used: 95200)
 [VisualizationEngine] 🎯 Smart collapse decisions: keep 2 expanded, collapse 0
 [VisualizationEngine] 📋 Keeping expanded: loc_0, loc_1
 [VisualizationEngine] 📋 Collapsing: none
 [VisualizationEngine] 💰 Final budget usage: 95200/672000 (14.2%)
 [VisualizationEngine] 🎉 Smart collapse algorithm complete
 [ELKBridge] 🚀 Starting ELK layout from VisState
 [ELKBridge] 🧹 Clearing existing edge layouts for ReactFlow automatic routing
 [ELKBridge] 🔄 Using CANONICAL flat ELK pattern
 [ELKBridge] ✅ CANONICAL flat graph: 11 nodes, 8 edges
 [ELKBridge] 🔍 ELK Input Graph Structure:
 [ELKBridge] 📊 Root: 11 children
 [ELKBridge] ✅ No existing positions in ELK input (good for fresh layout)
 [ELKBridge] 📦 All container dimensions:
 [ELKBridge] 📦 5: 180x60
 [ELKBridge] 📦 7: 180x60
 [ELKBridge] 📦 0: 180x60
 [ELKBridge] 📦 1: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 4: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 8: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 6: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 2: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 3: 180x60
ELKBridge.ts:205 [ELKBridge] 📦 loc_0: 200x238
ELKBridge.ts:205 [ELKBridge] 📦 loc_1: 200x238
ELKBridge.ts:212 [ELKBridge] ⚙️  Layout options: {
  "elk.algorithm": "mrtree",
  "elk.direction": "DOWN",
  "elk.hierarchyHandling": "INCLUDE_CHILDREN",
  "elk.mrtree.spacing.nodeNode": "75",
  "elk.mrtree.spacing.levelSeparation": "60",
  "elk.spacing.nodeNode": "75",
  "elk.spacing.edgeNode": "0",
  "elk.spacing.edgeEdge": "10",
  "elk.spacing.componentComponent": "60",
  "elk.layered.spacing.nodeNodeBetweenLayers": "25",
  "elk.nodeSize.constraints": "FIXED_SIZE",
  "elk.nodeSize.options": "DEFAULT_MINIMUM_SIZE",
  "elk.json.shapeCoords": "ROOT",
  "elk.json.edgeCoords": "ROOT"
}
ELKBridge.ts:87 [ELKBridge] 🔍 Large graph detected, logging input structure...
ELKBridge.ts:87 [ELKBridge] 📊 Total containers: 11
ELKBridge.ts:87 [ELKBridge] 📊 Total edges: 8
ELKBridge.ts:124 [ELKBridge] 🎯 ELK Output Results:
ELKBridge.ts:124 [ELKBridge] 📍 5: pos=(120,814) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 7: pos=(120,1084) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 0: pos=(120,139) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 1: pos=(120,274) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 4: pos=(120,679) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 8: pos=(120,1219) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 6: pos=(120,949) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 2: pos=(120,409) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 3: pos=(120,544) size=180x60
ELKBridge.ts:124 [ELKBridge] 📍 loc_0: pos=(375,139) size=200x238
ELKBridge.ts:124 [ELKBridge] 📍 loc_1: pos=(650,139) size=200x238
ELKBridge.ts:131 [ELKBridge] 🔗 ELK Edge Results:
ELKBridge.ts:131 [ELKBridge] 📊 Total edges from ELK: 8
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e0: 1 sections, start=(210,199), end=(210,274)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e1: 1 sections, start=(210,334), end=(210,409)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e2: 1 sections, start=(210,469), end=(210,544)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e3: 1 sections, start=(210,604), end=(210,679)
ELKBridge.ts:131 [ELKBridge] 🔗 Edge e4: 1 sections, start=(210,739), end=(210,814)
ELKBridge.ts:131 [ELKBridge] 🔗 ... and 3 more edges
ELKBridge.ts:152 [ELKBridge] 📐 Actual ELK spacing: avg=-129.0px, range=-180-75px
ELKBridge.ts:593 [ELKBridge] 🔷 Found 5 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 5: ELK=(120, 814) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 7 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 7: ELK=(120, 1084) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 0 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 0: ELK=(120, 139) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 1 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 1: ELK=(120, 274) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 4 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 4: ELK=(120, 679) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 8 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 8: ELK=(120, 1219) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 6 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 6: ELK=(120, 949) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 2 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 2: ELK=(120, 409) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:593 [ELKBridge] 🔷 Found 3 as node, using updateNodeFromELK
ELKBridge.ts:656 [ELKBridge] � Setting node layout for 3: ELK=(120, 544) -> calling setNodeLayout with: {position: {…}, dimensions: {…}}
ELKBridge.ts:581 [ELKBridge] 🏗️ Found loc_0 as container in VisState, using updateContainerFromELK
ELKBridge.ts:581 [ELKBridge] 🏗️ Found loc_1 as container in VisState, using updateContainerFromELK
ELKBridge.ts:604 [ELKBridge] ✅ Using ReactFlow automatic edge routing - no ELK routing processing needed
VisualizationEngine.ts:524 [VisualizationEngine] 🔄 State: laying_out → ready
VisualizationEngine.ts:524 [VisualizationEngine] ✅ Layout complete (1 total layouts)
ReactFlowBridge.ts:71 [ReactFlowBridge] 🔄 Using HIERARCHICAL ELK + ReactFlow pattern
ReactFlowBridge.ts:79 [ReactFlowBridge] 🗺️ Parent map has 9 relationships: (9) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2)]
ReactFlowBridge.ts:83 [ReactFlowBridge] 📊 Before conversion: 2 containers, 9 nodes
ReactFlowBridge.ts:266 [ReactFlowBridge] 📦 Container loc_0: collapsed=false, position=(375, 139), size=200x282, nodeCount=0
ReactFlowBridge.ts:266 [ReactFlowBridge] 📦 Container loc_1: collapsed=false, position=(650, 139), size=200x282, nodeCount=0
ReactFlowBridge.ts:86 [ReactFlowBridge] 📦 After container conversion: 2 container nodes
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 5: absolute=(120, 814) -> relative=(-530, 675) parent=loc_1
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 7: absolute=(120, 1084) -> relative=(-255, 945) parent=loc_0
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 0: absolute=(120, 139) -> relative=(-255, 0) parent=loc_0
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 1: absolute=(120, 274) -> relative=(-255, 135) parent=loc_0
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 4: absolute=(120, 679) -> relative=(-530, 540) parent=loc_1
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 8: absolute=(120, 1219) -> relative=(-255, 1080) parent=loc_0
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 6: absolute=(120, 949) -> relative=(-530, 810) parent=loc_1
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 2: absolute=(120, 409) -> relative=(-530, 270) parent=loc_1
ReactFlowBridge.ts:322 [ReactFlowBridge] 🔷 Node 3: absolute=(120, 544) -> relative=(-530, 405) parent=loc_1
ReactFlowBridge.ts:90 [ReactFlowBridge] 🔷 After node conversion: 9 standard nodes
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e0 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e1 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e2 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e3 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e4 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e5 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e6 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:405 [ReactFlowBridge] 🔗 Edge e7 has no routing sections - will use automatic ReactFlow routing
ReactFlowBridge.ts:94 [ReactFlowBridge] ✅ Hierarchical pattern: 11 nodes, 8 edges
FlowGraph.tsx:227 [FlowGraph] 🚫 Auto-fit disabled for debugging Y-axis offset
edges.tsx:15 [StandardEdge] DEBUG Edge e0: {sourceX: 180.001953125, sourceY: 180.41015625, targetX: 180.001953125, targetY: 271.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e0: M180.001953125,180.41015625 C180.001953125,226.0185546875 180.001953125,226.0185546875 180.001953125,271.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e1: {sourceX: 180.001953125, sourceY: 315.41015625, targetX: 180.001953125, targetY: 406.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e1: M180.001953125,315.41015625 C180.001953125,361.0185546875 180.001953125,361.0185546875 180.001953125,406.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e2: {sourceX: 180.001953125, sourceY: 450.41015625, targetX: 180.001953125, targetY: 541.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e2: M180.001953125,450.41015625 C180.001953125,496.0185546875 180.001953125,496.0185546875 180.001953125,541.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e3: {sourceX: 180.001953125, sourceY: 585.41015625, targetX: 180.001953125, targetY: 676.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e3: M180.001953125,585.41015625 C180.001953125,631.0185546875 180.001953125,631.0185546875 180.001953125,676.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e4: {sourceX: 180.001953125, sourceY: 720.41015625, targetX: 180.001953125, targetY: 811.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e4: M180.001953125,720.41015625 C180.001953125,766.0185546875 180.001953125,766.0185546875 180.001953125,811.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e5: {sourceX: 180.001953125, sourceY: 855.41015625, targetX: 180.001953125, targetY: 946.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e5: M180.001953125,855.41015625 C180.001953125,901.0185546875 180.001953125,901.0185546875 180.001953125,946.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e6: {sourceX: 180.001953125, sourceY: 990.41015625, targetX: 180.001953125, targetY: 1081.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e6: M180.001953125,990.41015625 C180.001953125,1036.0185546875 180.001953125,1036.0185546875 180.001953125,1081.626953125
edges.tsx:15 [StandardEdge] DEBUG Edge e7: {sourceX: 180.001953125, sourceY: 1125.41015625, targetX: 180.001953125, targetY: 1216.626953125, sourcePosition: 'bottom', …}
edges.tsx:25 [StandardEdge] Generated path for e7: M180.001953125,1125.41015625 C180.001953125,1171.0185546875 180.001953125,1171.0185546875 180.001953125,1216.626953125
